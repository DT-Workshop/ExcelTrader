syntax = "proto3";

/**
* All double value should be accurate for 6 decimal position
**/

package com.xceder.protocol;

option optimize_for = SPEED;

/**
Protocol version
*/
enum PROTOCOL {
    BUILD = 0;
    VERSION = 20180828;
}

message Request {

    //request ID, should be unique enough to receive the request Result
    uint32 requestID = 1;

    //this is the timestamp from client side when request is submitted
    uint64 requestUTC = 2;

    oneof request {
        Ping ping = 3;

        //login system for registered user
        Logon logon = 4;

        //logoff message to logoff current session
        string logoff = 5;

        //register new account or update the account detail
        //only these account detail will be updated
        // particular,status,role,parent,preferences
        Account account = 6;

        Query queryRequest = 7;

        // subscribe/unsubscribe market data
        InstrumentTopic marketData = 8;

        Order order = 9;

        OrderReplace orderReplace = 10;

        //to delete spreader, just specify the status as DELISTED
        //result will be in the instruments of response
        Spreader spreader = 11;

        //upload the application layout info
        WorkSpaces workSpaceList = 12;

        //upload the watch list info
        WatchLists watchList = 13;

        PasswordChange changePassword = 14;

        //upload the riskControl data info
        RiskControl riskControl = 15;
    }
}

// Server to Client message, server can include different fields in a single message
message Response {

    //server side initiated message will have value 0
    uint32 requestID = 1;

    //it is only valid for the request reply
    ERROR_CODE resultCode = 2;

    RequestMeta requestMeta = 3;

    //mainly used for the pagination, 0 means total records is decided by the result
    uint32 totalRecords = 4;

    oneof response {
        // server reply for the Ping request
        Ping ping = 5;

        Instruments instruments = 6;

        OrderTransactions orderTransactions = 7;

        // broadcast message for the price updates
        MarketDatas marketDatas = 8;

        Logs logs = 9;

        Positions positions = 10;

        // reply for the logon request
        Account account = 11;

        // broadcast message for notice
        NoticeMessages notice = 12;

        // broadcadst message for the service status updates
        ServiceStatuses serviceStatus = 13;

        Exchanges exchange = 14;

        WatchLists watchList = 15;

        WorkSpaces workSpaceList = 16;

        InstrumentStatuses instrumentStatusList = 17;

        Ledgers ledgerList = 18;

        //reply for the query account relationship and trading account owners, or broadcast changes
        AccountRelationships accountRelationshipList = 19;

        //reply for the query or broadcasted change
        RiskControls riskControlList = 20;

        RiskAlerts riskAlerts = 21;

        TradingAccountStatuses tradingAccountStatus = 22;

        TradingAccountUsers tradingAccountUsers = 23;

        //reply for the query  sub account
        SubAccount subAccount = 24;
    }
}

// Result code.
enum ERROR_CODE {
    PROCESSING = 0;

    // success codes
    SUCCESS = 1;

    // failure codes (>=100)
    FAILURE = 100;

    TIMEOUT = 101;

    NETWORK_ERROR = 102;

    CANCELLED = 103;

    CONNECTION_DOWN = 104;

    CONNECTION_NOT_CONFIGURE = 105;

    // Requested data is outside of allowed range.
    OUTSIDE_ALLOWED_RANGE = 106;

    UNKNOWN_REQUEST = 107;

    // The user is not allowed to access this instrument data.
    ACCESS_DENIED = 108;

    TIMEOUTOFSYNC = 109;

    NOT_SUPPORT = 110;

    NOT_FOUND = 111;

    COUNTERPARTY_REJECTED = 112;

    VALUE_NO_CHANGE = 113;

    INVALID_REQUEST_PARAMS = 114;

    NETWORK_STALE = 115;


    ACCOUNT_NO_ONETIME_PASSWORD = 130;

    ACCOUNT_NO_TRADINGACCOUNT = 131;

    ACCOUNT_OTP_EXPIRED = 132;

    ACCOUNT_OTP_NOT_FOUND = 133;

    ACCOUNT_PASSWORD_EXPIRED = 134;

    ACCOUNT_WRONG_PASSWORD = 135;

    ACCOUNT_SUSPENDED = 136;

    ACCOUNT_KICKEDOUT = 137;

    ACCOUNT_DUPLICATE_USER = 138;

    ACCOUNT_NOT_LOGIN = 139;

    ACCOUNT_INVALID_EMAIL = 140;

    ACCOUNT_INVALID_USERID = 141;

    ACCOUNT_NOT_EXIST = 142;

    ACCOUNT_LIQUIDATION = 143;


    INSTRUMENT_EXPIRED = 160;

    INSTRUMENT_NOT_TRADABLE = 161;

    INSTRUMENT_NO_PRICE_ACCESS = 162;

    INSTRUMENT_UNKNOWN = 163;


    ORDER_INVALID_PARAMS = 180;

    ORDER_INVALID_INSTRUMENTID = 181;

    ORDER_INVALID_ID = 182;

    ORDER_INVALID_BROKER = 183;

    ORDER_INVALID_OWNER = 184;

    ORDER_INVALID_QTY = 185;

    ORDER_INVALID_LIMIT_PRICE = 186;

    ORDER_INVALID_STOP_PRICE = 187;

    ORDER_INVALID_ORDER_TYPE = 188;

    //ORDER_INVALID_SUBMIT_TIME = 189;

    ORDER_INVALID_TIMEINFORCE = 190;

    ORDER_INVALID_CHAINCLORDID = 191;

    ORDER_INVALID_SYMBOL = 192;

    ORDER_INVALID_SIDE = 193;

    /* Order related errors */
    //tag should be less than 255
    ORDER_TAG_TOOLONG = 194;

    ORDER_NOT_REPLACEABLE = 195;

    //previous action is still in progress
    ORDER_ACTION_IN_PROGRESS = 196;

    ORDER_NO_TRADING_ACCOUNT = 197;

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //spreader error start from 220
    SPREADER_NO_QUOTING = 220;

    SPREADER_NO_LEGS = 221;

    SPREADER_NO_INSTRUMENT_ACCESS = 222;

    SPREADER_DUPLICATE_ORDER = 223;

    SPREADER_INVALID_ID = 224;

    SPREADER_INVALID_LEG_INSTRUMENT = 225;

    SPREADER_INVALID_LEG_RATIO = 226;

    SPREADER_INVALID_LEG_PRICEWEIGHT = 227;

    //for example syntax error
    SPREADER_INVALID_LEG_RULES = 228;

    //leg order has failure, for example, fail to withdraw some leg orders
    SPREADER_LEG_FAILURE = 229;

    SPREADER_ORDER_EXECUTING = 230;

    SPREADER_INAVLID_OWNER = 231;

    SPREADER_INVALID_VERSION = 232;

    SPREADER_INVALID_INSIDE_QUOTE = 233;
}

message RequestMeta {
    //only valid for request reply
    uint64 requestRcvTime = 1;

    //only valid for request reply
    uint64 requestCompletedTime = 2;

    //address for the request
    string requestFrom = 3;
}


message PasswordChange {

    // Currently used password.
    string currentPassword = 1;

    // New password that user wants to use. put blank means request the reset token
    string newPassword = 2;

    string email = 3;
}

enum BROKER {
    //also means any/unspecified broker
    ANY = 0;

    XCEDER = 1;

    SQUARE = 2;
    KGI = 3;
    PHILLIP = 4;
    ORIENT = 5;
    UOB = 6;

    //直达通
    DA = 7;

    LMAX = 8;

    //ctp testing server
    CTP = 9;
}

message Logs {
    repeated Log record = 1;
}

message Log {
    Request request = 1;

    Response result = 2;
}

// Ping request which can be initiated by any side to ensure connection is alive. Both client and
// server sides must respond such request with Ping.
message Ping {
    // initiator time
    uint64 pingSentUTC = 1;

    uint64 pingRcvUTC = 2;

    uint64 pongSentUTC = 3;

    // responser time
    uint64 pongRcvUTC = 4;
}

// Logon into the system and opening a new session.
message Logon {
    // User login ID.
    string userID = 1;

    // User's password.
    string password = 2;

    // User's one time password, might be required according to the user's settings.
    uint32 OTP = 3;

    string clientApp = 4;
}

message WorkSpaces {
    repeated WorkSpace record = 1;

    repeated Preference preferences = 2;
}

message Preference {
    string field = 1;

    bytes value = 2;
}

message WorkSpace {
    //when update workspace, server will fill in this field
    string userID = 1;

    string layoutID = 2;

    //max length is 10K bytes, to delete the workspace, put this as 'DELETE'
    string detail = 3;

    //when update workspace, server will fill in this field
    uint64 updateTimeUTC = 4;
}

message TradingAccountQuery {
    TradingAccount account = 1;

    PeriodRange period = 2;

    //offset index (0 based)
    uint32 offset = 3;
}

message TradingAccounts {
    repeated TradingAccount record = 1;
}

message TradingAccount {
    BROKER broker = 1;

    //it is the account from broker
    string account = 2;
}

message TradingAccountStatuses {
    repeated TradingAccountStatus record = 1;
}

message TradingAccountStatus {
    enum STATUS {
        NORMAL = 0;

        //force close the position
        LIQUIDATION = 1;
    }

    TradingAccount tradingAccount = 1;

    STATUS status = 2;

    uint64 updateTimeUTC = 3;

    string ownerID = 4;

    string updateBy = 5;
}

message TradingAccountUsers {

    TradingAccount tradingAccount = 1;

    repeated string userList = 2;
}

message Account {

    enum LOGIN_MODE {
        PASSWORD = 0;

        OATH2 = 1;

        OTP = 2;
    }

    enum STATUS {
        NORMAL = 0;

        SUSPEND = 1;
    }

    enum ROLE {
        CLIENT = 0;
        ADMIN = 1;
        VIEWADMIN = 2;
    }

    //it will be used as login user name
    string userID = 1;

    string password = 2;

    Particular particular = 3;

    uint64 updateTimeUTC = 4;

    //for new client, it should be UNVERIFIED
    STATUS status = 5;

    ROLE role = 6;

    //sorted by the login time in descending sequence. the first record is the latest
    repeated LoginRecord loginLogs = 7;

    //direct parent user for this account
    string parent = 8;

    repeated TradingAccount tradingAccountList = 9;

    Permission permission = 10;

    //key is the broker value
    map<uint32, string> primaryTradingAccountMap = 11;

    bool isFrozen = 12;
}

message SubAccount {
    Account account = 1;
}

message RiskControls {
    repeated RiskControl record = 1;
}

message RiskControl {

    message Settings {
        double balanceWarnLevel = 1;

        double liquidationLevel = 2;

        double additionalMargin = 3;

        double marginRate = 4;

        bool enableMortgageableLimit = 5;

        double mortgageableFundRate = 6;

        bool enableBalanceWarn = 7;

        bool enableLiquidation = 8;
    }

    uint32 recordNo = 1;

    TradingAccount tradingAccount = 2;

    Settings setting = 3;

    uint64 updateTimeUTC = 4;

    string updateBy = 5;
}

message RiskAlerts {
    repeated RiskAlert record = 1;
}

message RiskAlert {
    enum TYPE {
        ALERT = 0;
        FORCE_CLOSE = 1;
    }

    uint32 recordNo = 1;

    TradingAccount tradingAccount = 2;

    TYPE type = 3;

    double balance = 4;

    string currency = 5;

    repeated uint64 affectedOrderList = 6;

    //alert happened time
    uint64 updateTimeUTC = 7;
}

message Particular {
    enum GENDER {
        UNKNOWN = 0;

        MALE = 1;

        FEMALE = 2;
    }

    string givenName = 1;

    string surName = 2;

    string email = 3;

    string phone = 4;

    //ISO 3166 2-letter code
    string country = 5;

    //ISO 639 alpha-2 language code
    string language = 6;

    GENDER gender = 7;

    uint64 signUpUTC = 8;

    uint64 emailVerifiedUTC = 9;

    uint64 phoneVerifiedUTC = 10;

    string address = 11;

    string city = 12;

    string state = 13;

    string postCode = 14;

    string alternatePhone = 15;
}

message Permission {

    bool enableSubAccountTrade = 1;

    bool enableChangeSubAccount = 2;

    bool enableChangeSubAccountExchange = 3;

    bool enableChangeSubAccountProductRange = 4;

    bool enableChangeSubAccountIPLimit = 5;

    bool enableChangeSubAccountPermission = 6;

    bool enableChangeTradingAccountRiskNofitication = 7;

    bool enableChangeTradingAccountLiquidation = 8;

    bool enableTrading = 9;

    bool enableRFQ = 10;
    //    IPLIMIT module permission
    bool enableLoginIPLimit = 11;

    bool enableCustomIPLimit = 12;

    string startIP = 13;

    string endIP = 14;
    //allow trading exchanges's code array , like TOCOM ，DCE...
    repeated string enableExchanges = 15;
    //    subAccountPermission module permission
    bool enableSystemNotice = 16;

    bool enableApprovalNotice = 17;

    bool enableMangePermission = 18;

    bool enableMangeMargin = 19;

    bool enableTrade = 20;

    bool enableTradingLimit = 21;

    bool enablePositionLimit = 22;

    bool enableMangeExchanges = 23;

    bool enableMangeUserInfo = 24;

    bool enableChangePWD = 25;

    bool enableFrozenAccount = 26;

    bool enableMangeContactInfo = 27;

    bool enableMangeExchangePermission = 28;

    bool enableMangeIPLimit = 29;

    bool enableTradingAccountLiquidation = 30;

    bool enableYesterdayStandard = 31;
}

message LoginRecord {
    uint64 loginUTC = 1;

    string loginFrom = 2;

    string loginDevice = 3;

    ERROR_CODE loginResult = 4;

    string authBy = 5;

    uint64 logoutUTC = 6;

    string logoutRemark = 7;

    uint32 prevFailCount = 8;

    uint32 OTP = 9;

    string clientApp = 10;
}

// Request for information.
message Query {
    oneof query {
        UserPeriod log = 1;

        QueryProduct product = 2;

        QueryInstrument instrument = 3;

        QuerySpreader spreader = 4;

        Exchange.EXCHANGE exchange = 5;

        TradingAccountQuery position = 6;

        QueryOrder order = 7;

        TradingAccountQuery pastOrder = 8;

        QueryWatchList watchList = 9;

        QueryWorkSpace workSpace = 10;

        QueryMarketData marketData = 11;

        QueryAccountRelationship accountRelationship = 12;

        TradingAccountQuery riskControl = 13;

        TradingAccountQuery riskAlert = 14;

        TradingAccountQuery ledgers = 15;

        TradingAccount tradingAccountUsers = 16;

        TradingAccounts tradingAccountStatus = 17;

        AccountUserID subAccount = 18;
    }
}

message AccountUserID {
    string userID = 1;
}

message QueryAccountRelationship {
    //blank means the current login user
    string userID = 1;

    // 0 will return full depth of account hierarchy
    int32 levels = 2;
}

message AccountRelationships {
    repeated AccountRelationship record = 1;
}

message AccountRelationship {
    string userID = 1;

    string parentID = 2;
}

message PeriodRange {

    //yyyyMMdd include
    uint32 fromDate = 1;

    //yyyyMMdd include
    uint32 toDate = 2;
}

message UserPeriod {

    string userID = 1;

    PeriodRange period = 2;
}

message QueryProduct {

    ProductID productID = 1;

    //key words separated with comma ','
    string keywords = 2;

    uint32 offset = 3;
}

message QueryInstrument {

    InstrumentID instrumentID = 1;

    //key words separated with comma ','
    string keywords = 2;

    uint32 offset = 3;
}

message QuerySpreader {

    string owner = 1;

    string name = 2;

    uint32 version = 3;

    string keywords = 4;

    uint32 offset = 5;
}

message QueryOrder {

    uint64 orderID = 1;

    //always from last action to the first, 0 means the latest action
    uint32 actionOffset = 2;

    //always from the last to the first, 0 means the latest report
    uint32 reportOffset = 3;
}

message QueryWatchList {

    string userID = 1;

    string title = 2;
}

message QueryWorkSpace {
    string userID = 1;

    string layoutID = 2;

    uint32 offset = 3;
}

message QueryMarketData {

    enum TYPE {
        //day end only
        DAY = 0;

        //done only
        TRADE = 1;

        //including done, bid and ask quotes
        QUOTES = 2;
    }

    TYPE type = 1;

    InstrumentID instrumentID = 2;

    //if not specify the toDate, server will return the latest market data
    PeriodRange period = 3;

    //offset index (0 based)
    uint32 offset = 4;
}

enum ACTION {
    SUBSCRIBE = 0;

    UNSUBSCRIBE = 1;
}

message InstrumentTopic {

    InstrumentID instrumentID = 1;

    ACTION action = 2;
}

enum SIDE {
    NO_SIDE = 0;

    // Describes purchasing side of a trade.
    BUY = 1;

    // Describes selling side of a trade.
    SELL = 2;
}

// Trade routing order. It is used as new order request and as a part of order status updates.
message Order {
    enum TYPE {
        // Limit order, buy or sell by price that is the same or better then specified limit price.
        LMT = 0;

        // Stop order, Order becomes a Market when market reaches order's stop price
        // (which is on opposite side of market).
        STP = 1;

        // Stop-limit order, Order becomes a Limit when market reaches order's stop price.
        STL = 2;

        // Market order, buy or sell by the best available opposite price.
        MKT = 3;
    }

    enum TIMEINFORCE {
        DAY = 0;

        //Good Till Cancel
        GTC = 1;

        //At the Opening
        OPG = 2;

        //Immediate or Cancel
        IOC = 3;

        //Fill or Kill
        FOK = 4;

        //Good Till Crossing
        GTX = 5;

        //Good Till Date
        GTD = 6;

        //Good in Session
        GIS = 7;
    }

    enum EXECINSTRUCTION {
        // All or None (fill order only completely).
        AON = 0;

        // Iceberg (show only part of order size).
        ICEBERG = 1;

        // Quantity triggered (aka DOM Triggered, honor additional quantity threshold for triggering).
        QT = 2;

        // Trailing order (price of the order is following market one direction by specific offset).
        TRAIL = 3;

        // Funari (Limit order becomes a Market on Close).
        FUNARI = 4;

        // Market if Touched (Limit order becomes a Market when market reaches order's limit price).
        MIT = 5;

        // Market Limit Market is a limit order that is used to place a buy order above the best offer
        // to fill by the best offer or a sell order below the best bid to fill by the best bid.
        MLM = 6;
    }

    enum SUBMITMODE {
        AUTOMATED = 0;
        MANUAL = 1;
    }

    //server will auto fill the value after the order submitted
    uint64 orderID = 1;

    //this is mainly for the strategy order
    uint64 chainID = 2;

    //will be the first report's transaction time
    uint64 submitUTC = 3;

    //server will fill this with the actual account who submit this order
    string submitBy = 4;

    // this order owner user ID. if it is blank, means it same as the submitBy
    string owner = 5;

    // remark for this order
    string remark = 6;

    //this is for the multipe leg orders. normally it should be 0 for non-leg orders
    uint32 leg = 7;

    SUBMITMODE indicator = 8;

    //instrument/spreader ID
    InstrumentID instrumentID = 9;

    // Order side.
    SIDE side = 10;

    Order.TYPE orderType = 11;

    repeated Order.EXECINSTRUCTION execInstruction = 12;

    Order.TIMEINFORCE timeInForce = 13;

    double orderQty = 14;

    //Limit price of the order (required for Limit and Stop-limit orders)
    double limitPrice = 15;

    // Stop price of the order (required for Stop and Stop-limit orders).
    double stopPrice = 16;

    // Visible size of the order for Icebergs, if it is 0 means all visible.
    double visibleQty = 17;

    // Minimum visible positive size of the order
    // used for iceberg orders with 'random visible size',
    // must be < visible_qty.
    double minVisibleQty = 18;

    //yyyyMMdd
    uint32 validDate = 19;

    // Trigger quantity (threshold) as additional stop order activation condition.
    double triggerQty = 20;

    //ISO 3 charactor currency
    string currency = 21;

    string sourceServer = 22;

    CTPOrder ctpOrder = 23;

    bool isClosePos = 24;

    //if this is blank when submit order, server will use the configured default trading account for this user
    string account = 25;
}

message OrderReplace {
    uint64 orderID = 1;

    OrderAction action = 2;
}

// Status of a specific transaction.
// All attributes are at the transaction moment.
message OrderReport {
    enum STATUS {
        //not submitted to the market or execution side yet
        INPROCESSING = 0;

        PENDING_NEW = 1;

        PENDING_CANCEL = 2;

        PENDING_REPLACE = 3; //(e.g. result of Order Cancel/Replace Request <G>)

        NEW = 4;

        REPLACED = 5;

        //ExecType will always use FILL, this is for order status only
        PARTIAL_FILL = 6;

        //this is mainly for the FIX ExecType RESTATED, order status should not be this value
        RESTATED = 7;

        //market is closed and temporarily queued in broker server (CQG) or xceder server
        PARKED = 8;

        //non-working order status
        FILL = 9;

        CANCELLED = 10;

        REJECTED = 11;

        EXPIRED = 12;

        NOT_EXIST = 13;
    }

    //1 based running number to indicate the report sequence
    uint32 reportNo = 1;

    //unique report ID for this report
    string reportID = 2;

    uint64 orderID = 3;

    //orderID assigned by the execution side
    string execOrderID = 4;

    //0 means it is for the order itself, not the reply of the action
    uint32 actionNo = 5;

    //this transaction type
    STATUS execType = 6;

    //latest order status
    STATUS ordStatus = 7;

    // Time of execution of order, if not provided, 0.
    uint64 transactTimeUTC = 8;

    // Time of report received time
    uint64 reportTimeUTC = 9;

    double fillQty = 10;

    double fillPrice = 11;

    double totalFillQty = 12;

    // Average fill price.
    double avgFillPrice = 13;

    // Remaining (unfilled) order quantity. It is not always equal
    // to order size minus filled size (for example, busted orders violate that).
    double remainingQty = 14;

    // Additional transaction details from the execution side
    string remark = 15;

    // If present, identifies the counterpart of the order fill, as reported by the execution system.
    string fillCounterParty = 16;

    //broker string to indicate which system create this report. Xceder means this server is from xceder system
    string reportSource = 17;

    // last received filled time
    uint64 fillTimeUTC = 18;

    CTPOrderReport ctpReport = 19;
}

message OrderTransactions {
    repeated OrderTransaction record = 1;
}

message OrderTransaction {

    //if it is for the order status update, this may be empty
    Order order = 1;

    //this is the total number for current + past, 0 should be ignored
    uint32 totalActions = 2;

    //0 should be ignored
    uint32 totalReports = 3;

    //current effective action No, success replace action
    uint32 effectiveReplaceAction = 4;

    //if it is for the order status update, this may be empty
    //last action is the latest action, sorted by the actionNo
    repeated OrderAction actionRecords = 5;

    //last report is the latest report
    repeated OrderReport reportRecords = 6;
}

message OrderAction {

    //1 based running number, it is server to maintain this value, client no need fill it when submit the request
    uint32 actionNo = 1;

    //server will fill this info
    uint64 submitTimeUTC = 2;

    //server will fill this value based on the actual user ID
    string submitBy = 3;

    //0 means cancel
    double orderQty = 4;

    //below is for replacement (orderQty != 0) only
    double limitPrice = 5;

    double stopPrice = 6;

    string sourceServer = 7;

    string remark = 8;
}

message TradingHour {
    //HHMM in specified timezone
    uint32 preOpenTime = 1;

    //HHMM in specified timezone
    uint32 openTime = 2;

    //HHMM in specified timezone
    uint32 preCloseTime = 3;

    //HHMM in specified timezone
    uint32 closeTime = 4;
}

message TradingDay {

    //if it is 0, means this is for normal trading days
    uint32 dayOfYear = 1;

    string remark = 2;

    repeated TradingHour tradingHourList = 3;
}

message Exchanges {
    repeated Exchange record = 1;
}

message Exchange {
    enum EXCHANGE {
        ANY = 0;

        XCEDER = 1;

        OTC = 2;

        DGCX = 3;

        LMAX = 4;

        SGX = 5;

        HKEX = 6;

        SHFE = 7;

        CZCE = 8;

        DCE = 9;

        CFFEX = 10;

        INE = 11;

        //ICE Futures Singapore
        IFSG = 12;
    }

    EXCHANGE code = 1;
    string name = 2;

    //used by the trading day
    string timezone = 3;

    repeated TradingDay tradingDayList = 4;
}

message ProductID {
    Exchange.EXCHANGE exchange = 1;

    //Spreader will be the formatted as ownerAcct:name:version string,
    //OTC product will be formattted as broker:symbol
    //others will be exchange symbol
    string symbol = 2;

    Product.TYPE type = 3;
}

message Product {
    enum TYPE {
        ANY = 0;
        FUTURES = 1;
        FOREX = 2;
        INDEX = 3;

        SPREADER = 4;

        ///期货期权
        OPTIONS = 5;

        ///组合
        COMBINATION = 6;

        ///即期
        SPOT = 7;

        ///期转现
        EFP = 8;

        ///期转现
        SPOT_OPTION = 9;
    }

    enum STATUS {
        NORMAL = 0;

        EXPIRED = 1;

        TRADING_HALT = 2;

        DELISTED = 3;
    }

    ProductID productID = 1;

    string description = 2;

    //3 ISO char
    string currency = 3;

    //CTP system means the limit order
    double maxOrderVolume = 4;

    //CTP system means the limit order
    double minOrderVolume = 5;

    double lotSize = 6;

    //Size of one base tick for this security
    double tickSize = 7;

    //tick table for price tiers
    repeated TickRange tickRange = 8;

    uint64 updateTimeUTC = 9;

    //can be traded through brokers
    repeated BROKER broker = 10;

    //for futures contracts, empty records means all year
    //>12 means next year month, for example, 13 means next year Jan
    repeated uint32 contractMonth = 11 [packed = true];

    //product trading hour. if it is empty, follow exchange trading hour
    repeated TradingHour tradingHourList = 12;

    TradingHour lastDayTradingHour = 13;

    double dailyPriceLimit = 14;

    double positionLimit = 15;

    //futures empty means the last day of the month
    //3WEDNESDAY-2: 2 Business days before 3rd Wednesday
    string lastTradingDay = 16;

    //empty means business day immediately folloing the last trading day
    string listDay = 17;

    //used by the trading hour, empty means follow exchange
    string timeZone = 18;

    CTPProductRequirement ctpRequirement = 19;
}

message CTPProductRequirement {

    enum MORTGAGE_FUND_USAGE {
        //不能使用
        MFUR_NONE = 0;

        //用于保证金
        MFUR_MARGIN = 1;

        //用于手续费、盈亏、保证金
        MFUR_ALL = 2;
    }

    enum POSITION_TYPE {
        POS_UNKNOWN = 0;
        POS_NET = 1;
        POS_GROSS = 2;
    }

    enum POSITION_CLOSE {
        NORMAL = 0;
        SPEC_FIRST = 1;
    }

    ///市价单最大下单量
    uint32 maxMarketOrderVolume = 1;

    ///市价单最小下单量
    uint32 minMarketOrderVolume = 2;

    ///持仓类型
    POSITION_TYPE positionType = 3;

    ///持仓日期类型
    bool includeHistoryPosition = 4;

    ///平仓处理类型
    POSITION_CLOSE closeDealType = 5;

    ///质押资金可用范围
    MORTGAGE_FUND_USAGE mortgageFundUseRange = 6;

    ///合约基础商品乘数
    double underlyingMultiple = 7;
}


message Instruments {

    repeated Instrument instrument = 1;

    repeated Product product = 2;

    repeated Spreader spreader = 3;

    //reply for the spreader request
    Spreader.Meta spreaderMeta = 4;
}

message InstrumentID {
    ProductID productID = 1;

    //Futures is the contract month YYYYMM
    uint32 contract = 2;

    BROKER broker = 3;
}

message InstrumentStatuses {
    repeated InstrumentStatus instrumentStatus = 1;
}

message InstrumentStatus {
    enum STATUS {
        ///开盘前
        BEFORETRADING = 0;

        ///非交易
        NOTRADING = 1;

        ///连续交易
        CONTINOUS = 2;

        ///集合竞价报单
        AUCTIONORDERING = 3;

        ///集合竞价价格平衡
        AUCTIONBALANCE = 4;

        ///集合竞价撮合
        AUCTIONMATCH = 5;

        ///收盘
        CLOSED = 6;
    }

    enum REASON {
        UNKNOWN = 0;

        ///自动切换
        AUTOMATIC = 1;
        ///手动切换
        MANUAL = 2;
        ///熔断
        FUSE = 3;
    }

    InstrumentID id = 1;

    STATUS status = 2;

    uint64 enterTime = 3;

    REASON reason = 4;
}

message Instrument {

    enum COMBINATION {
        //期货组合
        FUTURE = 0;

        //垂直价差BUL
        BUL = 1;

        //垂直价差BER
        BER = 2;

        //跨式组合
        STD = 3;

        //宽跨式组合
        STG = 4;

        //备兑组合
        PRT = 5;

        //时间价差组合
        CLD = 6;
    }

    //normally when the product is supported by mutliple broker, this broker value will be 0
    InstrumentID id = 1;

    //yyyyMMdd in product timezone
    uint32 listDay = 2;

    //yyyyMMdd in product timezone
    uint32 lastTradingday = 3;

    //yyyyMMdd in product timezone
    uint32 startDeliveryDay = 4;

    //yyyyMMdd in product timezone
    uint32 endDeliveryDay = 5;

    //yyyyMMdd in product timezone
    uint32 expireDay = 6;

    //yyyyMMdd in product timezone
    uint32 createDay = 7;

    ///多头保证金率
    double longMarginRatio = 8;

    ///空头保证金率
    double shortMarginRatio = 9;

    bool maxMarginSideAlgorithm = 10;

    double strikePrice = 11;

    COMBINATION combinationType = 12;

    uint64 updateTimeUTC = 13;
}

message Spreader {
    message Meta {
        uint32 version = 1;
        uint64 updateTimeUTC = 2;
        Product.STATUS status = 3;

        //who update this spreader.
        string updateBy = 4;

        string sourceServer = 5;
    }

    enum QUOTING_MODE {
        //If the hedge market quantity drops below the minimum hedge quantity, the associated quoting order will be pulled
        //from the market and will not be resubmitted even if sufficient hedge market volume reappears at some later time.
        ALL_NONE = 0;

        //Resubmits a quoting order when there is sufficient hedge volume.
        //Note: that with this option, the spread order will persist and remain working even though no quoting orders are
        //working in the market; quoting orders will automatically be resubmitted if sufficient hedge quantity returns.
        ALL_NONE_RESUBMIT = 1;

        //Leans on only the inside market of the hedge legs and, therefore, only considers the size of the hedge leg’s inside
        //market. If that volume is less than the minimum hedge quantity, the quoting order will be reduced to the largest
        //size that could be fully hedged at the inside market of the hedge leg(s).
        DYNAMIC_INSIDELEAN = 2;
    }

    //how to represent the price for this spread
    enum TYPE {
        // Prices display as the implied price of the spread.
        // Leg A Price (*) User-Defined Multiplier – Leg B Price (*) User-Defined Multiplier= Implied Price
        IMPLIED = 0;

        //Prices display based on the individual legs' net change from the previous day settlement.
        //If you base spread prices on Net Change , you disable calculations in the Tick Information section.
        //The Calculated Tick Size defaults to 25/100. You can still use the Override Tick Size to change it.
        NETCHANGE = 1;

        //Prices display as a percentage ratio (divides Leg A price by Leg B price).
        //The Ratio setting is for two-legged spreads.
        RATIO = 2;

        //Prices display in yield. When enabled, an additional set of “Yield” parameters is displayed that can be configured
        //for each leg
        YIELD = 3;

        //Prices display based on a custom formula for the implied spread price.
        CUSTOM = 4;
    }

    message SpreadSlop {
        //spread price range for this slop, need be used with price scale
        sint64 range = 1;

        //The worst spread price you will accept,need be used with price scale

        //When buying, this property applies to prices above the current bid.
        //When selling, this property applies to prices below the current offer.
        sint64 insideSlop = 2;

        //The best spread price you will accept,need be used with price scale

        //When buying, this property applies to prices below the current bid.
        //When selling, this property applies to prices above the current offer.
        sint64 outsideSlop = 3;
    }

    message InsideQuote {
        //0: means disable
        //1: Quotes do not adjust toward the inside market unless the new quote price is the inside market
        //n: quoting (n-1) ticks away from the inside market
        uint32 insideTick = 1;

        //limit in ticks a quoting order is allowed to work away from the price level that matches the spread differential
        //0: the spread differential price level and the quoting order will always requote to the price that matches the
        //spread differential.
        uint32 distanceLimit = 2;
    }

    message EventRules {
        string preQuoting = 1;
        string preHedging = 2;
        string postHedging = 3;
    }

    message Leg {
        enum TYPE {
            //send hedge and quoting orders at the same time
            QUOTE = 0;

            //send the hedge order only after receiving a full fill of the quoting order
            HEDGE = 1;
        }

        InstrumentID instrumentID = 1;

        TYPE type = 2;

        //indicate whether this leg is a short leg
        bool isShortLeg = 3;

        //quantity of this leg in relation to the other spread legs
        //The Spread Ratio field allows a value of zero for spreads that require a leg for spread calculation purposes only,
        //and not for entering orders as a part of the spread. When a leg has a value of zero in the Spread Ratio field,
        //no quoting orders or hedge orders will be submitted in that leg as a part of a spread, but a spread fill is
        //generated. The current inside market price at the time of the quoting leg fill will be used for the leg fill price
        //when creating the spread fill.
        //Values entered in the Spread Ratio field do not affect the spread price.
        double qtyRatio = 4;

        //the multipler in the spread price formula
        double priceWeight = 5;

        //number of ticks spreader can adjust the price of the limit order to fill the spread order.
        //Indicates the number of ticks Spreader can adjust the price of the limit order to fill the spread order.
        //Payup Ticks values can be between -9999 and 9999. Enter a positive value to adjust the price into the market, or
        //enter a negative value to adjust the price away from the market. Generally, a positive value is more aggressive and
        //may prevent you from getting legged; whereas a negative value moves away from the market and submits an order that
        //may not get filled, but may result in a better spread price.

        //Example: You buy one ES Dec-Mar calendar spread at 6.00 and the quote leg fills at 2134.00. Payup Ticks are set to
        //"-2" for the hedge leg and the contract ticks in ".25" increments. Instead of entering a sell order in the hedge leg
        //for 2128.00 to achieve the spread price, Autospreader adjusts the price 2 ticks away from the market and enters an
        //order at 2128.50. Using this same example but with Payup Ticks set to positive "2", Autospreader adjusts the spread
        //price 2 ticks into the market and enters a hedge order at 2127.50.
        sint32 hedgeTick = 6;

        //minimum quantity required for quoting orders to lean against, need be used with lot size scale

        //If you want to lean only against the inside market and not lean on multiple levels of depth you can set the
        //qtyLeanDepth to 0 and the minQtyLean to 1.
        double minQtyLean = 7;

        //Example: If the quantity on the second leg of the spread is 10 and the trader assigns an qtyLeanDepth of 2,
        //Spreader determines the price level at which 20 contracts of cumulative market quantity exists on the second leg
        //and uses this to determine the price at which it quotes the first leg of the spread.
        uint32 qtyLeanDepth = 8;

        QUOTING_MODE quotingMode = 9;

        //number of outright leg orders placed at consecutive price levels away from the inside market in addition to the
        //single quoted order for each leg.
        //Note: Queue Holder is only available with two-legged spreads.
        uint32 queueHolderDepth = 10;

        //maximum number of ticks a leg price can move in a single price update before pulling the order
        //this defines an order move threshold in the quoting leg.
        //Setting these properties can help prevent legging risks in volatile markets.
        //minimum setting is 1
        uint32 maxQuotePriceMove = 11;

        //maximum number of ticks a leg price can move in a single price update before pulling the order from the market
        //this defines a price move threshold in the leaning (hedging) leg.
        //Setting these properties can help prevent legging risks in volatile markets.
        //minimum setting is 1
        uint32 maxHedgePriceMove = 12;

        //whether should send a hedge order when the quoted order is more than specified qty filled
        //This setting is intended to be used for spreads with quoting orders more than Decimal the quantity of the hedge order
        //Once the entire hedge order fills and there is a quoting order working in the market, the quoting order is now the
        //unhedged leg of the spread and will not reprice.
        //Example: You are quoting 11 contracts and hedging 1. With Hedge trigger is set at 6, a hedge order is sent when 6
        //of the 11 contracts fill. When not set (0), all 11 contracts need to fill before 1 lot hedge is sent.
        double hedgeTriggerFillQty = 13;

        //reduces excessive quoting away from the inside market.
        //legs only requote when they are a set number of ticks away from the inside market
        InsideQuote insideQuote = 14;

        EventRules rules = 15;

        //Lets you configure multiple levels of slop to determine when to reprice the quoted outright legs based upon
        //movement in the market
        repeated SpreadSlop slopLevel = 16;
    }

    //this must be unique for the owner account
    string name = 1;

    //owner's ID, who first create this
    string owner = 2;

    string description = 3;

    TYPE type = 4;

    string formula = 5;

    //Reload is an order that lets you execute a total spread order quantity by splitting the spread order into smaller
    //disclosed quantities.
    //When a disclosed spread order quantity is filled, the next disclosed quantity order is submitted until the entire spread
    //order quantity fills.
    //You can use the this property tick enter the market at the same price or a set number of ticks from the previously
    //disclosed spread order.
    //0 will submit the new spread order at the same price as the previous spread order.
    //1 will submit the spread order at a price 1 tick from the previous spread order away from the market.
    //-1 will submit the spread order 1 tick from the previous spread order toward the market.
    sint32 reloadOffset = 6;

    //Reload is an order that lets you execute a total spread order quantity by splitting the spread order into smaller
    //disclosed quantities.
    //When a disclosed spread order quantity is filled, the next disclosed quantity order is submitted until the entire
    //spread order quantity fills.
    //This property specifies the quantity for each child disclosed order.
    uint64 reloadQty = 7;

    double tickSize = 8;

    repeated Leg leg = 9;

    Meta metaInfo = 10;
}

message TickRange {
    double priceRange = 1;

    uint32 numTicks = 2;
}

message MarketDatas {
    repeated MarketData record = 1;
}

message MarketData {
    //unique sequence for this update within the current trading day
    uint32 updateNo = 1;

    //it will be the latest update time from the price bar, trade quote, bid/ask quotes
    uint64 updateTimeUTC = 2;

    //instrument ID
    InstrumentID instrumentID = 3;

    PriceBar priceBar = 4;

    //last trade message
    Quote tradeQuote = 5;

    //always sorted by the price from best to worst, (bid: highest -> lowest, ask: lowest -> highest)
    //bid market depth
    repeated Quote bidQuotes = 6;

    //always sorted by the price from best to worst, (bid: highest -> lowest, ask: lowest -> highest)
    //ask market depth
    repeated Quote askQuotes = 7;
}

message PriceBar {
    uint64 updateTimeUTC = 1;

    //need use with tick size scale
    double open = 2;

    //need use with tick size scale
    double high = 3;

    //need use with tick size scale
    double low = 4;

    //need use with tick size scale
    double close = 5;

    //need use with tick size scale
    double settlement = 6;

    //traded volume
    double volume = 7;

    double turnOver = 8;

    double openInterest = 9;

    ///涨停板价
    double upperLimitPrice = 10;

    ///跌停板价
    double lowerLimitPrice = 11;
}

message Quote {
    string entryID = 1;

    // Time of the quote (UTC). if it is empty, will use the MarketData updateTimeUTC
    uint64 quoteUTC = 2;

    //need use with tick size scale
    double price = 3;

    //traded volume, need use with lot size scale
    double volume = 4;

    //In an Aggregated Book, used to show how many individual orders make up this entry
    uint32 numberOfOrders = 5;
}

message PositionID {
    InstrumentID instrumentID = 1;

    Position.PERIOD period = 2;

    string account = 3;

    //normally contract will have LONG/SHORT positon
    Position.TYPE type = 4;
}

message Position {

    enum PERIOD {
        COMBINED = 0;

        TODAY = 1;
        HISTORY = 2;
    }

    enum TYPE {
        UNKNOWN = 0;

        ///净
        NET = 1;

        ///多头
        LONG = 2;

        ///空头
        SHORT = 3;
    }

    PositionID positionID = 1;

    uint64 updateTimeUTC = 2;

    uint32 tradingDate = 3;

    //今持仓
    double position = 4;

    //昨持仓
    double prevPosition = 5;

    //今持仓均价
    double positionAvgPrice = 6;

    //昨持仓均价
    double prevPositionAvgPrice = 7;

    uint32 prevTradingDate = 8;

    ///平仓盈亏
    double closeProfit = 9;

    //逐笔对冲平仓盈亏
    double closeProfitByTrade = 10;

    ///逐日盯市平仓盈亏
    double closeProfitByDate = 11;

    ///多头冻结
    double longFrozen = 12;

    ///空头冻结
    double shortFrozen = 13;

    ///多头开仓冻结金额
    double longFrozenAmount = 14;

    ///空头开仓冻结金额
    double shortFrozenAmount = 15;

    ///持仓成本
    double positionCost = 16;

    ///上次结算价
    double prevSettlementPrice = 17;

    ///本次结算价
    double settlementPrice = 18;

    ///开仓成本
    double openCost = 19;

    ///上次占用的保证金
    double prevMargin = 20;

    //占用的投资者保证金
    double margin = 21;

    ///交易所保证金
    double exchangeMargin = 22;

    ///保证金率
    double marginRateByMoney = 23;

    ///保证金率(按手数)
    double marginRateByVolume = 24;

    ///执行冻结
    double strikeFrozen = 25;

    ///执行冻结金额
    double strikeFrozenAmount = 26;

    ///放弃执行冻结
    double abandonFrozen = 27;

    ///执行冻结的昨仓
    double prevStrikeFrozen = 28;

    ///冻结的保证金
    double frozenMargin = 29;

    ///冻结的资金
    double frozenCash = 30;

    ///冻结的手续费
    double frozenCommission = 31;

    ///资金差额
    double cashIn = 32;

    ///手续费
    double commission = 33;

    ///持仓盈亏
    double positionProfit = 34;

    ///开仓量
    double openVolume = 35;

    ///平仓量
    double closeVolume = 36;

    ///开仓金额
    double openAmount = 37;

    ///平仓金额
    double closeAmount = 38;

    //orderID for this position record
    repeated uint64 tradeList = 39 [packed = true];

    CTPPosition ctpPosition = 40;
}

message CTPPosition {
    ///投机套保标志
    CTPOrder.HEDGE hedge = 1;

    ///结算编号
    int32 settlementID = 2;

    ///组合成交形成的持仓
    double combPosition = 3;

    ///组合多头冻结
    double combLongFrozen = 4;

    ///组合空头冻结
    double combShortFrozen = 5;

    ///今日持仓
    int32 todayPosition = 6;

    ///投资单元代码
    string investUnitID = 7;
}

//investor position report
message Positions {

    repeated Position record = 1;
}

message NoticeMessages {
    repeated NoticeMessage record = 1;
}

// Text message from server.
message NoticeMessage {
    // Type of the message.
    enum TYPE {
        // General information.
        INFO = 0;

        // Warning.
        WARNING = 1;

        // Critical error message.
        ERROR = 2;
    }

    BROKER broker = 1;

    Exchange.EXCHANGE exchange = 2;

    string noticeID = 3;

    uint64 sendTimeUTC = 4;

    string source = 5;

    string subject = 6;

    string abstract = 7;

    string contents = 8;

    string remark = 9;

    string webLink = 10;

    // This field is associated with MessageType enum type.
    TYPE type = 11;

    // Optional time when this message is expired, it should be hidden from user after this time yyyyMMdd.
    uint32 expireDate = 12;
}

message ServiceStatuses {
    repeated ServiceStatus record = 1;
}

message ServiceStatus {

    enum STATUS {
        NOT_INIT = 0;

        DISCONNECTING = 1;

        //network is broken
        DISCONNECTED = 2;

        CONNECTING = 4;

        CONNECTED = 5;

        //session is over
        CLOSING = 6;

        //session is over
        CLOSE = 7;

        AUTHETICATING = 8;

        //line is up and can take requests
        READY = 9;
    }

    Service service = 1;

    STATUS status = 2;

    string remark = 3;

    uint64 updateTimeUTC = 4;
}

message Service {
    enum SERVICE {
        UNKNOWN = 0;

        PRICE = 1;
        ORDER = 2;

        SPREADER = 3;
    }

    BROKER broker = 1;
    Exchange.EXCHANGE exchange = 2;
    SERVICE svc = 3;
}

message WatchLists {
    repeated WatchList record = 1;
}

message WatchList {
    string userID = 1;

    string title = 2;

    uint64 accessTimeUTC = 3;

    //this is the server side UTC. when sync, we only take the server side time. when upload change to server, it should be 0
    uint64 updateTimeUTC = 4;

    //empty list means delete this watch list
    repeated InstrumentID instrumentIDList = 5;

    //each instrument added time
    repeated uint64 addedTimeList = 6 [packed = true];
}


message CTPOrder {

    enum FORCE_CLOSE {
        ///非强平
        NOTFORCECLOSE = 0;

        ///资金不足
        LACKDEPOSIT = 1;

        ///客户超仓
        CLIENTOVERPOSITIONLIMIT = 2;

        ///会员超仓
        MEMBEROVERPOSITIONLIMIT = 3;

        ///持仓非整数倍
        NOTMULTIPLE = 4;

        ///违规
        VIOLATION = 5;

        ///其它
        OTHER = 6;

        ///自然人临近交割
        PERSONDELIV = 7;
    }

    enum ORDER_PRICE {
        PRICE_UNKNOWN = 0;

        ///任意价
        ANYPRICE = 1;

        ///限价
        LIMITPRICE = 2;

        ///最优价
        BESTPRICE = 3;

        ///最新价
        LASTPRICE = 4;

        ///最新价浮动上浮1个TICKS
        LASTPRICEPLUSONETICKS = 5;

        ///最新价浮动上浮2个TICKS
        LASTPRICEPLUSTWOTICKS = 6;

        ///最新价浮动上浮3个TICKS
        LASTPRICEPLUSTHREETICKS = 7;

        ///卖一价
        ASKPRICE1 = 8;

        ///卖一价浮动上浮1个TICKS
        ASKPRICE1PLUSONETICKS = 9;

        ///卖一价浮动上浮2个TICKS
        ASKPRICE1PLUSTWOTICKS = 10;

        ///卖一价浮动上浮3个TICKS
        ASKPRICE1PLUSTHREETICKS = 11;

        ///买一价
        BIDPRICE1 = 12;

        ///买一价浮动上浮1个TICKS
        BIDPRICE1PLUSONETICKS = 13;
        ///买一价浮动上浮2个TICKS
        BIDPRICE1PLUSTWOTICKS = 14;

        ///买一价浮动上浮3个TICKS
        BIDPRICE1PLUSTHREETICKS = 15;

        ///五档价
        FIVELEVELPRICE = 16;
    }

    enum TRIGGER_CONDITION {
        CC_UNKNOWN = 0;

        ///立即
        CC_IMMEDIATELY = 1;

        ///止损
        CC_TOUCH = 2;

        ///止赢
        CC_TOUCHPROFIT = 3;

        ///预埋单
        CC_PARKEDORDER = 4;

        ///最新价大于条件价
        CC_LASTPRICEGREATERTHANSTOPPRICE = 5;

        ///最新价大于等于条件价
        CC_LASTPRICEGREATEREQUALSTOPPRICE = 6;

        ///最新价小于条件价
        CC_LASTPRICELESSERTHANSTOPPRICE = 7;

        ///最新价小于等于条件价
        CC_LASTPRICELESSEREQUALSTOPPRICE = 8;

        ///卖一价大于条件价
        CC_ASKPRICEGREATERTHANSTOPPRICE = 9;

        ///卖一价大于等于条件价
        CC_ASKPRICEGREATEREQUALSTOPPRICE = 10;

        ///卖一价小于条件价
        CC_ASKPRICELESSERTHANSTOPPRICE = 11;

        ///卖一价小于等于条件价
        CC_ASKPRICELESSEREQUALSTOPPRICE = 12;

        ///买一价大于条件价
        CC_BIDPRICEGREATERTHANSTOPPRICE = 13;

        ///买一价大于等于条件价
        CC_BIDPRICEGREATEREQUALSTOPPRICE = 14;

        ///买一价小于条件价
        CC_BIDPRICELESSERTHANSTOPPRICE = 15;

        ///买一价小于等于条件价
        CC_BIDPRICELESSEREQUALSTOPPRICE = 16;
    }

    enum VOLUMN_CONDITION {

        VC_UNKNOWN = 0;

        ///任何数量
        VC_AV = 1;

        ///最小数量
        VC_MV = 2;

        ///全部数量
        VC_CV = 3;
    }

    enum TYPE {
        ///正常
        NORMAL = 0;

        ///报价衍生
        DERIVEFROMQUOTE = 1;

        ///组合衍生
        DERIVEFROMCOMBINATION = 2;

        ///组合报单
        COMBINATION = 3;

        ///条件单
        CONDITIONAL = 4;

        ///互换单
        SWAP = 5;
    }

    enum TIME_CONDITION {
        ///立即完成，否则撤销
        TC_UNKNOWN = 0;
        TC_IOC = 1;
        ///本节有效
        TC_GFS = 2;
        ///当日有效
        TC_GFD = 3;
        ///指定日期前有效
        TC_GTD = 4;
        ///撤销前有效
        TC_GTC = 5;
        ///集合竞价有效
        TC_GFA = 6;
    }

    enum HEDGE {
        HF_UNKNONWN = 0;

        ///投机
        HF_SPECULATION = 1;

        ///套利
        HF_ARBITRAGE = 2;

        ///套保
        HF_HEDGE = 3;

        ///做市商
        HF_MARKETMAKER = 5;
    }

    enum OFFSET {
        ///开仓
        OF_OPEN = 0;

        ///平仓
        OF_CLOSE = 1;

        ///强平
        OF_FORCECLOSE = 2;

        ///平今
        OF_CLOSETODAY = 3;

        ///平昨
        OF_CLOSEYESTERDAY = 4;

        ///强减
        OF_FORCEOFF = 5;

        ///本地强平
        OF_LOCALFORCECLOSE = 6;
    }

    ///报单价格条件
    ORDER_PRICE priceType = 1;

    ///组合开平标志
    OFFSET combOffsetFlag = 2;

    ///组合投机套保标志
    HEDGE combHedgeFlag = 3;

    ///成交量类型
    VOLUMN_CONDITION volumeCondition = 4;

    ///最小成交量
    uint32 minVolume = 5;

    ///触发条件
    TRIGGER_CONDITION contingentCondition = 6;

    ///强平原因
    FORCE_CLOSE forceCloseReason = 7;

    ///自动挂起标志
    bool isAutoSuspend = 8;

    ///报单类型
    TYPE orderType = 9;

    TIME_CONDITION timeCondition = 10;

    ///用户强评标志
    bool isUserForceClose = 11;

    ///互换单标志
    bool isSwapOrder = 12;
}

message CTPOrderReport {

    enum PHASE {
        INSERTSUBMITTED = 0;

        ///撤单已经提交
        CANCELSUBMITTED = 1;

        ///修改已经提交
        MODIFYSUBMITTED = 2;

        ///已经接受
        ACCEPTED = 3;

        ///报单已经被拒绝
        INSERTREJECTED = 4;

        ///撤单已经被拒绝
        CANCELREJECTED = 5;

        ///改单已经被拒绝
        MODIFYREJECTED = 6;
    }

    enum STATUS {

        ///全部成交
        ALLTRADED = 0;

        ///部分成交还在队列中
        PARTTRADEDQUEUEING = 1;

        ///部分成交不在队列中
        PARTTRADEDNOTQUEUEING = 2;

        ///未成交还在队列中
        NOTRADEQUEUEING = 3;

        ///未成交不在队列中
        NOTRADENOTQUEUEING = 4;

        ///撤单
        CANCELED = 5;

        ///未知
        UNKNOWN = 10;

        ///尚未触发
        NOTTOUCHED = 11;

        ///已触发
        TOUCHED = 12;
    }

    enum SOURCE {
        ///来自参与者
        PARTICIPANT = 0;

        ///来自管理员
        ADMINISTRATOR = 1;
    }

    enum USER {
        ///投资者
        UT_INVESTOR = 0;
        ///操作员
        UT_OPERATOR = 1;
        ///管理员
        UT_SUPERUSER = 2;
    }


    enum PARK_STATUS {
        PAOS_UNKNOWN = 0;
        ///未发送
        PAOS_NOTSEND = 1;
        ///已发送
        PAOS_SEND = 2;
        ///已删除
        PAOS_DELETED = 3;
    }

    message OrderID {
        ///前置编号
        int32 frontID = 1;

        ///会话编号
        int32 sessionID = 2;

        ///报单引用
        int32 orderRef = 3;
    }

    OrderID orderID = 1;

    string investor = 2;

    string userID = 3;

    ///操作用户代码
    string activeUserID = 4;

    string traderID = 5;

    ///最后修改交易所交易员代码
    string activeTraderID = 6;

    ///资金账号
    string accountID = 7;

    USER userType = 8;

    ///报单提交状态
    PHASE orderSubmitStatus = 9;

    ///报单状态
    STATUS orderStatus = 10;

    ///报单来源
    SOURCE orderSource = 11;

    string parkedOrderID = 12;

    PARK_STATUS parkStatus = 13;

    ///结算会员编号
    string clearingPartID = 14;

    ///会员代码
    string participantID = 15;

    ///本地报单编号
    string orderLocalID = 16;

    string actionLocalID = 17;

    ///请求编号
    int32 requestID = 18;

    ///报单提示序号
    int32 notifySequence = 19;

    ///序号
    int32 sequenceNo = 20;

    ///经纪公司报单编号
    int32 brokerOrderSeq = 21;

    ///郑商所成交数量
    int32 ZCETotalTradedVolume = 22;

    ///今成交数量
    int32 volumeTraded = 23;

    ///剩余数量
    int32 volumeTotal = 24;

    ///投资单元代码
    string investUnitID = 25;

    ///IP地址
    string IPAddress = 26;

    ///Mac地址
    string macAddress = 27;

    ///营业部编号
    string branchID = 28;

    ///业务单元
    string businessUnit = 29;

    ///客户代码
    string clientID = 30;

    ///安装编号
    int32 installID = 31;

    ///交易日
    uint32 tradingDay = 32;

    ///报单日期
    uint32 insertDate = 33;

    ///插入时间
    string insertTime = 34;

    ///激活时间
    string activeTime = 35;

    ///挂起时间
    string suspendTime = 36;

    ///最后修改时间
    string updateTime = 37;

    ///撤销时间
    string cancelTime = 38;

    ///用户端产品信息
    string userProductInfo = 39;

    ///相关报单
    string relativeOrderSysID = 40;

    ///结算编号
    int32 settlementID = 41;
}

message Ledgers {
    repeated Ledger record = 1;
}

message Ledger {
    enum BUSINESS {
        UNKNOWN = 0;

        FUTURE = 1;
        STOCK = 2;
    }

    TradingAccount tradingAccount = 1;

    ///上次质押金额
    double prevMortgage = 2;

    ///上次信用额度
    double prevCredit = 3;

    ///上次存款额
    double prevDeposit = 4;

    ///上次结算准备金
    double prevBalance = 5;

    ///上次占用的保证金
    double prevMargin = 6;

    ///利息基数
    double interestBase = 7;

    ///利息收入
    double interest = 8;

    ///入金金额
    double deposit = 9;

    ///出金金额
    double withdraw = 10;

    ///冻结的保证金
    double frozenMargin = 11;

    ///冻结的资金
    double frozenCash = 12;

    ///冻结的手续费
    double frozenCommission = 13;

    ///当前保证金总额
    double margin = 14;

    ///资金差额
    double cashIn = 15;

    ///手续费
    double commission = 16;

    ///平仓盈亏
    double closeProfit = 17;

    ///持仓盈亏
    double positionProfit = 18;

    ///期货结算准备金
    double balance = 19;

    ///可用资金
    double available = 20;

    ///可取资金
    double withdrawQuota = 21;

    ///基本准备金
    double reserve = 22;

    ///交易日
    uint32 tradingDay = 23;

    ///结算编号
    int32 settlementID = 24;

    ///信用额度
    double credit = 25;

    ///质押金额
    double mortgage = 26;

    ///交易所保证金
    double exchangeMargin = 27;

    ///投资者交割保证金
    double deliveryMargin = 28;

    ///交易所交割保证金
    double exchangeDeliveryMargin = 29;

    ///保底期货结算准备金
    double reserveBalance = 30;

    ///币种代码
    string currency = 31;

    ///上次货币质入金额
    double prevFundMortgageIn = 32;

    ///上次货币质出金额
    double prevFundMortgageOut = 33;

    ///货币质入金额
    double fundMortgageIn = 34;

    ///货币质出金额
    double fundMortgageOut = 35;

    ///货币质押余额
    double fundMortgageAvailable = 36;

    ///可质押货币金额
    double mortgageableFund = 37;

    ///特殊产品占用保证金
    double specProductMargin = 38;

    ///特殊产品冻结保证金
    double specProductFrozenMargin = 39;

    ///特殊产品手续费
    double specProductCommission = 40;

    ///特殊产品冻结手续费
    double specProductFrozenCommission = 41;

    ///特殊产品持仓盈亏
    double specProductPositionProfit = 42;

    ///特殊产品平仓盈亏
    double specProductCloseProfit = 43;

    ///根据持仓盈亏算法计算的特殊产品持仓盈亏
    double specProductPositionProfitByAlg = 44;

    ///特殊产品交易所保证金
    double specProductExchangeMargin = 45;

    ///业务类型
    BUSINESS bizType = 46;

    ///延时换汇冻结金额
    double frozenSwap = 47;

    ///剩余换汇额度
    double remainSwap = 48;

    uint64 updateTimeUTC = 49;
}


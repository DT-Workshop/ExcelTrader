// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gateway.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Xceder.Messages {

  /// <summary>Holder for reflection information generated from gateway.proto</summary>
  public static partial class GatewayReflection {

    #region Descriptor
    /// <summary>File descriptor for gateway.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GatewayReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1nYXRld2F5LnByb3RvEhNjb20ueGNlZGVyLm1lc3NhZ2VzGhlnb29nbGUv",
            "cHJvdG9idWYvYW55LnByb3RvIqQFCgdSZXF1ZXN0EhEKCXJlcXVlc3RJRBgB",
            "IAEoBBISCgpyZXF1ZXN0VVRDGAIgASgEEikKCWV4dGVuc2lvbhgDIAEoCzIU",
            "Lmdvb2dsZS5wcm90b2J1Zi5BbnlIABIpCgRwaW5nGAQgASgLMhkuY29tLnhj",
            "ZWRlci5tZXNzYWdlcy5QaW5nSAASKwoFbG9nb24YBSABKAsyGi5jb20ueGNl",
            "ZGVyLm1lc3NhZ2VzLkxvZ29uSAASEAoGbG9nb2ZmGAYgASgJSAASPQoOcGFz",
            "c3dvcmRDaGFuZ2UYByABKAsyIy5jb20ueGNlZGVyLm1lc3NhZ2VzLlBhc3N3",
            "b3JkQ2hhbmdlSAASLwoHYWNjb3VudBgIIAEoCzIcLmNvbS54Y2VkZXIubWVz",
            "c2FnZXMuQWNjb3VudEgAEjIKDHF1ZXJ5UmVxdWVzdBgJIAEoCzIaLmNvbS54",
            "Y2VkZXIubWVzc2FnZXMuUXVlcnlIABJBCgptYXJrZXREYXRhGAogASgLMisu",
            "Y29tLnhjZWRlci5tZXNzYWdlcy5JbnN0cnVtZW50U3Vic2NyaXB0aW9uSAAS",
            "QgoLaW5zdHJ1bWVudHMYCyABKAsyKy5jb20ueGNlZGVyLm1lc3NhZ2VzLklu",
            "c3RydW1lbnRTdWJzY3JpcHRpb25IABJHChBpbnN0cnVtZW50U3RhdHVzGAwg",
            "ASgLMisuY29tLnhjZWRlci5tZXNzYWdlcy5JbnN0cnVtZW50U3Vic2NyaXB0",
            "aW9uSAASKwoFb3JkZXIYDSABKAsyGi5jb20ueGNlZGVyLm1lc3NhZ2VzLk9y",
            "ZGVySAASMQoIc3ByZWFkZXIYDiABKAsyHS5jb20ueGNlZGVyLm1lc3NhZ2Vz",
            "LlNwcmVhZGVySABCCQoHcmVxdWVzdCKJBQoIUmVzcG9uc2USKwoGcmVzdWx0",
            "GAEgASgLMhsuY29tLnhjZWRlci5tZXNzYWdlcy5SZXN1bHQSKQoJZXh0ZW5z",
            "aW9uGAIgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueUgAEjcKC3F1ZXJ5UmVz",
            "dWx0GAMgASgLMiAuY29tLnhjZWRlci5tZXNzYWdlcy5RdWVyeVJlc3VsdEgA",
            "EjcKC21hcmtldERhdGFzGAQgASgLMiAuY29tLnhjZWRlci5tZXNzYWdlcy5N",
            "YXJrZXREYXRhc0gAEikKBHBpbmcYBSABKAsyGS5jb20ueGNlZGVyLm1lc3Nh",
            "Z2VzLlBpbmdIABI3Cgtsb2dvblJlc3VsdBgGIAEoCzIgLmNvbS54Y2VkZXIu",
            "bWVzc2FnZXMuTG9nb25SZXN1bHRIABI1CgZub3RpY2UYByABKAsyIy5jb20u",
            "eGNlZGVyLm1lc3NhZ2VzLk5vdGljZU1lc3NhZ2VzSAASPQoNc2VydmljZVN0",
            "YXR1cxgIIAEoCzIkLmNvbS54Y2VkZXIubWVzc2FnZXMuU2VydmljZVN0YXR1",
            "c2VzSAASNwoLaW5zdHJ1bWVudHMYCSABKAsyIC5jb20ueGNlZGVyLm1lc3Nh",
            "Z2VzLkluc3RydW1lbnRzSAASQwoQaW5zdHJ1bWVudFN0YXR1cxgKIAEoCzIn",
            "LmNvbS54Y2VkZXIubWVzc2FnZXMuSW5zdHJ1bWVudFN0YXR1c2VzSAASFAoK",
            "c3ByZWFkZXJJRBgLIAEoBEgAEjkKDG9yZGVyUmVwb3J0cxgMIAEoCzIhLmNv",
            "bS54Y2VkZXIubWVzc2FnZXMuT3JkZXJSZXBvcnRzSABCCgoIcmVzcG9uc2Ui",
            "+wYKCEV4Y2hhbmdlEjQKBGNvZGUYASABKA4yJi5jb20ueGNlZGVyLm1lc3Nh",
            "Z2VzLkV4Y2hhbmdlLkVYQ0hBTkdFEgwKBG5hbWUYAiABKAkSEAoIdGltZXpv",
            "bmUYAyABKBEimAYKCEVYQ0hBTkdFEgwKCE5PTl9FWENIEAASBwoDT1RDEAES",
            "CAoEQ0NGWBACEggKBFNHRVgQAxIICgRYQ0ZFEAQSCAoEWERDRRAFEggKBFhT",
            "R0UQBhIICgRYSU5FEAcSCAoEWFNIRRAIEggKBFhTRUMQCRIICgRYU0hHEAoS",
            "CAoEWFNTQxALEggKBFhaQ0UQDBIICgRTTUVYEA0SCAoEWFNFUxAOEggKBFhT",
            "Q0UQDxIICgRYU0lNEBASCAoEWENNRRAREggKBENCVFMQEhIICgRDRUNTEBMS",
            "CAoEQ01FUxAUEggKBEZDTUUQFRIICgRHTEJYEBYSCAoEWElNTRAXEggKBFhJ",
            "T00QGBIICgRYQ1VSEBkSCAoESUNBUBAaEggKBEJURUUQGxIICgRCVk1GEBwS",
            "CAoEWENCTxAdEggKBFhDQkYQHhIICgRYQ0JUEB8SCAoEWExNRRAgEggKBFhM",
            "T04QIhIICgRYTE9EECMSCAoEWEpQWBAkEggKBFhPU0UQJRIICgRYT1NKECYS",
            "CAoEWFRLUxAnEggKBFhURkYQKBIICgRYVEtUECkSCAoEWEFTWBAqEggKBFhT",
            "RkUQKxIICgRYRVVSECwSCAoERUNYRRAtEggKBElFUEEQLhIICgRCVGVjEDAS",
            "CwoHSUNFX0lQRRAxEg4KCk5ZU0VfTGlmZmUQMhIOCgpFcmlzX0dvdkV4EDMS",
            "CgoGZVNwZWVkEDQSCQoFRXVyZXgQNRIHCgNDTUUQNhIICgRNRUZGEDcSDAoI",
            "TW9udHJlYWwQOBIGCgJNWBA5EhEKDU5BU0RBUV9PTVhfRVUQOhIJCgVlQ0JP",
            "VBA7EgcKA0VCUxA8EgcKA09TRRA9EggKBENCT1QQPhIHCgNTR1gQPxIHCgNM",
            "TUUQQBIHCgNTRkUQQRIHCgNMU0UQQhIJCgVUT0NPTRBDEgcKA1RGWBBEEgcK",
            "A0NGRRBFEhEKDU5ZU0VfTGlmZmVfVVMQRhIJCgVUVFNJTRBHEgcKA05GWBBI",
            "EggKBEhLRXgQSRIICgRHTUVYEEoSBwoDRklYEEsSBwoDVFNFEEwixQEKC0Rl",
            "dmljZVRva2VuEjoKBHR5cGUYASABKA4yLC5jb20ueGNlZGVyLm1lc3NhZ2Vz",
            "LkRldmljZVRva2VuLkRFVklDRV9UWVBFEg0KBXRva2VuGAIgASgJEhUKDXVw",
            "ZGF0ZVRpbWVVVEMYAyABKAQiVAoLREVWSUNFX1RZUEUSEQoNVU5LTk9XX0RF",
            "VklDRRAAEgoKBklQSE9ORRABEggKBElQQUQQAhILCgdBTkRST0lEEAMSBgoC",
            "UEMQBBIHCgNNQUMQBSKZBgoHQWNjb3VudBInCglleHRlbnNpb24YASABKAsy",
            "FC5nb29nbGUucHJvdG9idWYuQW55EhEKCWFjY291bnRJRBgCIAEoDRIOCgZ1",
            "c2VySUQYAyABKAkSEAoIcGFzc3dvcmQYBCABKAkSMwoKcGFydGljdWxhchgF",
            "IAEoCzIfLmNvbS54Y2VkZXIubWVzc2FnZXMuUGFydGljdWxhchIvCgRyb2xl",
            "GAYgASgOMiEuY29tLnhjZWRlci5tZXNzYWdlcy5BY2NvdW50LlJPTEUSEAoI",
            "c2VydmljZXMYByABKA0SEQoJdXBkYXRlVVRDGAggASgEEjMKBnN0YXR1cxgJ",
            "IAEoDjIjLmNvbS54Y2VkZXIubWVzc2FnZXMuQWNjb3VudC5TVEFUVVMSNQoL",
            "bG9naW5SZWNvcmQYCiABKAsyIC5jb20ueGNlZGVyLm1lc3NhZ2VzLkxvZ2lu",
            "UmVjb3JkEjkKD3ByZXZMb2dpblJlY29yZBgLIAEoCzIgLmNvbS54Y2VkZXIu",
            "bWVzc2FnZXMuTG9naW5SZWNvcmQSHQoVdHJhZGluZ1J1bGVVcGRhdGVUaW1l",
            "GAwgASgEEkIKEWFsbG93ZWRDb25uZWN0aW9uGA0gASgOMicuY29tLnhjZWRl",
            "ci5tZXNzYWdlcy5BY2NvdW50LkNPTk5FQ1RJT04SOgoJbG9naW5Nb2RlGA4g",
            "ASgOMicuY29tLnhjZWRlci5tZXNzYWdlcy5BY2NvdW50LkxPR0lOX01PREUi",
            "LgoKTE9HSU5fTU9ERRIMCghQQVNTV09SRBAAEgkKBU9BVEgyEAESBwoDT1RQ",
            "EAIiSQoEUk9MRRIOCgpBTk9OWU1PVVNFEAASCgoGQ0xJRU5UEAESBgoCVFIQ",
            "AhIJCgVBRE1JThADEggKBERFTU8QBBIICgRBUFBTEAUiLwoKQ09OTkVDVElP",
            "ThIOCgpTSU1VTEFUSU9OEAASCAoETElWRRABEgcKA0FMTBACIjMKBlNUQVRV",
            "UxIOCgpVTlZFUklGSUVEEAASDAoIVkVSSUZJRUQQARILCgdTVVNQRU5EEAIi",
            "8wIKClBhcnRpY3VsYXISEQoJZmlyc3ROYW1lGAEgASgJEg8KB3N1ck5hbWUY",
            "AiABKAkSDQoFZW1haWwYAyABKAkSDQoFcGhvbmUYBCABKAkSDwoHY291bnRy",
            "eRgFIAEoCRIQCghsYW5ndWFnZRgGIAEoCRIWCg50aW1lem9uZU9mZnNldBgH",
            "IAEoERI2CgZnZW5kZXIYCCABKA4yJi5jb20ueGNlZGVyLm1lc3NhZ2VzLlBh",
            "cnRpY3VsYXIuR0VOREVSEhEKCXNpZ25VcFVUQxgJIAEoBBIYChBlbWFpbFZl",
            "cmlmaWVkVVRDGAogASgEEhgKEHBob25lVmVyaWZpZWRVVEMYCyABKAQSPAoS",
            "bW9iaWxlRGV2aWNlVG9rZW5zGAwgAygLMiAuY29tLnhjZWRlci5tZXNzYWdl",
            "cy5EZXZpY2VUb2tlbiIrCgZHRU5ERVISCwoHVU5LTk9XThAAEggKBE1BTEUQ",
            "ARIKCgZGRU1BTEUQAiL/AQoLTG9naW5SZWNvcmQSDgoGYXV0aEJ5GAEgASgJ",
            "EhAKCGxvZ2luVVRDGAIgASgEEhEKCWxvZ2luRnJvbRgDIAEoCRITCgtsb2dp",
            "bkRldmljZRgEIAEoCRIwCgtsb2dpblJlc3VsdBgFIAEoCzIbLmNvbS54Y2Vk",
            "ZXIubWVzc2FnZXMuUmVzdWx0EhEKCWxvZ291dFVUQxgGIAEoBBIUCgxsb2dv",
            "dXRSZW1hcmsYByABKAkSFQoNcHJldkZhaWxDb3VudBgIIAEoDRILCgNPVFAY",
            "CSABKA0SEQoJY2xpZW50QXBwGAogASgJEhQKDHB1c2hpbmdEZWxheRgLIAEo",
            "DSLpAQoGUmVzdWx0Eg8KB3JlcXVlc3QYASABKAQSEAoIc2VydmVySUQYAiAB",
            "KA0SMgoKcmVzdWx0Q29kZRgDIAEoDjIeLmNvbS54Y2VkZXIubWVzc2FnZXMu",
            "RVJST1JDT0RFEg4KBnJlbWFyaxgEIAEoCRIVCg1yZXF1ZXN0UmN2VVRDGAUg",
            "ASgEEhcKD3N0YXJ0UHJvY2Vzc1VUQxgGIAEoBBIYChBmaW5pc2hQcm9jZXNz",
            "VVRDGAcgASgEEhUKDXJlcXVlc3RGcm9tSVAYCCABKAkSFwoPcmVxdWVzdEZy",
            "b21Qb3J0GAkgASgNIugBCgdTZXJ2aWNlEisKBmJyb2tlchgBIAEoDjIbLmNv",
            "bS54Y2VkZXIubWVzc2FnZXMuQlJPS0VSEjEKA3N2YxgCIAEoDjIkLmNvbS54",
            "Y2VkZXIubWVzc2FnZXMuU2VydmljZS5TRVJWSUNFEjgKCGV4Y2hhbmdlGAMg",
            "ASgOMiYuY29tLnhjZWRlci5tZXNzYWdlcy5FeGNoYW5nZS5FWENIQU5HRSJD",
            "CgdTRVJWSUNFEgoKBlNWQ0FMTBAAEgkKBVBSSUNFEAESCQoFT1JERVIQAhIM",
            "CghTUFJFQURFUhADEggKBEFMR08QBCLkAQoNU2VydmljZVN0YXR1cxIQCghz",
            "ZXJ2ZXJJRBgBIAEoDRItCgdzZXJ2aWNlGAIgASgLMhwuY29tLnhjZWRlci5t",
            "ZXNzYWdlcy5TZXJ2aWNlEjkKBnN0YXR1cxgDIAEoDjIpLmNvbS54Y2VkZXIu",
            "bWVzc2FnZXMuU2VydmljZVN0YXR1cy5TVEFUVVMiVwoGU1RBVFVTEgsKB1VO",
            "S05PV04QABIOCgpDT05ORUNUSU5HEAESCQoFUkVBRFkQAhIKCgZCUk9LRU4Q",
            "AxIOCgpESVNDT05ORUNUEAQSCQoFQ0xPU0UQBSJFCg9TZXJ2aWNlU3RhdHVz",
            "ZXMSMgoGc3RhdHVzGAEgAygLMiIuY29tLnhjZWRlci5tZXNzYWdlcy5TZXJ2",
            "aWNlU3RhdHVzIl8KBUxvZ29uEg4KBnVzZXJJRBgBIAEoCRIQCghwYXNzd29y",
            "ZBgCIAEoCRILCgNPVFAYAyABKA0SEQoJY2xpZW50QXBwGAQgASgJEhQKDHB1",
            "c2hpbmdEZWxheRgFIAEoDSJRCgtMb2dvblJlc3VsdBItCgdhY2NvdW50GAEg",
            "ASgLMhwuY29tLnhjZWRlci5tZXNzYWdlcy5BY2NvdW50EhMKC3JlZGlyZWN0",
            "VVJMGAIgASgJIk0KDlBhc3N3b3JkQ2hhbmdlEhcKD2N1cnJlbnRQYXNzd29y",
            "ZBgBIAEoCRITCgtuZXdQYXNzd29yZBgCIAEoCRINCgVlbWFpbBgDIAEoCSJE",
            "Cg5Ob3RpY2VNZXNzYWdlcxIyCgZub3RpY2UYASADKAsyIi5jb20ueGNlZGVy",
            "Lm1lc3NhZ2VzLk5vdGljZU1lc3NhZ2UitgEKDU5vdGljZU1lc3NhZ2USNQoE",
            "dHlwZRgBIAEoDjInLmNvbS54Y2VkZXIubWVzc2FnZXMuTm90aWNlTWVzc2Fn",
            "ZS5UWVBFEg4KBnNvdXJjZRgCIAEoCRIPCgdzdWJqZWN0GAMgASgJEgwKBHRl",
            "eHQYBCABKAkSFQoNZXhwaXJhdGlvblVUQxgFIAEoBCIoCgRUWVBFEggKBElO",
            "Rk8QABILCgdXQVJOSU5HEAESCQoFRVJST1IQAiIoCgRQaW5nEg8KB3BpbmdV",
            "VEMYASABKAQSDwoHcG9uZ1VUQxgCIAEoBCKYAwoFUXVlcnkSKQoJZXh0ZW5z",
            "aW9uGAEgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueUgAEjUKBW9yZGVyGAIg",
            "ASgLMiQuY29tLnhjZWRlci5tZXNzYWdlcy5RdWVyeUNvbmRpdGlvbnNIABIz",
            "CgNsb2cYAyABKAsyJC5jb20ueGNlZGVyLm1lc3NhZ2VzLlF1ZXJ5Q29uZGl0",
            "aW9uc0gAEjsKC2luc3RydW1lbnRzGAQgASgLMiQuY29tLnhjZWRlci5tZXNz",
            "YWdlcy5RdWVyeUNvbmRpdGlvbnNIABIcChJhY2NvdW50VHJhZGluZ1J1bGUY",
            "BSABKA1IABIgChZzdXBwb3J0QnJva2VyRXhjaGFuZ2VzGAYgASgISAASOAoI",
            "Y2FsZW5kYXIYByABKAsyJC5jb20ueGNlZGVyLm1lc3NhZ2VzLlF1ZXJ5Q29u",
            "ZGl0aW9uc0gAEjgKCHNwcmVhZGVyGAggASgLMiQuY29tLnhjZWRlci5tZXNz",
            "YWdlcy5RdWVyeUNvbmRpdGlvbnNIAEIHCgVxdWVyeSLlAwoLUXVlcnlSZXN1",
            "bHQSKQoJZXh0ZW5zaW9uGAEgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueUgA",
            "EjoKDW9yZGVyc1JlcG9ydHMYAiABKAsyIS5jb20ueGNlZGVyLm1lc3NhZ2Vz",
            "Lk9yZGVyUmVwb3J0c0gAEjAKBGxvZ3MYAyABKAsyIC5jb20ueGNlZGVyLm1l",
            "c3NhZ2VzLlJlcXVlc3RMb2dzSAASRgoSYWNjb3VudFRyYWRpbmdSdWxlGAQg",
            "ASgLMiguY29tLnhjZWRlci5tZXNzYWdlcy5BY2NvdW50VHJhZGluZ1J1bGVz",
            "SAASQgoSc3VwcG9ydGVkRXhjaGFuZ2VzGAUgASgLMiQuY29tLnhjZWRlci5t",
            "ZXNzYWdlcy5Ccm9rZXJFeGNoYW5nZXNIABI5CghjYWxlbmRhchgGIAEoCzIl",
            "LmNvbS54Y2VkZXIubWVzc2FnZXMuRXhjaGFuZ2VDYWxlbmRhckgAEjcKC2lu",
            "c3RydW1lbnRzGAcgASgLMiAuY29tLnhjZWRlci5tZXNzYWdlcy5JbnN0cnVt",
            "ZW50c0gAEjMKCXNwcmVhZGVycxgIIAEoCzIeLmNvbS54Y2VkZXIubWVzc2Fn",
            "ZXMuU3ByZWFkZXJzSABCCAoGcmVzdWx0IskBChBFeGNoYW5nZUNhbGVuZGFy",
            "EjgKCGV4Y2hhbmdlGAEgASgOMiYuY29tLnhjZWRlci5tZXNzYWdlcy5FeGNo",
            "YW5nZS5FWENIQU5HRRI+Cgdob2xpZGF5GAIgAygLMi0uY29tLnhjZWRlci5t",
            "ZXNzYWdlcy5FeGNoYW5nZUNhbGVuZGFyLkhvbGlkYXkaOwoHSG9saWRheRIQ",
            "CghlcG9jaERheRgBIAEoDRIPCgdob2xpZGF5GAIgASgJEg0KBWhvdXJzGAMg",
            "ASgNIngKD0Jyb2tlckV4Y2hhbmdlcxIrCgZicm9rZXIYASADKA4yGy5jb20u",
            "eGNlZGVyLm1lc3NhZ2VzLkJST0tFUhI4CghleGNoYW5nZRgCIAMoDjImLmNv",
            "bS54Y2VkZXIubWVzc2FnZXMuRXhjaGFuZ2UuRVhDSEFOR0UiiQIKD1F1ZXJ5",
            "Q29uZGl0aW9ucxIPCgdmcm9tVVRDGAEgASgEEg0KBXRvVVRDGAIgASgEEisK",
            "BmJyb2tlchgDIAEoDjIbLmNvbS54Y2VkZXIubWVzc2FnZXMuQlJPS0VSEjgK",
            "CGV4Y2hhbmdlGAQgASgOMiYuY29tLnhjZWRlci5tZXNzYWdlcy5FeGNoYW5n",
            "ZS5FWENIQU5HRRIOCgZzeW1ib2wYBSABKAkSOAoHcHJvZHVjdBgGIAEoDjIn",
            "LmNvbS54Y2VkZXIubWVzc2FnZXMuSW5zdHJ1bWVudC5QUk9EVUNUEhQKDGlu",
            "c3RydW1lbnRJRBgHIAEoBBIPCgdhY2NvdW50GAggASgNIkUKDE9yZGVyUmVw",
            "b3J0cxI1CgtvcmRlclJlcG9ydBgBIAMoCzIgLmNvbS54Y2VkZXIubWVzc2Fn",
            "ZXMuT3JkZXJSZXBvcnQibgoLT3JkZXJSZXBvcnQSKQoFb3JkZXIYASABKAsy",
            "Gi5jb20ueGNlZGVyLm1lc3NhZ2VzLk9yZGVyEjQKBnJlcG9ydBgCIAMoCzIk",
            "LmNvbS54Y2VkZXIubWVzc2FnZXMuRXhlY3V0aW9uUmVwb3J0IjwKC1JlcXVl",
            "c3RMb2dzEi0KBGxvZ3MYASADKAsyHy5jb20ueGNlZGVyLm1lc3NhZ2VzLlJl",
            "cXVlc3RMb2ciaAoKUmVxdWVzdExvZxItCgdyZXF1ZXN0GAEgASgLMhwuY29t",
            "LnhjZWRlci5tZXNzYWdlcy5SZXF1ZXN0EisKBnJlc3VsdBgCIAEoCzIbLmNv",
            "bS54Y2VkZXIubWVzc2FnZXMuUmVzdWx0IrIECgVPcmRlchIPCgdhY2NvdW50",
            "GAEgASgNEg8KB2VudGVyQnkYAiABKA0SEQoJc3VibWl0VVRDGAMgASgEEgsK",
            "A3RhZxgEIAEoCRILCgNsZWcYBSABKA0SOAoJaW5kaWNhdG9yGAYgASgOMiUu",
            "Y29tLnhjZWRlci5tZXNzYWdlcy5PcmRlci5TVUJNSVRNT0RFEjIKBnBhcmFt",
            "cxgHIAEoCzIgLmNvbS54Y2VkZXIubWVzc2FnZXMuT3JkZXJQYXJhbXNIABI2",
            "Cghjb21wb3VuZBgIIAEoCzIiLmNvbS54Y2VkZXIubWVzc2FnZXMuQ29tcG91",
            "bmRPcmRlckgAIioKBFRZUEUSBwoDTE1UEAASBwoDU1RQEAESBwoDU1RMEAIS",
            "BwoDTUtUEAMiQwoLVElNRUlORk9SQ0USBwoDREFZEAASBwoDR1RDEAESBwoD",
            "T1BHEAISBwoDSU9DEAMSBwoDRk9LEAQSBwoDR0lTEAgiWAoPRVhFQ0lOU1RS",
            "VUNUSU9OEgcKA0FPThAAEgsKB0lDRUJFUkcQARIGCgJRVBACEgkKBVRSQUlM",
            "EAMSCgoGRlVOQVJJEAQSBwoDTUlUEAUSBwoDTUxNEAYiNgoLVFJBSUxJTkdQ",
            "RUcSCwoHQkVTVEJJRBAAEgsKB0JFU1RBU0sQARINCglMQVNUVFJBREUQAiIn",
            "CgpTVUJNSVRNT0RFEg0KCUFVVE9NQVRFRBAAEgoKBk1BTlVBTBABQggKBmRl",
            "dGFpbCL0BAoLT3JkZXJQYXJhbXMSEwoLb3JpZ0NsT3JkSUQYASABKAQSEgoK",
            "aW5zdHJ1bWVudBgCIAEoBBInCgRzaWRlGAMgASgOMhkuY29tLnhjZWRlci5t",
            "ZXNzYWdlcy5TSURFEjIKCW9yZGVyVHlwZRgEIAEoDjIfLmNvbS54Y2VkZXIu",
            "bWVzc2FnZXMuT3JkZXIuVFlQRRJDCg9leGVjSW5zdHJ1Y3Rpb24YBSADKA4y",
            "Ki5jb20ueGNlZGVyLm1lc3NhZ2VzLk9yZGVyLkVYRUNJTlNUUlVDVElPThI7",
            "Cgt0aW1lSW5Gb3JjZRgGIAEoDjImLmNvbS54Y2VkZXIubWVzc2FnZXMuT3Jk",
            "ZXIuVElNRUlORk9SQ0USEAoIb3JkZXJRdHkYByABKA0SEgoKbGltaXRQcmlj",
            "ZRgIIAEoARIRCglzdG9wUHJpY2UYCSABKAESEgoKdmlzaWJsZVF0eRgKIAEo",
            "DRIVCg1taW5WaXNpYmxlUXR5GAsgASgNEhMKC2dvb2RUaHJ1VVRDGAwgASgE",
            "EhsKE3JlZ3VsYXRvcnlBbGdvcml0aG0YDSABKA0SEwoLdHJhaWxPZmZzZXQY",
            "DiABKA0SOwoLdHJhaWxpbmdQZWcYDyABKA4yJi5jb20ueGNlZGVyLm1lc3Nh",
            "Z2VzLk9yZGVyLlRSQUlMSU5HUEVHEhIKCnRyaWdnZXJRdHkYECABKA0SFQoN",
            "YWN0aXZhdGlvblVUQxgRIAEoBBIVCg1zdXNwZW5zaW9uVVRDGBIgASgEEhAK",
            "CGN1cnJlbmN5GBMgASgJEg0KBWNsb3NlGBQgASgIEhIKCmFnZ3Jlc3NpdmUY",
            "FSABKAgiywEKDUNvbXBvdW5kT3JkZXISNQoEdHlwZRgBIAEoDjInLmNvbS54",
            "Y2VkZXIubWVzc2FnZXMuQ29tcG91bmRPcmRlci5UWVBFEhIKCmNvbXBvdW5k",
            "SUQYAiABKAkSDgoGcmVtYXJrGAMgASgJEhQKDGNvbXBsZXRlRmlsbBgEIAEo",
            "CBIvCgVvcmRlchgFIAMoCzIgLmNvbS54Y2VkZXIubWVzc2FnZXMuT3JkZXJQ",
            "YXJhbXMiGAoEVFlQRRIHCgNPUE8QABIHCgNPQ08QASI7CglTcHJlYWRlcnMS",
            "LgoHc3BlYWRlchgBIAMoCzIdLmNvbS54Y2VkZXIubWVzc2FnZXMuU3ByZWFk",
            "ZXIi3Q4KCFNwcmVhZGVyEgoKAmlkGAEgASgEEhEKCW93bmVyQWNjdBgCIAEo",
            "DRIMCgRuYW1lGAMgASgJEg4KBnJlbWFyaxgEIAEoCRIwCgR0eXBlGAUgASgO",
            "MiIuY29tLnhjZWRlci5tZXNzYWdlcy5TcHJlYWRlci5UWVBFEg8KB2Zvcm11",
            "bGEYBiABKAkSFAoMcmVsb2FkT2Zmc2V0GAcgASgNEhEKCXJlbG9hZFF0eRgI",
            "IAEoDRIQCgh0aWNrU2l6ZRgJIAEoARIuCgNsZWcYCiADKAsyIS5jb20ueGNl",
            "ZGVyLm1lc3NhZ2VzLlNwcmVhZGVyLkxlZxIVCg11cGRhdGVUaW1lVVRDGAsg",
            "ASgEGkQKClNwcmVhZFNsb3ASDQoFcmFuZ2UYASABKAESEgoKaW5zaWRlU2xv",
            "cBgCIAEoARITCgtvdXRzaWRlU2xvcBgDIAEoARo4CgtJbnNpZGVRdW90ZRIS",
            "CgppbnNpZGVUaWNrGAEgASgNEhUKDWRpc3RhbmNlTGltaXQYAiABKA0aSQoK",
            "RXZlbnRSdWxlcxISCgpwcmVRdW90aW5nGAEgASgJEhIKCnByZUhlZGdpbmcY",
            "AiABKAkSEwoLcG9zdEhlZGdpbmcYAyABKAka9QcKA0xlZxISCgppbnN0cnVt",
            "ZW50GAEgASgEEjQKBHR5cGUYAiABKA4yJi5jb20ueGNlZGVyLm1lc3NhZ2Vz",
            "LlNwcmVhZGVyLkxlZy5UWVBFEhIKCmlzU2hvcnRMZWcYAyABKAgSEAoIcXR5",
            "UmF0aW8YBCABKAESEwoLcHJpY2VXZWlnaHQYBSABKAESEQoJaGVkZ2VUaWNr",
            "GAYgASgREhIKCm1pblF0eUxlYW4YByABKA0SFAoMcXR5TGVhbkRlcHRoGAgg",
            "ASgNEj8KC3F1b3RpbmdNb2RlGAkgASgOMiouY29tLnhjZWRlci5tZXNzYWdl",
            "cy5TcHJlYWRlci5RVU9USU5HX01PREUSGAoQcXVldWVIb2xkZXJEZXB0aBgK",
            "IAEoDRIZChFtYXhRdW90ZVByaWNlTW92ZRgLIAEoDRIZChFtYXhIZWRnZVBy",
            "aWNlTW92ZRgMIAEoDRI3CgVydWxlcxgNIAEoCzIoLmNvbS54Y2VkZXIubWVz",
            "c2FnZXMuU3ByZWFkZXIuRXZlbnRSdWxlcxI7CglzbG9wTGV2ZWwYDiADKAsy",
            "KC5jb20ueGNlZGVyLm1lc3NhZ2VzLlNwcmVhZGVyLlNwcmVhZFNsb3ASPgoL",
            "aW5zaWRlUXVvdGUYDyABKAsyKS5jb20ueGNlZGVyLm1lc3NhZ2VzLlNwcmVh",
            "ZGVyLkluc2lkZVF1b3RlEhsKE2hlZGdlVHJpZ2dlckZpbGxRdHkYECABKA0S",
            "RAoJYXR0cmlidXRlGBEgASgLMjEuY29tLnhjZWRlci5tZXNzYWdlcy5TcHJl",
            "YWRlci5MZWcuRXh0cmFBdHRyaWJ1dGVzGuMCCg9FeHRyYUF0dHJpYnV0ZXMS",
            "FwoPZmlyc3RDb3Vwb25EYXRlGAEgASgEEhEKCWlzc3VlRGF0ZRgCIAEoBBIY",
            "ChBjb252ZXJzaW9uRmFjdG9yGAMgASgBEhIKCnVzZTM2NURheXMYBCABKAgS",
            "EgoKY291cG9uUmF0ZRgFIAEoARI8Cgpjb3Vwb25GcmVxGAYgASgOMiguY29t",
            "LnhjZWRlci5tZXNzYWdlcy5TcHJlYWRlci5DT1VQT05GUkVREhgKEGVuZE9m",
            "TW9udGhDb3Vwb24YByABKAgSFAoMbWF0dXJpdHlEYXRlGAggASgEEgwKBFBW",
            "MDEYCSABKAESFgoOc2V0dGxlbWVudERhdGUYCiABKAQSEQoJc3RyaXBCYXNl",
            "GAsgASgBEjsKCXlpZWxkVHlwZRgMIAEoDjIoLmNvbS54Y2VkZXIubWVzc2Fn",
            "ZXMuU3ByZWFkZXIuWUlFTERfVFlQRSIcCgRUWVBFEgkKBVFVT1RFEAASCQoF",
            "SEVER0UQASJLCgxRVU9USU5HX01PREUSDAoIQUxMX05PTkUQABIVChFBTExf",
            "Tk9ORV9SRVNVQk1JVBABEhYKEkRZTkFNSUNfSU5TSURFTEVBThACIkYKCkNP",
            "VVBPTkZSRVESCgoGQU5OVUFMEAASCwoHTU9OVEhMWRABEg0KCVFVQVJURVJM",
            "WRACEhAKDFNFTUlBTk5VQUxMWRADIlYKDERBWUNPVU5UVFlQRRIKCgZBQ1RV",
            "QUwQABIICgREMzY1EAESCAoERDM2MBACEgsKB0QzNjVfMzAQAxILCgdEMzYw",
            "XzMwEAQSDAoIRDM2NV8zMEUQBSJZCgpZSUVMRF9UWVBFEgkKBVRZUEUxEAAS",
            "CQoFVFlQRTIQARIJCgVUWVBFMxACEgkKBVRZUEU0EAMSCQoFVFlQRTUQBBIJ",
            "CgVUWVBFNhAFEgkKBVRZUEU3EAYiRAoEVFlQRRILCgdJTVBMSUVEEAASDQoJ",
            "TkVUQ0hBTkdFEAESCQoFUkFUSU8QAhIJCgVZSUVMRBADEgoKBkNVU1RPTRAE",
            "InIKB09yZGVySUQSDwoHY2xPcmRJRBgBIAEoBBIUCgxjaGFpbkNsT3JkSUQY",
            "AiABKAQSEwoLb3JpZ0NsT3JkSUQYAyABKAQSFgoOdHJhZGluZ0FjY291bnQY",
            "BCABKAkSEwoLZXhlY09yZGVySUQYBSABKAkiqQgKD0V4ZWN1dGlvblJlcG9y",
            "dBIOCgZleGVjSUQYASABKAkSLQoHb3JkZXJJRBgCIAEoCzIcLmNvbS54Y2Vk",
            "ZXIubWVzc2FnZXMuT3JkZXJJRBI9CghleGVjVHlwZRgDIAEoDjIrLmNvbS54",
            "Y2VkZXIubWVzc2FnZXMuRXhlY3V0aW9uUmVwb3J0LlNUQVRVUxI+CglvcmRT",
            "dGF0dXMYBCABKA4yKy5jb20ueGNlZGVyLm1lc3NhZ2VzLkV4ZWN1dGlvblJl",
            "cG9ydC5TVEFUVVMSQwoKcmVqZWN0Q29kZRgFIAEoDjIvLmNvbS54Y2VkZXIu",
            "bWVzc2FnZXMuRXhlY3V0aW9uUmVwb3J0LlJFSkVDVENPREUSFwoPdHJhbnNh",
            "Y3RUaW1lVVRDGAYgASgEEhUKDXJlcG9ydFRpbWVVVEMYByABKAQSDwoHZmls",
            "bFF0eRgIIAEoDRIRCglmaWxsUHJpY2UYCSABKAESFAoMdG90YWxGaWxsUXR5",
            "GAogASgNEhQKDGF2Z0ZpbGxQcmljZRgLIAEoARIUCgxyZW1haW5pbmdRdHkY",
            "DCABKA0SDgoGcmVtYXJrGA0gASgJEhgKEGZpbGxDb3VudGVyUGFydHkYDiAB",
            "KAkSFAoMc291cmNlU2VydmVyGA8gASgNIsgBCgZTVEFUVVMSCwoHVU5LTk9X",
            "ThAAEg8KC1BFTkRJTkdfTkVXEAESEgoOUEVORElOR19DQU5DRUwQAhITCg9Q",
            "RU5ESU5HX1JFUExBQ0UQAxIHCgNORVcQBBIMCghSRVBMQUNFRBAFEhAKDFBB",
            "UlRJQUxfRklMTBAGEgwKCFJFU1RBVEVEEAcSDQoJU1VTUEVOREVEEAgSCAoE",
            "RklMTBAJEgwKCENBTkNFTEVEEAoSDAoIUkVKRUNURUQQCxILCgdFWFBJUkVE",
            "EAwi8QIKClJFSkVDVENPREUSBgoCTkEQABIRCg1CUk9LRVJfT1BUSU9OEAES",
            "GAoUVU5LTk9XTl9PUkRFUl9TWU1CT0wQAhITCg9FWENIQU5HRV9DTE9TRUQQ",
            "AxIRCg1FWENFRURTX0xJTUlUEAQSDAoIVE9PX0xBVEUQBRIRCg1VTktOT1dO",
            "X09SREVSEAYSDQoJRFVQTElDQVRFEAcSGgoWRFVQTElDQVRFX0NPTU1VTklD",
            "QVRFRBAIEgkKBVNUQUxFEAkSGAoUVFJBREVfQUxPTkdfUkVRVUlSRUQQChIU",
            "ChBJTlZBTElEX0lOVkVTVE9SEAsSDwoLVU5TVVBQT1JURUQQDBIQCgxTVVJW",
            "RUlMTEVOQ0UQDRIMCghRVUFOVElUWRAOEhYKEkFMTE9DQVRFRF9RVUFOVElU",
            "WRAPEhkKFVVOS05PV05fT1JERVJfQUNDT1VOVBAQEhsKF0lOVkFMSURfUFJJ",
            "Q0VfSU5DUkVNRU5UEBMingEKFkluc3RydW1lbnRTdWJzY3JpcHRpb24SFgoK",
            "aW5zdHJ1bWVudBgBIAMoBEICEAESQgoGYWN0aW9uGAIgASgOMjIuY29tLnhj",
            "ZWRlci5tZXNzYWdlcy5JbnN0cnVtZW50U3Vic2NyaXB0aW9uLkFDVElPTiIo",
            "CgZBQ1RJT04SDQoJU1VCU0NSSUJFEAASDwoLVU5TVUJTQ1JJQkUQASJCCgtN",
            "YXJrZXREYXRhcxIzCgptYXJrZXREYXRhGAEgAygLMh8uY29tLnhjZWRlci5t",
            "ZXNzYWdlcy5NYXJrZXREYXRhInoKCFByaWNlQmFyEhIKCnVwZGF0ZVRpbWUY",
            "ASABKAQSDAoEb3BlbhgCIAEoARIMCgRoaWdoGAMgASgBEgsKA2xvdxgEIAEo",
            "ARINCgVjbG9zZRgFIAEoARIOCgZ2b2x1bWUYBiABKAQSEgoKc2V0dGxlbWVu",
            "dBgHIAEoASKrAgoKTWFya2V0RGF0YRISCgppbnN0cnVtZW50GAEgASgEEhUK",
            "DXVwZGF0ZVRpbWVVVEMYAiABKAQSLwoIcHJpY2VCYXIYAyABKAsyHS5jb20u",
            "eGNlZGVyLm1lc3NhZ2VzLlByaWNlQmFyEjMKDHByZXZQcmljZUJhchgEIAEo",
            "CzIdLmNvbS54Y2VkZXIubWVzc2FnZXMuUHJpY2VCYXISLgoKdHJhZGVRdW90",
            "ZRgFIAEoCzIaLmNvbS54Y2VkZXIubWVzc2FnZXMuUXVvdGUSLQoJYmlkUXVv",
            "dGVzGAYgAygLMhouY29tLnhjZWRlci5tZXNzYWdlcy5RdW90ZRItCglhc2tR",
            "dW90ZXMYByADKAsyGi5jb20ueGNlZGVyLm1lc3NhZ2VzLlF1b3RlInkKBVF1",
            "b3RlEg8KB2VudHJ5SUQYASABKAkSEAoIcXVvdGVVVEMYAiABKAQSDQoFcHJp",
            "Y2UYAyABKAESDgoGdm9sdW1lGAQgASgEEhYKDnRyYWRlQ29uZGl0aW9uGAUg",
            "ASgJEhYKDm51bWJlck9mT3JkZXJzGAYgASgNIjEKCVRpY2tSYW5nZRISCgpw",
            "cmljZVJhbmdlGAEgASgBEhAKCG51bVRpY2tzGAIgASgNIr8FChVJbnN0cnVt",
            "ZW50VHJhZGluZ1J1bGUSFgoOdm9sdW1lTXVsdGlwbGUYASABKA0SHAoUbWF4",
            "TWFya2V0T3JkZXJWb2x1bWUYAiABKA0SHAoUbWluTWFya2V0T3JkZXJWb2x1",
            "bWUYAyABKA0SGwoTbWF4TGltaXRPcmRlclZvbHVtZRgEIAEoDRIbChNtaW5M",
            "aW1pdE9yZGVyVm9sdW1lGAUgASgNEk4KDHBvc2l0aW9uVHlwZRgGIAEoDjI4",
            "LmNvbS54Y2VkZXIubWVzc2FnZXMuSW5zdHJ1bWVudFRyYWRpbmdSdWxlLlBP",
            "U0lUSU9OX1RZUEUSGwoTaW5jbHVkZVBhc3RQb3NpdGlvbhgHIAEoCBJQCg1j",
            "bG9zZURlYWxUeXBlGAggASgOMjkuY29tLnhjZWRlci5tZXNzYWdlcy5JbnN0",
            "cnVtZW50VHJhZGluZ1J1bGUuQ0xPU0VERUFMX1RZUEUSUwoQbW9ydGdhZ2VV",
            "c2VSYW5nZRgJIAEoDjI5LmNvbS54Y2VkZXIubWVzc2FnZXMuSW5zdHJ1bWVu",
            "dFRyYWRpbmdSdWxlLk1PUlRHQUdFX1VTQUdFEg8KB2xvdFNpemUYCiABKA0S",
            "EAoIdGlja1NpemUYCyABKAESEQoJdGlja1ZhbHVlGAwgASgBEjEKCXRpY2tS",
            "YW5nZRgNIAMoCzIeLmNvbS54Y2VkZXIubWVzc2FnZXMuVGlja1JhbmdlIjAK",
            "DkNMT1NFREVBTF9UWVBFEg8KC05PUk1BTF9ERUFMEAASDQoJU1BFQ0ZJUlNU",
            "EAEiOAoNUE9TSVRJT05fVFlQRRIHCgNORVQQABIJCgVHUk9TUxABEggKBExP",
            "TkcQAhIJCgVTSE9SVBADIi8KDk1PUlRHQUdFX1VTQUdFEggKBE5PTkUQABIK",
            "CgZNQVJHSU4QARIHCgNBTEwQAiK+AgoQRW5lcmd5QXR0cmlidXRlcxIUCgxk",
            "ZWxpdmVyeVVuaXQYASABKA0SDgoGYmxvY2tzGAIgASgNEhQKDGRlbGl2ZXJ5",
            "RGF5cxgDIAEoDRJJCgxjb250cmFjdFRlcm0YBCABKA4yMy5jb20ueGNlZGVy",
            "Lm1lc3NhZ2VzLkVuZXJneUF0dHJpYnV0ZXMuQ09OVFJBQ1RfVEVSTSKiAQoN",
            "Q09OVFJBQ1RfVEVSTRILCgdNT05USExZEAASCQoFREFJTFkQARIHCgNEQVkQ",
            "AhIMCghORVhUX0RBWRADEggKBFdFRUsQBBIKCgZXRUVLTFkQBRIJCgVNT05U",
            "SBAGEg0KCVFVQVJURVJMWRAHEgwKCFNFQVNPTkFMEAgSCgoGWUVBUkxZEAkS",
            "DAoIVkFSSUFCTEUQChIKCgZDVVNUT00QCyKfAQoRT3B0aW9uc0F0dHJpYnV0",
            "ZXMSQQoEdHlwZRgBIAEoDjIzLmNvbS54Y2VkZXIubWVzc2FnZXMuT3B0aW9u",
            "c0F0dHJpYnV0ZXMuT1BUSU9OU19UWVBFEhMKC3N0cmlrZVByaWNlGAIgASgB",
            "Eg8KB3ZlcnNpb24YAyABKA0iIQoMT1BUSU9OU19UWVBFEgcKA1BVVBAAEggK",
            "BENBTEwQASJkCg1NYXJnaW5Gb3JtdWxhEhcKD2xvbmdNYXJnaW5SYXRpbxgB",
            "IAEoARIYChBzaG9ydE1hcmdpblJhdGlvGAIgASgBEiAKGGlzTWF4TWFyZ2lu",
            "U2lkZUFsZ29yaXRobRgDIAEoCCJCCgtJbnN0cnVtZW50cxIzCgppbnN0cnVt",
            "ZW50GAEgAygLMh8uY29tLnhjZWRlci5tZXNzYWdlcy5JbnN0cnVtZW50IksK",
            "Ekluc3RydW1lbnRTdGF0dXNlcxI1CgZzdGF0dXMYASADKAsyJS5jb20ueGNl",
            "ZGVyLm1lc3NhZ2VzLkluc3RydW1lbnRTdGF0dXMirwEKEEluc3RydW1lbnRT",
            "dGF0dXMSPAoKaW5zdHJ1bWVudBgBIAEoCzIoLmNvbS54Y2VkZXIubWVzc2Fn",
            "ZXMuSW5zdHJ1bWVudC5JZGVudGl0eRI2CgZzdGF0dXMYAiABKA4yJi5jb20u",
            "eGNlZGVyLm1lc3NhZ2VzLkluc3RydW1lbnQuU1RBVFVTEg4KBnJlbWFyaxgD",
            "IAEoCRIVCg11cGRhdGVUaW1lVVRDGAQgASgEIscVCgpJbnN0cnVtZW50EjoK",
            "CGlkZW50aXR5GAEgASgLMiguY29tLnhjZWRlci5tZXNzYWdlcy5JbnN0cnVt",
            "ZW50LklkZW50aXR5EjgKB3Byb2R1Y3QYAiABKA4yJy5jb20ueGNlZGVyLm1l",
            "c3NhZ2VzLkluc3RydW1lbnQuUFJPRFVDVBIPCgdDRklDb2RlGAMgASgJEhMK",
            "C2Rlc2NyaXB0aW9uGAQgASgJEhAKCGN1cnJlbmN5GAUgASgJEhYKDmNyZWF0",
            "ZUVwb2NoRGF5GAYgASgNEhkKEW1hdHVyaXR5RXBvY2hEYXlzGAcgASgNEhQK",
            "DGxpc3RFcG9jaERheRgIIAEoDRIeChZzdGFydERlbGl2ZXJ5RXBvY2hEYXlz",
            "GAkgASgNEhwKFGVuZERlbGl2ZXJ5RXBvY2hEYXlzGAogASgNEj0KEW1hcmdp",
            "bkNhbGN1bGF0aW9uGAsgASgLMiIuY29tLnhjZWRlci5tZXNzYWdlcy5NYXJn",
            "aW5Gb3JtdWxhEhYKDmNvbnRyYWN0U3ltYm9sGAwgASgJEj8KC3RyYWRpbmdS",
            "dWxlGA0gASgLMiouY29tLnhjZWRlci5tZXNzYWdlcy5JbnN0cnVtZW50VHJh",
            "ZGluZ1J1bGUSQwoKdW5kZXJseWluZxgOIAMoCzIvLmNvbS54Y2VkZXIubWVz",
            "c2FnZXMuSW5zdHJ1bWVudC5VbmRlcmx5aW5nRW50cnkSQAoQb3B0aW9uQXR0",
            "cmlidXRlcxgPIAEoCzImLmNvbS54Y2VkZXIubWVzc2FnZXMuT3B0aW9uc0F0",
            "dHJpYnV0ZXMSPwoQZW5lcmd5QXR0cmlidXRlcxgQIAEoCzIlLmNvbS54Y2Vk",
            "ZXIubWVzc2FnZXMuRW5lcmd5QXR0cmlidXRlcxIVCg11cGRhdGVUaW1lVVRD",
            "GBEgASgEEhUKDWlzTm9uVHJhZGFibGUYEiABKAga3QEKCElkZW50aXR5EgoK",
            "AmlkGAEgASgEEjgKCGV4Y2hhbmdlGAIgASgOMiYuY29tLnhjZWRlci5tZXNz",
            "YWdlcy5FeGNoYW5nZS5FWENIQU5HRRIrCgZicm9rZXIYAyABKA4yGy5jb20u",
            "eGNlZGVyLm1lc3NhZ2VzLkJST0tFUhIOCgZzeW1ib2wYBCABKAkSEgoKc2Vj",
            "dXJpdHlJRBgFIAEoCRI6CghpZFNvdXJjZRgGIAEoDjIoLmNvbS54Y2VkZXIu",
            "bWVzc2FnZXMuSW5zdHJ1bWVudC5JRFNPVVJDRRqIAQoDTGVnEjwKCmluc3Ry",
            "dW1lbnQYASABKAsyKC5jb20ueGNlZGVyLm1lc3NhZ2VzLkluc3RydW1lbnQu",
            "SWRlbnRpdHkSJwoEc2lkZRgCIAEoDjIZLmNvbS54Y2VkZXIubWVzc2FnZXMu",
            "U0lERRINCgVwcmljZRgDIAEoARILCgNxdHkYBCABKA0aVgoPVW5kZXJseWlu",
            "Z0VudHJ5EgsKA2tleRgBIAEoCRIyCgV2YWx1ZRgCIAEoCzIjLmNvbS54Y2Vk",
            "ZXIubWVzc2FnZXMuSW5zdHJ1bWVudC5MZWc6AjgBIpkFCgZTVEFUVVMSEQoN",
            "VU5LTk9XX1NUQVRVUxAAEhEKDU9QRU5JTkdfREVMQVkQARIQCgxUUkFESU5H",
            "X0hBTFQQAhIKCgZSRVNVTUUQAxIVChFOT19PUEVOX05PX1JFU1VNRRAEEhQK",
            "EFBSSUNFX0lORElDQVRJT04QBRIcChhUUkFESU5HX1JBTkdFX0lORElDQVRJ",
            "T04QBhIYChRNQVJLRVRfSU1CQUxBTkNFX0JVWRAHEhkKFU1BUktFVF9JTUJB",
            "TEFOQ0VfU0VMTBAIEiEKHU1BUktFVF9PTl9DTE9TRV9JTUJBTEFOQ0VfQlVZ",
            "EAkSIgoeTUFSS0VUX09OX0NMT1NFX0lNQkFMQU5DRV9TRUxMEAoSFwoTTk9f",
            "TUFSS0VUX0lNQkFMQU5DRRALEiAKHE5PX01BUktFVF9PTl9DTE9TRV9JTUJB",
            "TEFOQ0UQDBITCg9JVFNfUFJFX09QRU5JTkcQDRIYChRORVdfUFJJQ0VfSU5E",
            "SUNBVElPThAOEhwKGFRSQURFX0RJU1NFTUlOQVRJT05fVElNRRAPEiMKH1JF",
            "QURZX1RPX1RSQURFX1NUQVJUX09GX1NFU1NJT04QEBIsCihOT1RfQVZBSUxB",
            "QkxFX0ZPUl9UUkFESU5HX0VORF9PRl9TRVNTSU9OEBESDAoIUFJFX09QRU4Q",
            "EhIUChBPUEVOSU5HX1JPVEFUSU9OEBMSDwoLRkFTVF9NQVJLRVQQFBILCgdB",
            "VUNUSU9OEBUSDgoKUE9TVF9UUkFERRAWEg0KCVBSRV9UUkFERRAXEhEKDU5P",
            "X1BFUk1JU1NJT04QGBIdChlOT1RfVFJBREVEX09OX1RISVNfTUFSS0VUEDIS",
            "FgoSVU5LTk9XTl9PUl9JTlZBTElEEDMiwQMKB1BST0RVQ1QSEAoMVU5LTk9X",
            "Tl9UWVBFEAASCwoHRVVTVVBSQRABEgcKA0ZBQxACEggKBEZBRE4QAxIHCgNQ",
            "RUYQBBIJCgVTVVBSQRAFEgcKA0ZVVBAGEgcKA09QVBAHEgcKA05SRxAIEggK",
            "BENPUlAQChIHCgNDUFAQCxIGCgJDQhAMEggKBERVQUwQDRIKCgZFVUNPUlAQ",
            "DhIKCgZYTElOS0QQDxIKCgZTVFJVQ1QQEBIICgRZQU5LEBESBwoDRk9SEBIS",
            "BgoCQ1MQExIGCgJQUxAUEgcKA1dBUhAVEgkKBUJSQURZEB4SCQoFRVVTT1YQ",
            "HxIJCgVUQk9ORBAgEggKBFRJTlQQIRIICgRUSVBTECISCAoEVENBTBAjEggK",
            "BFRQUk4QJBIHCgNVU1QQJRIICgRVU1RCECYSCQoFVE5PVEUQJxIJCgVUQklM",
            "TBAoEggKBEdPVlQQKRIHCgNJRFgQKhIICgRSRVBPEDISCwoHRk9SV0FSRBAz",
            "EgsKB0JVWVNFTEwQNBILCgdTRUNMT0FOEDUSDQoJU0VDUExFREdFEDYSBgoC",
            "TUYQNxIICgRNTEVHEDgSCQoFRlhOREYQOSLSAwoISURTT1VSQ0USCwoHVU5L",
            "Tk9XThAAEgoKBlNPVVJDRRABEgkKBUNVU0lQEAISCQoFU0VET0wQAxIICgRR",
            "VUlLEAQSDwoLSVNJTl9OVU1CRVIQBRIMCghSSUNfQ09ERRAGEhUKEUlTT19D",
            "VVJSRU5DWV9DT0RFEAcSFAoQSVNPX0NPVU5UUllfQ09ERRAIEhMKD0VYQ0hB",
            "TkdFX1NZTUJPTBAJEiEKHUNPTlNPTElEQVRFRF9UQVBFX0FTU09DSUFUSU9O",
            "EAoSFAoQQkxPT01CRVJHX1NZTUJPTBALEg4KCldFUlRQQVBJRVIQDBIJCgVE",
            "VVRDSBANEgsKB1ZBTE9SRU4QDhILCgdTSUNPVkFNEA8SCwoHQkVMR0lBThAQ",
            "EgoKBkNPTU1PThAREigKJENMRUFSSU5HX0hPVVNFX0NMRUFSSU5HX09SR0FO",
            "SVpBVElPThASEiMKH0lTREFfRlBNTF9QUk9EVUNUX1NQRUNJRklDQVRJT04Q",
            "ExIlCiFPUFRJT05TX1BSSUNFX1JFUE9SVElOR19BVVRIT1JJVFkQFBIZChVJ",
            "U0RBX0ZQTUxfUFJPRFVDVF9VUkwQFRIUChBMRVRURVJfT0ZfQ1JFRElUEBYi",
            "hwIKE0FjY291bnRUcmFkaW5nUnVsZXMSDwoHYWNjb3VudBgBIAEoDRJECg9h",
            "bGxvd2VkUHJvZHVjdHMYAiADKA4yJy5jb20ueGNlZGVyLm1lc3NhZ2VzLklu",
            "c3RydW1lbnQuUFJPRFVDVEICEAESHgoSYWxsb3dlZEluc3RydW1lbnRzGAMg",
            "AygEQgIQARJDCg5iYW5uZWRQcm9kdWN0cxgEIAMoDjInLmNvbS54Y2VkZXIu",
            "bWVzc2FnZXMuSW5zdHJ1bWVudC5QUk9EVUNUQgIQARIdChFiYW5uZWRJbnN0",
            "cnVtZW50cxgFIAMoBEICEAESFQoNdXBkYXRlVGltZVVUQxgGIAEoBCoyCgdJ",
            "RF9UWVBFEg4KCklOU1RSVU1FTlQQABIMCghTUFJFQURFUhABEgkKBU9SREVS",
            "EAIqowsKCUVSUk9SQ09ERRIOCgpQUk9DRVNTSU5HEAASCwoHU1VDQ0VTUxAB",
            "EgsKB0ZBSUxVUkUQZBIbChdSRVFVRVNUX0xJTUlUX1ZJT0xBVElPThBlEhcK",
            "E05PX09ORVRJTUVfUEFTU1dPUkQQZhIVChFOT19UUkFESU5HQUNDT1VOVBBn",
            "Eg8KC09UUF9FWFBJUkVEEGgSEQoNT1RQX05PVF9GT1VORBBpEhEKDU5FVFdP",
            "UktfRVJST1IQahINCglDQU5DRUxMRUQQaxITCg9DT05ORUNUSU9OX0RPV04Q",
            "bBIcChhDT05ORUNUSU9OX05PVF9DT05GSUdVUkUQbRIZChVPVVRTSURFX0FM",
            "TE9XRURfUkFOR0UQbhITCg9VTktOT1dOX1JFUVVFU1QQbxIUChBQQVNTV09S",
            "RF9FWFBJUkVEEHASDgoKUkVESVJFQ1RFRBBxEhEKDUFDQ0VTU19ERU5JRUQQ",
            "chIQCgxESVNDT05ORUNURUQQcxISCg5XUk9OR19QQVNTV09SRBB0EhUKEUFD",
            "Q09VTlRfU1VTUEVOREVEEHUSDQoJS0lDS0VET1VUEHYSEQoNVElNRU9VVE9G",
            "U1lOQxB3EhIKDkRVUExJQ0FURV9VU0VSEHgSDgoJTk9UX0xPR0lOEIIBEhAK",
            "C05PVF9TVVBQT1JUEIMBEg4KCU5PVF9GT1VORBCEARIUCg9OT1RfRk9VTkRf",
            "T1JERVIQhQESEwoOSU5WQUxJRF9QQVJBTVMQjAESGQoUSU5WQUxJRF9JTlNU",
            "UlVNRU5USUQQjQESFAoPSU5WQUxJRF9DTE9SRElEEI4BEhMKDklOVkFMSURf",
            "VVNFUklEEI8BEhMKDklOVkFMSURfQlJPS0VSEJABEhIKDUlOVkFMSURfRU1B",
            "SUwQkQESHQoYSU5WQUxJRF9PUkRFUl9TVUJNSVRVU0VSEJIBEhYKEUlOVkFM",
            "SURfT1JERVJfUVRZEJMBEhgKE0lOVkFMSURfTElNSVRfUFJJQ0UQlAESFwoS",
            "SU5WQUxJRF9TVE9QX1BSSUNFEJUBEhcKEklOVkFMSURfT1JERVJfVFlQRRCW",
            "ARIeChlJTlZBTElEX09SREVSX1NVQk1JVF9USU1FEJcBEh4KGUlOVkFMSURf",
            "T1JERVJfVElNRUlORk9SQ0UQmAESGQoUSU5WQUxJRF9DSEFJTkNMT1JESUQQ",
            "mQESEwoOSU5WQUxJRF9TWU1CT0wQmgESEQoMSU5WQUxJRF9TSURFEJsBEhcK",
            "EklOU1RSVU1FTlRfRVhQSVJFRBCcARIcChdJTlNUUlVNRU5UX05PVF9UUkFE",
            "QUJMRRCdARIfChpJTlNUUlVNRU5UX05PX1BSSUNFX0FDQ0VTUxCeARIWChFP",
            "UkRFUl9UQUdfVE9PTE9ORxCgARIaChVPUkRFUl9OT1RfUkVQTEFDRUFCTEUQ",
            "oQESHAoXU1BSRUFERVJfRFVQTElDQVRFX05BTUUQqwESGAoTU1BSRUFERVJf",
            "Tk9fUVVPVElORxCsARIVChBTUFJFQURFUl9OT19MRUdTEK0BEiIKHVNQUkVB",
            "REVSX05PX0lOU1RSVU1FTlRfQUNDRVNTEK4BEh0KGFNQUkVBREVSX0RVUExJ",
            "Q0FURV9PUkRFUhCvARIYChNTUFJFQURFUl9JTlZBTElEX0lEELABEiQKH1NQ",
            "UkVBREVSX0lOVkFMSURfTEVHX0lOU1RSVU1FTlQQsQESHwoaU1BSRUFERVJf",
            "SU5WQUxJRF9MRUdfUkFUSU8QsgESJQogU1BSRUFERVJfSU5WQUxJRF9MRUdf",
            "UFJJQ0VXRUlHSFQQswESHwoaU1BSRUFERVJfSU5WQUxJRF9MRUdfUlVMRVMQ",
            "tAESGQoUU1BSRUFERVJfTEVHX0ZBSUxVUkUQtQESFgoRQUxHT19BQ1RJVkVf",
            "T1JERVIQvgEqXAoGQlJPS0VSEgoKBlhDRURFUhAAEgoKBlNRVUFSRRABEgcK",
            "A0tHSRACEgsKB1BISUxMSVAQAxIKCgZPUklFTlQQBBIHCgNVT0IQBRIHCgND",
            "UUcQBhIGCgJUVBAHKiYKBFNJREUSCwoHTk9fU0lERRAAEgcKA0JVWRABEggK",
            "BFNFTEwQAipCCgtPVFBfUFVSUE9TRRINCglSRVNFVF9QV0QQABIRCg1FTUFJ",
            "TF9DT05GSVJNEAESEQoNUEhPTkVfQ09ORklSTRACKmcKCURBWU9GV0VFSxIK",
            "CgZTVU5EQVkQABIKCgZNT05EQVkQARILCgdUVUVTREFZEAISDQoJV0VETkVT",
            "REFZEAMSDAoIVEhVUlNEQVkQBBIKCgZGUklEQVkQBRIMCghTQVRVUkRBWRAG",
            "QgJIAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Com.Xceder.Messages.ID_TYPE), typeof(global::Com.Xceder.Messages.ERRORCODE), typeof(global::Com.Xceder.Messages.BROKER), typeof(global::Com.Xceder.Messages.SIDE), typeof(global::Com.Xceder.Messages.OTP_PURPOSE), typeof(global::Com.Xceder.Messages.DAYOFWEEK), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.Request), global::Com.Xceder.Messages.Request.Parser, new[]{ "RequestID", "RequestUTC", "Extension", "Ping", "Logon", "Logoff", "PasswordChange", "Account", "QueryRequest", "MarketData", "Instruments", "InstrumentStatus", "Order", "Spreader" }, new[]{ "Request" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.Response), global::Com.Xceder.Messages.Response.Parser, new[]{ "Result", "Extension", "QueryResult", "MarketDatas", "Ping", "LogonResult", "Notice", "ServiceStatus", "Instruments", "InstrumentStatus", "SpreaderID", "OrderReports" }, new[]{ "Response" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.Exchange), global::Com.Xceder.Messages.Exchange.Parser, new[]{ "Code", "Name", "Timezone" }, null, new[]{ typeof(global::Com.Xceder.Messages.Exchange.Types.EXCHANGE) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.DeviceToken), global::Com.Xceder.Messages.DeviceToken.Parser, new[]{ "Type", "Token", "UpdateTimeUTC" }, null, new[]{ typeof(global::Com.Xceder.Messages.DeviceToken.Types.DEVICE_TYPE) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.Account), global::Com.Xceder.Messages.Account.Parser, new[]{ "Extension", "AccountID", "UserID", "Password", "Particular", "Role", "Services", "UpdateUTC", "Status", "LoginRecord", "PrevLoginRecord", "TradingRuleUpdateTime", "AllowedConnection", "LoginMode" }, null, new[]{ typeof(global::Com.Xceder.Messages.Account.Types.LOGIN_MODE), typeof(global::Com.Xceder.Messages.Account.Types.ROLE), typeof(global::Com.Xceder.Messages.Account.Types.CONNECTION), typeof(global::Com.Xceder.Messages.Account.Types.STATUS) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.Particular), global::Com.Xceder.Messages.Particular.Parser, new[]{ "FirstName", "SurName", "Email", "Phone", "Country", "Language", "TimezoneOffset", "Gender", "SignUpUTC", "EmailVerifiedUTC", "PhoneVerifiedUTC", "MobileDeviceTokens" }, null, new[]{ typeof(global::Com.Xceder.Messages.Particular.Types.GENDER) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.LoginRecord), global::Com.Xceder.Messages.LoginRecord.Parser, new[]{ "AuthBy", "LoginUTC", "LoginFrom", "LoginDevice", "LoginResult", "LogoutUTC", "LogoutRemark", "PrevFailCount", "OTP", "ClientApp", "PushingDelay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.Result), global::Com.Xceder.Messages.Result.Parser, new[]{ "Request", "ServerID", "ResultCode", "Remark", "RequestRcvUTC", "StartProcessUTC", "FinishProcessUTC", "RequestFromIP", "RequestFromPort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.Service), global::Com.Xceder.Messages.Service.Parser, new[]{ "Broker", "Svc", "Exchange" }, null, new[]{ typeof(global::Com.Xceder.Messages.Service.Types.SERVICE) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.ServiceStatus), global::Com.Xceder.Messages.ServiceStatus.Parser, new[]{ "ServerID", "Service", "Status" }, null, new[]{ typeof(global::Com.Xceder.Messages.ServiceStatus.Types.STATUS) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.ServiceStatuses), global::Com.Xceder.Messages.ServiceStatuses.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.Logon), global::Com.Xceder.Messages.Logon.Parser, new[]{ "UserID", "Password", "OTP", "ClientApp", "PushingDelay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.LogonResult), global::Com.Xceder.Messages.LogonResult.Parser, new[]{ "Account", "RedirectURL" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.PasswordChange), global::Com.Xceder.Messages.PasswordChange.Parser, new[]{ "CurrentPassword", "NewPassword", "Email" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.NoticeMessages), global::Com.Xceder.Messages.NoticeMessages.Parser, new[]{ "Notice" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.NoticeMessage), global::Com.Xceder.Messages.NoticeMessage.Parser, new[]{ "Type", "Source", "Subject", "Text", "ExpirationUTC" }, null, new[]{ typeof(global::Com.Xceder.Messages.NoticeMessage.Types.TYPE) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.Ping), global::Com.Xceder.Messages.Ping.Parser, new[]{ "PingUTC", "PongUTC" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.Query), global::Com.Xceder.Messages.Query.Parser, new[]{ "Extension", "Order", "Log", "Instruments", "AccountTradingRule", "SupportBrokerExchanges", "Calendar", "Spreader" }, new[]{ "Query" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.QueryResult), global::Com.Xceder.Messages.QueryResult.Parser, new[]{ "Extension", "OrdersReports", "Logs", "AccountTradingRule", "SupportedExchanges", "Calendar", "Instruments", "Spreaders" }, new[]{ "Result" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.ExchangeCalendar), global::Com.Xceder.Messages.ExchangeCalendar.Parser, new[]{ "Exchange", "Holiday" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.ExchangeCalendar.Types.Holiday), global::Com.Xceder.Messages.ExchangeCalendar.Types.Holiday.Parser, new[]{ "EpochDay", "Holiday_", "Hours" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.BrokerExchanges), global::Com.Xceder.Messages.BrokerExchanges.Parser, new[]{ "Broker", "Exchange" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.QueryConditions), global::Com.Xceder.Messages.QueryConditions.Parser, new[]{ "FromUTC", "ToUTC", "Broker", "Exchange", "Symbol", "Product", "InstrumentID", "Account" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.OrderReports), global::Com.Xceder.Messages.OrderReports.Parser, new[]{ "OrderReport" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.OrderReport), global::Com.Xceder.Messages.OrderReport.Parser, new[]{ "Order", "Report" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.RequestLogs), global::Com.Xceder.Messages.RequestLogs.Parser, new[]{ "Logs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.RequestLog), global::Com.Xceder.Messages.RequestLog.Parser, new[]{ "Request", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.Order), global::Com.Xceder.Messages.Order.Parser, new[]{ "Account", "EnterBy", "SubmitUTC", "Tag", "Leg", "Indicator", "Params", "Compound" }, new[]{ "Detail" }, new[]{ typeof(global::Com.Xceder.Messages.Order.Types.TYPE), typeof(global::Com.Xceder.Messages.Order.Types.TIMEINFORCE), typeof(global::Com.Xceder.Messages.Order.Types.EXECINSTRUCTION), typeof(global::Com.Xceder.Messages.Order.Types.TRAILINGPEG), typeof(global::Com.Xceder.Messages.Order.Types.SUBMITMODE) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.OrderParams), global::Com.Xceder.Messages.OrderParams.Parser, new[]{ "OrigClOrdID", "Instrument", "Side", "OrderType", "ExecInstruction", "TimeInForce", "OrderQty", "LimitPrice", "StopPrice", "VisibleQty", "MinVisibleQty", "GoodThruUTC", "RegulatoryAlgorithm", "TrailOffset", "TrailingPeg", "TriggerQty", "ActivationUTC", "SuspensionUTC", "Currency", "Close", "Aggressive" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.CompoundOrder), global::Com.Xceder.Messages.CompoundOrder.Parser, new[]{ "Type", "CompoundID", "Remark", "CompleteFill", "Order" }, null, new[]{ typeof(global::Com.Xceder.Messages.CompoundOrder.Types.TYPE) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.Spreaders), global::Com.Xceder.Messages.Spreaders.Parser, new[]{ "Speader" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.Spreader), global::Com.Xceder.Messages.Spreader.Parser, new[]{ "Id", "OwnerAcct", "Name", "Remark", "Type", "Formula", "ReloadOffset", "ReloadQty", "TickSize", "Leg", "UpdateTimeUTC" }, null, new[]{ typeof(global::Com.Xceder.Messages.Spreader.Types.QUOTING_MODE), typeof(global::Com.Xceder.Messages.Spreader.Types.COUPONFREQ), typeof(global::Com.Xceder.Messages.Spreader.Types.DAYCOUNTTYPE), typeof(global::Com.Xceder.Messages.Spreader.Types.YIELD_TYPE), typeof(global::Com.Xceder.Messages.Spreader.Types.TYPE) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.Spreader.Types.SpreadSlop), global::Com.Xceder.Messages.Spreader.Types.SpreadSlop.Parser, new[]{ "Range", "InsideSlop", "OutsideSlop" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.Spreader.Types.InsideQuote), global::Com.Xceder.Messages.Spreader.Types.InsideQuote.Parser, new[]{ "InsideTick", "DistanceLimit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.Spreader.Types.EventRules), global::Com.Xceder.Messages.Spreader.Types.EventRules.Parser, new[]{ "PreQuoting", "PreHedging", "PostHedging" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.Spreader.Types.Leg), global::Com.Xceder.Messages.Spreader.Types.Leg.Parser, new[]{ "Instrument", "Type", "IsShortLeg", "QtyRatio", "PriceWeight", "HedgeTick", "MinQtyLean", "QtyLeanDepth", "QuotingMode", "QueueHolderDepth", "MaxQuotePriceMove", "MaxHedgePriceMove", "Rules", "SlopLevel", "InsideQuote", "HedgeTriggerFillQty", "Attribute" }, null, new[]{ typeof(global::Com.Xceder.Messages.Spreader.Types.Leg.Types.TYPE) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.Spreader.Types.Leg.Types.ExtraAttributes), global::Com.Xceder.Messages.Spreader.Types.Leg.Types.ExtraAttributes.Parser, new[]{ "FirstCouponDate", "IssueDate", "ConversionFactor", "Use365Days", "CouponRate", "CouponFreq", "EndOfMonthCoupon", "MaturityDate", "PV01", "SettlementDate", "StripBase", "YieldType" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.OrderID), global::Com.Xceder.Messages.OrderID.Parser, new[]{ "ClOrdID", "ChainClOrdID", "OrigClOrdID", "TradingAccount", "ExecOrderID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.ExecutionReport), global::Com.Xceder.Messages.ExecutionReport.Parser, new[]{ "ExecID", "OrderID", "ExecType", "OrdStatus", "RejectCode", "TransactTimeUTC", "ReportTimeUTC", "FillQty", "FillPrice", "TotalFillQty", "AvgFillPrice", "RemainingQty", "Remark", "FillCounterParty", "SourceServer" }, null, new[]{ typeof(global::Com.Xceder.Messages.ExecutionReport.Types.STATUS), typeof(global::Com.Xceder.Messages.ExecutionReport.Types.REJECTCODE) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.InstrumentSubscription), global::Com.Xceder.Messages.InstrumentSubscription.Parser, new[]{ "Instrument", "Action" }, null, new[]{ typeof(global::Com.Xceder.Messages.InstrumentSubscription.Types.ACTION) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.MarketDatas), global::Com.Xceder.Messages.MarketDatas.Parser, new[]{ "MarketData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.PriceBar), global::Com.Xceder.Messages.PriceBar.Parser, new[]{ "UpdateTime", "Open", "High", "Low", "Close", "Volume", "Settlement" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.MarketData), global::Com.Xceder.Messages.MarketData.Parser, new[]{ "Instrument", "UpdateTimeUTC", "PriceBar", "PrevPriceBar", "TradeQuote", "BidQuotes", "AskQuotes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.Quote), global::Com.Xceder.Messages.Quote.Parser, new[]{ "EntryID", "QuoteUTC", "Price", "Volume", "TradeCondition", "NumberOfOrders" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.TickRange), global::Com.Xceder.Messages.TickRange.Parser, new[]{ "PriceRange", "NumTicks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.InstrumentTradingRule), global::Com.Xceder.Messages.InstrumentTradingRule.Parser, new[]{ "VolumeMultiple", "MaxMarketOrderVolume", "MinMarketOrderVolume", "MaxLimitOrderVolume", "MinLimitOrderVolume", "PositionType", "IncludePastPosition", "CloseDealType", "MortgageUseRange", "LotSize", "TickSize", "TickValue", "TickRange" }, null, new[]{ typeof(global::Com.Xceder.Messages.InstrumentTradingRule.Types.CLOSEDEAL_TYPE), typeof(global::Com.Xceder.Messages.InstrumentTradingRule.Types.POSITION_TYPE), typeof(global::Com.Xceder.Messages.InstrumentTradingRule.Types.MORTGAGE_USAGE) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.EnergyAttributes), global::Com.Xceder.Messages.EnergyAttributes.Parser, new[]{ "DeliveryUnit", "Blocks", "DeliveryDays", "ContractTerm" }, null, new[]{ typeof(global::Com.Xceder.Messages.EnergyAttributes.Types.CONTRACT_TERM) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.OptionsAttributes), global::Com.Xceder.Messages.OptionsAttributes.Parser, new[]{ "Type", "StrikePrice", "Version" }, null, new[]{ typeof(global::Com.Xceder.Messages.OptionsAttributes.Types.OPTIONS_TYPE) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.MarginFormula), global::Com.Xceder.Messages.MarginFormula.Parser, new[]{ "LongMarginRatio", "ShortMarginRatio", "IsMaxMarginSideAlgorithm" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.Instruments), global::Com.Xceder.Messages.Instruments.Parser, new[]{ "Instrument" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.InstrumentStatuses), global::Com.Xceder.Messages.InstrumentStatuses.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.InstrumentStatus), global::Com.Xceder.Messages.InstrumentStatus.Parser, new[]{ "Instrument", "Status", "Remark", "UpdateTimeUTC" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.Instrument), global::Com.Xceder.Messages.Instrument.Parser, new[]{ "Identity", "Product", "CFICode", "Description", "Currency", "CreateEpochDay", "MaturityEpochDays", "ListEpochDay", "StartDeliveryEpochDays", "EndDeliveryEpochDays", "MarginCalculation", "ContractSymbol", "TradingRule", "Underlying", "OptionAttributes", "EnergyAttributes", "UpdateTimeUTC", "IsNonTradable" }, null, new[]{ typeof(global::Com.Xceder.Messages.Instrument.Types.STATUS), typeof(global::Com.Xceder.Messages.Instrument.Types.PRODUCT), typeof(global::Com.Xceder.Messages.Instrument.Types.IDSOURCE) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.Instrument.Types.Identity), global::Com.Xceder.Messages.Instrument.Types.Identity.Parser, new[]{ "Id", "Exchange", "Broker", "Symbol", "SecurityID", "IdSource" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.Instrument.Types.Leg), global::Com.Xceder.Messages.Instrument.Types.Leg.Parser, new[]{ "Instrument", "Side", "Price", "Qty" }, null, null, null),
            null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Xceder.Messages.AccountTradingRules), global::Com.Xceder.Messages.AccountTradingRules.Parser, new[]{ "Account", "AllowedProducts", "AllowedInstruments", "BannedProducts", "BannedInstruments", "UpdateTimeUTC" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ID_TYPE {
    [pbr::OriginalName("INSTRUMENT")] Instrument = 0,
    [pbr::OriginalName("SPREADER")] Spreader = 1,
    [pbr::OriginalName("ORDER")] Order = 2,
  }

  /// <summary>
  /// Result code.
  /// </summary>
  public enum ERRORCODE {
    [pbr::OriginalName("PROCESSING")] Processing = 0,
    /// <summary>
    /// success codes
    /// </summary>
    [pbr::OriginalName("SUCCESS")] Success = 1,
    /// <summary>
    /// failure codes (>=100)
    /// </summary>
    [pbr::OriginalName("FAILURE")] Failure = 100,
    /// <summary>
    /// The limit of the request number has been violated.
    /// </summary>
    [pbr::OriginalName("REQUEST_LIMIT_VIOLATION")] RequestLimitViolation = 101,
    /// <summary>
    /// One-time password is required for this user but it was not sent, repeat logon
    /// with one-time password.
    /// </summary>
    [pbr::OriginalName("NO_ONETIME_PASSWORD")] NoOnetimePassword = 102,
    [pbr::OriginalName("NO_TRADINGACCOUNT")] NoTradingaccount = 103,
    [pbr::OriginalName("OTP_EXPIRED")] OtpExpired = 104,
    [pbr::OriginalName("OTP_NOT_FOUND")] OtpNotFound = 105,
    [pbr::OriginalName("NETWORK_ERROR")] NetworkError = 106,
    [pbr::OriginalName("CANCELLED")] Cancelled = 107,
    [pbr::OriginalName("CONNECTION_DOWN")] ConnectionDown = 108,
    [pbr::OriginalName("CONNECTION_NOT_CONFIGURE")] ConnectionNotConfigure = 109,
    /// <summary>
    /// Requested data is outside of allowed range.
    /// </summary>
    [pbr::OriginalName("OUTSIDE_ALLOWED_RANGE")] OutsideAllowedRange = 110,
    [pbr::OriginalName("UNKNOWN_REQUEST")] UnknownRequest = 111,
    /// <summary>
    /// User password is expired, only change password operation is allowed.
    /// </summary>
    [pbr::OriginalName("PASSWORD_EXPIRED")] PasswordExpired = 112,
    /// <summary>
    /// Client is redirected to a different server, new server is specified in redirectUrl.
    /// </summary>
    [pbr::OriginalName("REDIRECTED")] Redirected = 113,
    /// <summary>
    /// The user is not allowed to access this instrument data.
    /// </summary>
    [pbr::OriginalName("ACCESS_DENIED")] AccessDenied = 114,
    /// <summary>
    ///connection to broker isn't up
    /// </summary>
    [pbr::OriginalName("DISCONNECTED")] Disconnected = 115,
    [pbr::OriginalName("WRONG_PASSWORD")] WrongPassword = 116,
    [pbr::OriginalName("ACCOUNT_SUSPENDED")] AccountSuspended = 117,
    [pbr::OriginalName("KICKEDOUT")] Kickedout = 118,
    [pbr::OriginalName("TIMEOUTOFSYNC")] Timeoutofsync = 119,
    [pbr::OriginalName("DUPLICATE_USER")] DuplicateUser = 120,
    [pbr::OriginalName("NOT_LOGIN")] NotLogin = 130,
    [pbr::OriginalName("NOT_SUPPORT")] NotSupport = 131,
    /// <summary>
    /// Requested information is not found.
    /// </summary>
    [pbr::OriginalName("NOT_FOUND")] NotFound = 132,
    [pbr::OriginalName("NOT_FOUND_ORDER")] NotFoundOrder = 133,
    [pbr::OriginalName("INVALID_PARAMS")] InvalidParams = 140,
    [pbr::OriginalName("INVALID_INSTRUMENTID")] InvalidInstrumentid = 141,
    [pbr::OriginalName("INVALID_CLORDID")] InvalidClordid = 142,
    [pbr::OriginalName("INVALID_USERID")] InvalidUserid = 143,
    [pbr::OriginalName("INVALID_BROKER")] InvalidBroker = 144,
    [pbr::OriginalName("INVALID_EMAIL")] InvalidEmail = 145,
    [pbr::OriginalName("INVALID_ORDER_SUBMITUSER")] InvalidOrderSubmituser = 146,
    [pbr::OriginalName("INVALID_ORDER_QTY")] InvalidOrderQty = 147,
    [pbr::OriginalName("INVALID_LIMIT_PRICE")] InvalidLimitPrice = 148,
    [pbr::OriginalName("INVALID_STOP_PRICE")] InvalidStopPrice = 149,
    [pbr::OriginalName("INVALID_ORDER_TYPE")] InvalidOrderType = 150,
    [pbr::OriginalName("INVALID_ORDER_SUBMIT_TIME")] InvalidOrderSubmitTime = 151,
    [pbr::OriginalName("INVALID_ORDER_TIMEINFORCE")] InvalidOrderTimeinforce = 152,
    [pbr::OriginalName("INVALID_CHAINCLORDID")] InvalidChainclordid = 153,
    [pbr::OriginalName("INVALID_SYMBOL")] InvalidSymbol = 154,
    [pbr::OriginalName("INVALID_SIDE")] InvalidSide = 155,
    [pbr::OriginalName("INSTRUMENT_EXPIRED")] InstrumentExpired = 156,
    [pbr::OriginalName("INSTRUMENT_NOT_TRADABLE")] InstrumentNotTradable = 157,
    [pbr::OriginalName("INSTRUMENT_NO_PRICE_ACCESS")] InstrumentNoPriceAccess = 158,
    /// <summary>
    ///tag should be less than 255
    /// </summary>
    [pbr::OriginalName("ORDER_TAG_TOOLONG")] OrderTagToolong = 160,
    [pbr::OriginalName("ORDER_NOT_REPLACEABLE")] OrderNotReplaceable = 161,
    /// <summary>
    /// Spreader related errors 
    /// </summary>
    [pbr::OriginalName("SPREADER_DUPLICATE_NAME")] SpreaderDuplicateName = 171,
    [pbr::OriginalName("SPREADER_NO_QUOTING")] SpreaderNoQuoting = 172,
    [pbr::OriginalName("SPREADER_NO_LEGS")] SpreaderNoLegs = 173,
    [pbr::OriginalName("SPREADER_NO_INSTRUMENT_ACCESS")] SpreaderNoInstrumentAccess = 174,
    [pbr::OriginalName("SPREADER_DUPLICATE_ORDER")] SpreaderDuplicateOrder = 175,
    [pbr::OriginalName("SPREADER_INVALID_ID")] SpreaderInvalidId = 176,
    [pbr::OriginalName("SPREADER_INVALID_LEG_INSTRUMENT")] SpreaderInvalidLegInstrument = 177,
    [pbr::OriginalName("SPREADER_INVALID_LEG_RATIO")] SpreaderInvalidLegRatio = 178,
    [pbr::OriginalName("SPREADER_INVALID_LEG_PRICEWEIGHT")] SpreaderInvalidLegPriceweight = 179,
    /// <summary>
    ///for example syntax error
    /// </summary>
    [pbr::OriginalName("SPREADER_INVALID_LEG_RULES")] SpreaderInvalidLegRules = 180,
    /// <summary>
    ///leg order has failure, for example, fail to withdraw some leg orders
    /// </summary>
    [pbr::OriginalName("SPREADER_LEG_FAILURE")] SpreaderLegFailure = 181,
    /// <summary>
    ///can't modify the algo/spreader because of active orders
    /// </summary>
    [pbr::OriginalName("ALGO_ACTIVE_ORDER")] AlgoActiveOrder = 190,
  }

  public enum BROKER {
    /// <summary>
    ///also means any/unspecified broker
    /// </summary>
    [pbr::OriginalName("XCEDER")] Xceder = 0,
    [pbr::OriginalName("SQUARE")] Square = 1,
    [pbr::OriginalName("KGI")] Kgi = 2,
    [pbr::OriginalName("PHILLIP")] Phillip = 3,
    [pbr::OriginalName("ORIENT")] Orient = 4,
    [pbr::OriginalName("UOB")] Uob = 5,
    [pbr::OriginalName("CQG")] Cqg = 6,
    [pbr::OriginalName("TT")] Tt = 7,
  }

  public enum SIDE {
    [pbr::OriginalName("NO_SIDE")] NoSide = 0,
    /// <summary>
    /// Describes purchasing side of a trade.
    /// </summary>
    [pbr::OriginalName("BUY")] Buy = 1,
    /// <summary>
    /// Describes selling side of a trade.
    /// </summary>
    [pbr::OriginalName("SELL")] Sell = 2,
  }

  public enum OTP_PURPOSE {
    [pbr::OriginalName("RESET_PWD")] ResetPwd = 0,
    [pbr::OriginalName("EMAIL_CONFIRM")] EmailConfirm = 1,
    [pbr::OriginalName("PHONE_CONFIRM")] PhoneConfirm = 2,
  }

  /// <summary>
  /// Days of week enumeration.
  /// </summary>
  public enum DAYOFWEEK {
    [pbr::OriginalName("SUNDAY")] Sunday = 0,
    [pbr::OriginalName("MONDAY")] Monday = 1,
    [pbr::OriginalName("TUESDAY")] Tuesday = 2,
    [pbr::OriginalName("WEDNESDAY")] Wednesday = 3,
    [pbr::OriginalName("THURSDAY")] Thursday = 4,
    [pbr::OriginalName("FRIDAY")] Friday = 5,
    [pbr::OriginalName("SATURDAY")] Saturday = 6,
  }

  #endregion

  #region Messages
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      requestID_ = other.requestID_;
      requestUTC_ = other.requestUTC_;
      switch (other.RequestCase) {
        case RequestOneofCase.Extension:
          Extension = other.Extension.Clone();
          break;
        case RequestOneofCase.Ping:
          Ping = other.Ping.Clone();
          break;
        case RequestOneofCase.Logon:
          Logon = other.Logon.Clone();
          break;
        case RequestOneofCase.Logoff:
          Logoff = other.Logoff;
          break;
        case RequestOneofCase.PasswordChange:
          PasswordChange = other.PasswordChange.Clone();
          break;
        case RequestOneofCase.Account:
          Account = other.Account.Clone();
          break;
        case RequestOneofCase.QueryRequest:
          QueryRequest = other.QueryRequest.Clone();
          break;
        case RequestOneofCase.MarketData:
          MarketData = other.MarketData.Clone();
          break;
        case RequestOneofCase.Instruments:
          Instruments = other.Instruments.Clone();
          break;
        case RequestOneofCase.InstrumentStatus:
          InstrumentStatus = other.InstrumentStatus.Clone();
          break;
        case RequestOneofCase.Order:
          Order = other.Order.Clone();
          break;
        case RequestOneofCase.Spreader:
          Spreader = other.Spreader.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "requestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private ulong requestID_;
    /// <summary>
    ///request ID, should be unique enough to receive the request Result
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "requestUTC" field.</summary>
    public const int RequestUTCFieldNumber = 2;
    private ulong requestUTC_;
    /// <summary>
    ///this is the timestamp from client side when request is submitted
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestUTC {
      get { return requestUTC_; }
      set {
        requestUTC_ = value;
      }
    }

    /// <summary>Field number for the "extension" field.</summary>
    public const int ExtensionFieldNumber = 3;
    /// <summary>
    ///it is used as request extension for some system, for example, xceder Web need this to update the watch list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Extension {
      get { return requestCase_ == RequestOneofCase.Extension ? (global::Google.Protobuf.WellKnownTypes.Any) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Extension;
      }
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Ping Ping {
      get { return requestCase_ == RequestOneofCase.Ping ? (global::Com.Xceder.Messages.Ping) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Ping;
      }
    }

    /// <summary>Field number for the "logon" field.</summary>
    public const int LogonFieldNumber = 5;
    /// <summary>
    ///login system for registered user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Logon Logon {
      get { return requestCase_ == RequestOneofCase.Logon ? (global::Com.Xceder.Messages.Logon) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Logon;
      }
    }

    /// <summary>Field number for the "logoff" field.</summary>
    public const int LogoffFieldNumber = 6;
    /// <summary>
    ///logoff message to logoff current session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Logoff {
      get { return requestCase_ == RequestOneofCase.Logoff ? (string) request_ : ""; }
      set {
        request_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        requestCase_ = RequestOneofCase.Logoff;
      }
    }

    /// <summary>Field number for the "passwordChange" field.</summary>
    public const int PasswordChangeFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.PasswordChange PasswordChange {
      get { return requestCase_ == RequestOneofCase.PasswordChange ? (global::Com.Xceder.Messages.PasswordChange) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.PasswordChange;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 8;
    /// <summary>
    ///register new account or update the account detail
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Account Account {
      get { return requestCase_ == RequestOneofCase.Account ? (global::Com.Xceder.Messages.Account) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Account;
      }
    }

    /// <summary>Field number for the "queryRequest" field.</summary>
    public const int QueryRequestFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Query QueryRequest {
      get { return requestCase_ == RequestOneofCase.QueryRequest ? (global::Com.Xceder.Messages.Query) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.QueryRequest;
      }
    }

    /// <summary>Field number for the "marketData" field.</summary>
    public const int MarketDataFieldNumber = 10;
    /// <summary>
    /// subscribe/unsubscribe market data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.InstrumentSubscription MarketData {
      get { return requestCase_ == RequestOneofCase.MarketData ? (global::Com.Xceder.Messages.InstrumentSubscription) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.MarketData;
      }
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 11;
    /// <summary>
    /// subscribe/unsubscribe the instrument change
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.InstrumentSubscription Instruments {
      get { return requestCase_ == RequestOneofCase.Instruments ? (global::Com.Xceder.Messages.InstrumentSubscription) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Instruments;
      }
    }

    /// <summary>Field number for the "instrumentStatus" field.</summary>
    public const int InstrumentStatusFieldNumber = 12;
    /// <summary>
    ///subscribe/unsubscribe the instrument status change
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.InstrumentSubscription InstrumentStatus {
      get { return requestCase_ == RequestOneofCase.InstrumentStatus ? (global::Com.Xceder.Messages.InstrumentSubscription) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.InstrumentStatus;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Order Order {
      get { return requestCase_ == RequestOneofCase.Order ? (global::Com.Xceder.Messages.Order) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Order;
      }
    }

    /// <summary>Field number for the "spreader" field.</summary>
    public const int SpreaderFieldNumber = 14;
    /// <summary>
    ///request to create/update spreader, the new spreader ID should be 0.
    ///only allow to change the spreader which status isn't RUN
    ///to delete spreader, just specify the ID with the empty name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Spreader Spreader {
      get { return requestCase_ == RequestOneofCase.Spreader ? (global::Com.Xceder.Messages.Spreader) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Spreader;
      }
    }

    private object request_;
    /// <summary>Enum of possible cases for the "request" oneof.</summary>
    public enum RequestOneofCase {
      None = 0,
      Extension = 3,
      Ping = 4,
      Logon = 5,
      Logoff = 6,
      PasswordChange = 7,
      Account = 8,
      QueryRequest = 9,
      MarketData = 10,
      Instruments = 11,
      InstrumentStatus = 12,
      Order = 13,
      Spreader = 14,
    }
    private RequestOneofCase requestCase_ = RequestOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestOneofCase RequestCase {
      get { return requestCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequest() {
      requestCase_ = RequestOneofCase.None;
      request_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (RequestUTC != other.RequestUTC) return false;
      if (!object.Equals(Extension, other.Extension)) return false;
      if (!object.Equals(Ping, other.Ping)) return false;
      if (!object.Equals(Logon, other.Logon)) return false;
      if (Logoff != other.Logoff) return false;
      if (!object.Equals(PasswordChange, other.PasswordChange)) return false;
      if (!object.Equals(Account, other.Account)) return false;
      if (!object.Equals(QueryRequest, other.QueryRequest)) return false;
      if (!object.Equals(MarketData, other.MarketData)) return false;
      if (!object.Equals(Instruments, other.Instruments)) return false;
      if (!object.Equals(InstrumentStatus, other.InstrumentStatus)) return false;
      if (!object.Equals(Order, other.Order)) return false;
      if (!object.Equals(Spreader, other.Spreader)) return false;
      if (RequestCase != other.RequestCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0UL) hash ^= RequestID.GetHashCode();
      if (RequestUTC != 0UL) hash ^= RequestUTC.GetHashCode();
      if (requestCase_ == RequestOneofCase.Extension) hash ^= Extension.GetHashCode();
      if (requestCase_ == RequestOneofCase.Ping) hash ^= Ping.GetHashCode();
      if (requestCase_ == RequestOneofCase.Logon) hash ^= Logon.GetHashCode();
      if (requestCase_ == RequestOneofCase.Logoff) hash ^= Logoff.GetHashCode();
      if (requestCase_ == RequestOneofCase.PasswordChange) hash ^= PasswordChange.GetHashCode();
      if (requestCase_ == RequestOneofCase.Account) hash ^= Account.GetHashCode();
      if (requestCase_ == RequestOneofCase.QueryRequest) hash ^= QueryRequest.GetHashCode();
      if (requestCase_ == RequestOneofCase.MarketData) hash ^= MarketData.GetHashCode();
      if (requestCase_ == RequestOneofCase.Instruments) hash ^= Instruments.GetHashCode();
      if (requestCase_ == RequestOneofCase.InstrumentStatus) hash ^= InstrumentStatus.GetHashCode();
      if (requestCase_ == RequestOneofCase.Order) hash ^= Order.GetHashCode();
      if (requestCase_ == RequestOneofCase.Spreader) hash ^= Spreader.GetHashCode();
      hash ^= (int) requestCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestID);
      }
      if (RequestUTC != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestUTC);
      }
      if (requestCase_ == RequestOneofCase.Extension) {
        output.WriteRawTag(26);
        output.WriteMessage(Extension);
      }
      if (requestCase_ == RequestOneofCase.Ping) {
        output.WriteRawTag(34);
        output.WriteMessage(Ping);
      }
      if (requestCase_ == RequestOneofCase.Logon) {
        output.WriteRawTag(42);
        output.WriteMessage(Logon);
      }
      if (requestCase_ == RequestOneofCase.Logoff) {
        output.WriteRawTag(50);
        output.WriteString(Logoff);
      }
      if (requestCase_ == RequestOneofCase.PasswordChange) {
        output.WriteRawTag(58);
        output.WriteMessage(PasswordChange);
      }
      if (requestCase_ == RequestOneofCase.Account) {
        output.WriteRawTag(66);
        output.WriteMessage(Account);
      }
      if (requestCase_ == RequestOneofCase.QueryRequest) {
        output.WriteRawTag(74);
        output.WriteMessage(QueryRequest);
      }
      if (requestCase_ == RequestOneofCase.MarketData) {
        output.WriteRawTag(82);
        output.WriteMessage(MarketData);
      }
      if (requestCase_ == RequestOneofCase.Instruments) {
        output.WriteRawTag(90);
        output.WriteMessage(Instruments);
      }
      if (requestCase_ == RequestOneofCase.InstrumentStatus) {
        output.WriteRawTag(98);
        output.WriteMessage(InstrumentStatus);
      }
      if (requestCase_ == RequestOneofCase.Order) {
        output.WriteRawTag(106);
        output.WriteMessage(Order);
      }
      if (requestCase_ == RequestOneofCase.Spreader) {
        output.WriteRawTag(114);
        output.WriteMessage(Spreader);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestID);
      }
      if (RequestUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestUTC);
      }
      if (requestCase_ == RequestOneofCase.Extension) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extension);
      }
      if (requestCase_ == RequestOneofCase.Ping) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ping);
      }
      if (requestCase_ == RequestOneofCase.Logon) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Logon);
      }
      if (requestCase_ == RequestOneofCase.Logoff) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Logoff);
      }
      if (requestCase_ == RequestOneofCase.PasswordChange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PasswordChange);
      }
      if (requestCase_ == RequestOneofCase.Account) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (requestCase_ == RequestOneofCase.QueryRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryRequest);
      }
      if (requestCase_ == RequestOneofCase.MarketData) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MarketData);
      }
      if (requestCase_ == RequestOneofCase.Instruments) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instruments);
      }
      if (requestCase_ == RequestOneofCase.InstrumentStatus) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InstrumentStatus);
      }
      if (requestCase_ == RequestOneofCase.Order) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Order);
      }
      if (requestCase_ == RequestOneofCase.Spreader) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spreader);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0UL) {
        RequestID = other.RequestID;
      }
      if (other.RequestUTC != 0UL) {
        RequestUTC = other.RequestUTC;
      }
      switch (other.RequestCase) {
        case RequestOneofCase.Extension:
          Extension = other.Extension;
          break;
        case RequestOneofCase.Ping:
          Ping = other.Ping;
          break;
        case RequestOneofCase.Logon:
          Logon = other.Logon;
          break;
        case RequestOneofCase.Logoff:
          Logoff = other.Logoff;
          break;
        case RequestOneofCase.PasswordChange:
          PasswordChange = other.PasswordChange;
          break;
        case RequestOneofCase.Account:
          Account = other.Account;
          break;
        case RequestOneofCase.QueryRequest:
          QueryRequest = other.QueryRequest;
          break;
        case RequestOneofCase.MarketData:
          MarketData = other.MarketData;
          break;
        case RequestOneofCase.Instruments:
          Instruments = other.Instruments;
          break;
        case RequestOneofCase.InstrumentStatus:
          InstrumentStatus = other.InstrumentStatus;
          break;
        case RequestOneofCase.Order:
          Order = other.Order;
          break;
        case RequestOneofCase.Spreader:
          Spreader = other.Spreader;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RequestID = input.ReadUInt64();
            break;
          }
          case 16: {
            RequestUTC = input.ReadUInt64();
            break;
          }
          case 26: {
            global::Google.Protobuf.WellKnownTypes.Any subBuilder = new global::Google.Protobuf.WellKnownTypes.Any();
            if (requestCase_ == RequestOneofCase.Extension) {
              subBuilder.MergeFrom(Extension);
            }
            input.ReadMessage(subBuilder);
            Extension = subBuilder;
            break;
          }
          case 34: {
            global::Com.Xceder.Messages.Ping subBuilder = new global::Com.Xceder.Messages.Ping();
            if (requestCase_ == RequestOneofCase.Ping) {
              subBuilder.MergeFrom(Ping);
            }
            input.ReadMessage(subBuilder);
            Ping = subBuilder;
            break;
          }
          case 42: {
            global::Com.Xceder.Messages.Logon subBuilder = new global::Com.Xceder.Messages.Logon();
            if (requestCase_ == RequestOneofCase.Logon) {
              subBuilder.MergeFrom(Logon);
            }
            input.ReadMessage(subBuilder);
            Logon = subBuilder;
            break;
          }
          case 50: {
            Logoff = input.ReadString();
            break;
          }
          case 58: {
            global::Com.Xceder.Messages.PasswordChange subBuilder = new global::Com.Xceder.Messages.PasswordChange();
            if (requestCase_ == RequestOneofCase.PasswordChange) {
              subBuilder.MergeFrom(PasswordChange);
            }
            input.ReadMessage(subBuilder);
            PasswordChange = subBuilder;
            break;
          }
          case 66: {
            global::Com.Xceder.Messages.Account subBuilder = new global::Com.Xceder.Messages.Account();
            if (requestCase_ == RequestOneofCase.Account) {
              subBuilder.MergeFrom(Account);
            }
            input.ReadMessage(subBuilder);
            Account = subBuilder;
            break;
          }
          case 74: {
            global::Com.Xceder.Messages.Query subBuilder = new global::Com.Xceder.Messages.Query();
            if (requestCase_ == RequestOneofCase.QueryRequest) {
              subBuilder.MergeFrom(QueryRequest);
            }
            input.ReadMessage(subBuilder);
            QueryRequest = subBuilder;
            break;
          }
          case 82: {
            global::Com.Xceder.Messages.InstrumentSubscription subBuilder = new global::Com.Xceder.Messages.InstrumentSubscription();
            if (requestCase_ == RequestOneofCase.MarketData) {
              subBuilder.MergeFrom(MarketData);
            }
            input.ReadMessage(subBuilder);
            MarketData = subBuilder;
            break;
          }
          case 90: {
            global::Com.Xceder.Messages.InstrumentSubscription subBuilder = new global::Com.Xceder.Messages.InstrumentSubscription();
            if (requestCase_ == RequestOneofCase.Instruments) {
              subBuilder.MergeFrom(Instruments);
            }
            input.ReadMessage(subBuilder);
            Instruments = subBuilder;
            break;
          }
          case 98: {
            global::Com.Xceder.Messages.InstrumentSubscription subBuilder = new global::Com.Xceder.Messages.InstrumentSubscription();
            if (requestCase_ == RequestOneofCase.InstrumentStatus) {
              subBuilder.MergeFrom(InstrumentStatus);
            }
            input.ReadMessage(subBuilder);
            InstrumentStatus = subBuilder;
            break;
          }
          case 106: {
            global::Com.Xceder.Messages.Order subBuilder = new global::Com.Xceder.Messages.Order();
            if (requestCase_ == RequestOneofCase.Order) {
              subBuilder.MergeFrom(Order);
            }
            input.ReadMessage(subBuilder);
            Order = subBuilder;
            break;
          }
          case 114: {
            global::Com.Xceder.Messages.Spreader subBuilder = new global::Com.Xceder.Messages.Spreader();
            if (requestCase_ == RequestOneofCase.Spreader) {
              subBuilder.MergeFrom(Spreader);
            }
            input.ReadMessage(subBuilder);
            Spreader = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Server to Client message, server can include different fields in a single message
  /// </summary>
  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      Result = other.result_ != null ? other.Result.Clone() : null;
      switch (other.ResponseCase) {
        case ResponseOneofCase.Extension:
          Extension = other.Extension.Clone();
          break;
        case ResponseOneofCase.QueryResult:
          QueryResult = other.QueryResult.Clone();
          break;
        case ResponseOneofCase.MarketDatas:
          MarketDatas = other.MarketDatas.Clone();
          break;
        case ResponseOneofCase.Ping:
          Ping = other.Ping.Clone();
          break;
        case ResponseOneofCase.LogonResult:
          LogonResult = other.LogonResult.Clone();
          break;
        case ResponseOneofCase.Notice:
          Notice = other.Notice.Clone();
          break;
        case ResponseOneofCase.ServiceStatus:
          ServiceStatus = other.ServiceStatus.Clone();
          break;
        case ResponseOneofCase.Instruments:
          Instruments = other.Instruments.Clone();
          break;
        case ResponseOneofCase.InstrumentStatus:
          InstrumentStatus = other.InstrumentStatus.Clone();
          break;
        case ResponseOneofCase.SpreaderID:
          SpreaderID = other.SpreaderID;
          break;
        case ResponseOneofCase.OrderReports:
          OrderReports = other.OrderReports.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::Com.Xceder.Messages.Result result_;
    /// <summary>
    ///this is mainly for the request reply. it can be ignored for the server side initiated broadcasting messages, such as ping, price updates
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "extension" field.</summary>
    public const int ExtensionFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Extension {
      get { return responseCase_ == ResponseOneofCase.Extension ? (global::Google.Protobuf.WellKnownTypes.Any) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.Extension;
      }
    }

    /// <summary>Field number for the "queryResult" field.</summary>
    public const int QueryResultFieldNumber = 3;
    /// <summary>
    /// Reports with requested information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.QueryResult QueryResult {
      get { return responseCase_ == ResponseOneofCase.QueryResult ? (global::Com.Xceder.Messages.QueryResult) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.QueryResult;
      }
    }

    /// <summary>Field number for the "marketDatas" field.</summary>
    public const int MarketDatasFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.MarketDatas MarketDatas {
      get { return responseCase_ == ResponseOneofCase.MarketDatas ? (global::Com.Xceder.Messages.MarketDatas) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.MarketDatas;
      }
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Ping Ping {
      get { return responseCase_ == ResponseOneofCase.Ping ? (global::Com.Xceder.Messages.Ping) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.Ping;
      }
    }

    /// <summary>Field number for the "logonResult" field.</summary>
    public const int LogonResultFieldNumber = 6;
    /// <summary>
    /// Session level messages from server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.LogonResult LogonResult {
      get { return responseCase_ == ResponseOneofCase.LogonResult ? (global::Com.Xceder.Messages.LogonResult) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.LogonResult;
      }
    }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.NoticeMessages Notice {
      get { return responseCase_ == ResponseOneofCase.Notice ? (global::Com.Xceder.Messages.NoticeMessages) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.Notice;
      }
    }

    /// <summary>Field number for the "serviceStatus" field.</summary>
    public const int ServiceStatusFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.ServiceStatuses ServiceStatus {
      get { return responseCase_ == ResponseOneofCase.ServiceStatus ? (global::Com.Xceder.Messages.ServiceStatuses) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.ServiceStatus;
      }
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Instruments Instruments {
      get { return responseCase_ == ResponseOneofCase.Instruments ? (global::Com.Xceder.Messages.Instruments) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.Instruments;
      }
    }

    /// <summary>Field number for the "instrumentStatus" field.</summary>
    public const int InstrumentStatusFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.InstrumentStatuses InstrumentStatus {
      get { return responseCase_ == ResponseOneofCase.InstrumentStatus ? (global::Com.Xceder.Messages.InstrumentStatuses) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.InstrumentStatus;
      }
    }

    /// <summary>Field number for the "spreaderID" field.</summary>
    public const int SpreaderIDFieldNumber = 11;
    /// <summary>
    ///this is the result for the spreader creation successfully
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SpreaderID {
      get { return responseCase_ == ResponseOneofCase.SpreaderID ? (ulong) response_ : 0UL; }
      set {
        response_ = value;
        responseCase_ = ResponseOneofCase.SpreaderID;
      }
    }

    /// <summary>Field number for the "orderReports" field.</summary>
    public const int OrderReportsFieldNumber = 12;
    /// <summary>
    ///this will be sent when the spreader leg order is submitted by server, or execution report for the order status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.OrderReports OrderReports {
      get { return responseCase_ == ResponseOneofCase.OrderReports ? (global::Com.Xceder.Messages.OrderReports) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.OrderReports;
      }
    }

    private object response_;
    /// <summary>Enum of possible cases for the "response" oneof.</summary>
    public enum ResponseOneofCase {
      None = 0,
      Extension = 2,
      QueryResult = 3,
      MarketDatas = 4,
      Ping = 5,
      LogonResult = 6,
      Notice = 7,
      ServiceStatus = 8,
      Instruments = 9,
      InstrumentStatus = 10,
      SpreaderID = 11,
      OrderReports = 12,
    }
    private ResponseOneofCase responseCase_ = ResponseOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseOneofCase ResponseCase {
      get { return responseCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      responseCase_ = ResponseOneofCase.None;
      response_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Result, other.Result)) return false;
      if (!object.Equals(Extension, other.Extension)) return false;
      if (!object.Equals(QueryResult, other.QueryResult)) return false;
      if (!object.Equals(MarketDatas, other.MarketDatas)) return false;
      if (!object.Equals(Ping, other.Ping)) return false;
      if (!object.Equals(LogonResult, other.LogonResult)) return false;
      if (!object.Equals(Notice, other.Notice)) return false;
      if (!object.Equals(ServiceStatus, other.ServiceStatus)) return false;
      if (!object.Equals(Instruments, other.Instruments)) return false;
      if (!object.Equals(InstrumentStatus, other.InstrumentStatus)) return false;
      if (SpreaderID != other.SpreaderID) return false;
      if (!object.Equals(OrderReports, other.OrderReports)) return false;
      if (ResponseCase != other.ResponseCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (result_ != null) hash ^= Result.GetHashCode();
      if (responseCase_ == ResponseOneofCase.Extension) hash ^= Extension.GetHashCode();
      if (responseCase_ == ResponseOneofCase.QueryResult) hash ^= QueryResult.GetHashCode();
      if (responseCase_ == ResponseOneofCase.MarketDatas) hash ^= MarketDatas.GetHashCode();
      if (responseCase_ == ResponseOneofCase.Ping) hash ^= Ping.GetHashCode();
      if (responseCase_ == ResponseOneofCase.LogonResult) hash ^= LogonResult.GetHashCode();
      if (responseCase_ == ResponseOneofCase.Notice) hash ^= Notice.GetHashCode();
      if (responseCase_ == ResponseOneofCase.ServiceStatus) hash ^= ServiceStatus.GetHashCode();
      if (responseCase_ == ResponseOneofCase.Instruments) hash ^= Instruments.GetHashCode();
      if (responseCase_ == ResponseOneofCase.InstrumentStatus) hash ^= InstrumentStatus.GetHashCode();
      if (responseCase_ == ResponseOneofCase.SpreaderID) hash ^= SpreaderID.GetHashCode();
      if (responseCase_ == ResponseOneofCase.OrderReports) hash ^= OrderReports.GetHashCode();
      hash ^= (int) responseCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Result);
      }
      if (responseCase_ == ResponseOneofCase.Extension) {
        output.WriteRawTag(18);
        output.WriteMessage(Extension);
      }
      if (responseCase_ == ResponseOneofCase.QueryResult) {
        output.WriteRawTag(26);
        output.WriteMessage(QueryResult);
      }
      if (responseCase_ == ResponseOneofCase.MarketDatas) {
        output.WriteRawTag(34);
        output.WriteMessage(MarketDatas);
      }
      if (responseCase_ == ResponseOneofCase.Ping) {
        output.WriteRawTag(42);
        output.WriteMessage(Ping);
      }
      if (responseCase_ == ResponseOneofCase.LogonResult) {
        output.WriteRawTag(50);
        output.WriteMessage(LogonResult);
      }
      if (responseCase_ == ResponseOneofCase.Notice) {
        output.WriteRawTag(58);
        output.WriteMessage(Notice);
      }
      if (responseCase_ == ResponseOneofCase.ServiceStatus) {
        output.WriteRawTag(66);
        output.WriteMessage(ServiceStatus);
      }
      if (responseCase_ == ResponseOneofCase.Instruments) {
        output.WriteRawTag(74);
        output.WriteMessage(Instruments);
      }
      if (responseCase_ == ResponseOneofCase.InstrumentStatus) {
        output.WriteRawTag(82);
        output.WriteMessage(InstrumentStatus);
      }
      if (responseCase_ == ResponseOneofCase.SpreaderID) {
        output.WriteRawTag(88);
        output.WriteUInt64(SpreaderID);
      }
      if (responseCase_ == ResponseOneofCase.OrderReports) {
        output.WriteRawTag(98);
        output.WriteMessage(OrderReports);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (responseCase_ == ResponseOneofCase.Extension) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extension);
      }
      if (responseCase_ == ResponseOneofCase.QueryResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryResult);
      }
      if (responseCase_ == ResponseOneofCase.MarketDatas) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MarketDatas);
      }
      if (responseCase_ == ResponseOneofCase.Ping) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ping);
      }
      if (responseCase_ == ResponseOneofCase.LogonResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LogonResult);
      }
      if (responseCase_ == ResponseOneofCase.Notice) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Notice);
      }
      if (responseCase_ == ResponseOneofCase.ServiceStatus) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceStatus);
      }
      if (responseCase_ == ResponseOneofCase.Instruments) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instruments);
      }
      if (responseCase_ == ResponseOneofCase.InstrumentStatus) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InstrumentStatus);
      }
      if (responseCase_ == ResponseOneofCase.SpreaderID) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SpreaderID);
      }
      if (responseCase_ == ResponseOneofCase.OrderReports) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OrderReports);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          result_ = new global::Com.Xceder.Messages.Result();
        }
        Result.MergeFrom(other.Result);
      }
      switch (other.ResponseCase) {
        case ResponseOneofCase.Extension:
          Extension = other.Extension;
          break;
        case ResponseOneofCase.QueryResult:
          QueryResult = other.QueryResult;
          break;
        case ResponseOneofCase.MarketDatas:
          MarketDatas = other.MarketDatas;
          break;
        case ResponseOneofCase.Ping:
          Ping = other.Ping;
          break;
        case ResponseOneofCase.LogonResult:
          LogonResult = other.LogonResult;
          break;
        case ResponseOneofCase.Notice:
          Notice = other.Notice;
          break;
        case ResponseOneofCase.ServiceStatus:
          ServiceStatus = other.ServiceStatus;
          break;
        case ResponseOneofCase.Instruments:
          Instruments = other.Instruments;
          break;
        case ResponseOneofCase.InstrumentStatus:
          InstrumentStatus = other.InstrumentStatus;
          break;
        case ResponseOneofCase.SpreaderID:
          SpreaderID = other.SpreaderID;
          break;
        case ResponseOneofCase.OrderReports:
          OrderReports = other.OrderReports;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (result_ == null) {
              result_ = new global::Com.Xceder.Messages.Result();
            }
            input.ReadMessage(result_);
            break;
          }
          case 18: {
            global::Google.Protobuf.WellKnownTypes.Any subBuilder = new global::Google.Protobuf.WellKnownTypes.Any();
            if (responseCase_ == ResponseOneofCase.Extension) {
              subBuilder.MergeFrom(Extension);
            }
            input.ReadMessage(subBuilder);
            Extension = subBuilder;
            break;
          }
          case 26: {
            global::Com.Xceder.Messages.QueryResult subBuilder = new global::Com.Xceder.Messages.QueryResult();
            if (responseCase_ == ResponseOneofCase.QueryResult) {
              subBuilder.MergeFrom(QueryResult);
            }
            input.ReadMessage(subBuilder);
            QueryResult = subBuilder;
            break;
          }
          case 34: {
            global::Com.Xceder.Messages.MarketDatas subBuilder = new global::Com.Xceder.Messages.MarketDatas();
            if (responseCase_ == ResponseOneofCase.MarketDatas) {
              subBuilder.MergeFrom(MarketDatas);
            }
            input.ReadMessage(subBuilder);
            MarketDatas = subBuilder;
            break;
          }
          case 42: {
            global::Com.Xceder.Messages.Ping subBuilder = new global::Com.Xceder.Messages.Ping();
            if (responseCase_ == ResponseOneofCase.Ping) {
              subBuilder.MergeFrom(Ping);
            }
            input.ReadMessage(subBuilder);
            Ping = subBuilder;
            break;
          }
          case 50: {
            global::Com.Xceder.Messages.LogonResult subBuilder = new global::Com.Xceder.Messages.LogonResult();
            if (responseCase_ == ResponseOneofCase.LogonResult) {
              subBuilder.MergeFrom(LogonResult);
            }
            input.ReadMessage(subBuilder);
            LogonResult = subBuilder;
            break;
          }
          case 58: {
            global::Com.Xceder.Messages.NoticeMessages subBuilder = new global::Com.Xceder.Messages.NoticeMessages();
            if (responseCase_ == ResponseOneofCase.Notice) {
              subBuilder.MergeFrom(Notice);
            }
            input.ReadMessage(subBuilder);
            Notice = subBuilder;
            break;
          }
          case 66: {
            global::Com.Xceder.Messages.ServiceStatuses subBuilder = new global::Com.Xceder.Messages.ServiceStatuses();
            if (responseCase_ == ResponseOneofCase.ServiceStatus) {
              subBuilder.MergeFrom(ServiceStatus);
            }
            input.ReadMessage(subBuilder);
            ServiceStatus = subBuilder;
            break;
          }
          case 74: {
            global::Com.Xceder.Messages.Instruments subBuilder = new global::Com.Xceder.Messages.Instruments();
            if (responseCase_ == ResponseOneofCase.Instruments) {
              subBuilder.MergeFrom(Instruments);
            }
            input.ReadMessage(subBuilder);
            Instruments = subBuilder;
            break;
          }
          case 82: {
            global::Com.Xceder.Messages.InstrumentStatuses subBuilder = new global::Com.Xceder.Messages.InstrumentStatuses();
            if (responseCase_ == ResponseOneofCase.InstrumentStatus) {
              subBuilder.MergeFrom(InstrumentStatus);
            }
            input.ReadMessage(subBuilder);
            InstrumentStatus = subBuilder;
            break;
          }
          case 88: {
            SpreaderID = input.ReadUInt64();
            break;
          }
          case 98: {
            global::Com.Xceder.Messages.OrderReports subBuilder = new global::Com.Xceder.Messages.OrderReports();
            if (responseCase_ == ResponseOneofCase.OrderReports) {
              subBuilder.MergeFrom(OrderReports);
            }
            input.ReadMessage(subBuilder);
            OrderReports = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Exchange : pb::IMessage<Exchange> {
    private static readonly pb::MessageParser<Exchange> _parser = new pb::MessageParser<Exchange>(() => new Exchange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Exchange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exchange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exchange(Exchange other) : this() {
      code_ = other.code_;
      name_ = other.name_;
      timezone_ = other.timezone_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exchange Clone() {
      return new Exchange(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Com.Xceder.Messages.Exchange.Types.EXCHANGE code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Exchange.Types.EXCHANGE Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 3;
    private int timezone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timezone {
      get { return timezone_; }
      set {
        timezone_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Exchange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Exchange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Name != other.Name) return false;
      if (Timezone != other.Timezone) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Timezone != 0) hash ^= Timezone.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Timezone != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Timezone);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Timezone != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Timezone);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Exchange other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Timezone != 0) {
        Timezone = other.Timezone;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code_ = (global::Com.Xceder.Messages.Exchange.Types.EXCHANGE) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Timezone = input.ReadSInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Exchange message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EXCHANGE {
        /// <summary>
        ///means not specified
        /// </summary>
        [pbr::OriginalName("NON_EXCH")] NonExch = 0,
        [pbr::OriginalName("OTC")] Otc = 1,
        /// <summary>
        ////中国金融期货交易所
        /// </summary>
        [pbr::OriginalName("CCFX")] Ccfx = 2,
        /// <summary>
        ///SHANGHAI GOLD EXCHANGE
        /// </summary>
        [pbr::OriginalName("SGEX")] Sgex = 3,
        /// <summary>
        ///CHINA FOREIGN EXCHANGE TRADE SYSTEM
        /// </summary>
        [pbr::OriginalName("XCFE")] Xcfe = 4,
        /// <summary>
        ////大连商品交易所
        /// </summary>
        [pbr::OriginalName("XDCE")] Xdce = 5,
        /// <summary>
        ////上海期货交易所
        /// </summary>
        [pbr::OriginalName("XSGE")] Xsge = 6,
        /// <summary>
        ///SHANGHAI INTERNATIONAL ENERGY EXCHANGE
        /// </summary>
        [pbr::OriginalName("XINE")] Xine = 7,
        /// <summary>
        ///SHENZHEN STOCK EXCHANGE
        /// </summary>
        [pbr::OriginalName("XSHE")] Xshe = 8,
        /// <summary>
        ///SHENZHEN STOCK EXCHANGE - SHENZHEN - HONG KONG STOCK CONNECT
        /// </summary>
        [pbr::OriginalName("XSEC")] Xsec = 9,
        /// <summary>
        ///SHANGHAI STOCK EXCHANGE
        /// </summary>
        [pbr::OriginalName("XSHG")] Xshg = 10,
        /// <summary>
        ///SHANGHAI STOCK EXCHANGE - SHANGHAI - HONG KONG STOCK CONNECT
        /// </summary>
        [pbr::OriginalName("XSSC")] Xssc = 11,
        /// <summary>
        ////郑州商品交易所
        /// </summary>
        [pbr::OriginalName("XZCE")] Xzce = 12,
        /// <summary>
        ///SINGAPORE MERCANTILE EXCHANGE PTE LTD
        /// </summary>
        [pbr::OriginalName("SMEX")] Smex = 13,
        /// <summary>
        ///SINGAPORE EXCHANGE
        /// </summary>
        [pbr::OriginalName("XSES")] Xses = 14,
        /// <summary>
        ///SINGAPORE COMMODITY EXCHANGE
        /// </summary>
        [pbr::OriginalName("XSCE")] Xsce = 15,
        /// <summary>
        ///SINGAPORE EXCHANGE DERIVATIVES CLEARING LIMITED
        /// </summary>
        [pbr::OriginalName("XSIM")] Xsim = 16,
        /// <summary>
        ///CHICAGO MERCANTILE EXCHANGE
        /// </summary>
        [pbr::OriginalName("XCME")] Xcme = 17,
        /// <summary>
        ///CME SWAPS MARKETS (CBOT)
        /// </summary>
        [pbr::OriginalName("CBTS")] Cbts = 18,
        /// <summary>
        ///CME SWAPS MARKETS (COMEX)
        /// </summary>
        [pbr::OriginalName("CECS")] Cecs = 19,
        /// <summary>
        ///CME SWAPS MARKETS (CME)
        /// </summary>
        [pbr::OriginalName("CMES")] Cmes = 20,
        /// <summary>
        ///CHICAGO MERCANTILE EXCHANGE (FLOOR)
        /// </summary>
        [pbr::OriginalName("FCME")] Fcme = 21,
        /// <summary>
        ///CME GLOBEX
        /// </summary>
        [pbr::OriginalName("GLBX")] Glbx = 22,
        /// <summary>
        ///INTERNATIONAL MONETARY MARKET
        /// </summary>
        [pbr::OriginalName("XIMM")] Ximm = 23,
        /// <summary>
        ///INDEX AND OPTIONS MARKET
        /// </summary>
        [pbr::OriginalName("XIOM")] Xiom = 24,
        /// <summary>
        ///CURRENEX
        /// </summary>
        [pbr::OriginalName("XCUR")] Xcur = 25,
        /// <summary>
        ///ICAP EUROPE
        /// </summary>
        [pbr::OriginalName("ICAP")] Icap = 26,
        /// <summary>
        ///BROKERTEC
        /// </summary>
        [pbr::OriginalName("BTEE")] Btee = 27,
        /// <summary>
        ///BM&amp;FBOVESPA S.A. - BOLSA DE VALORES, MERCADORIAS E FUTUROS
        /// </summary>
        [pbr::OriginalName("BVMF")] Bvmf = 28,
        /// <summary>
        ///CHICAGO BOARD OPTIONS EXCHANGE
        /// </summary>
        [pbr::OriginalName("XCBO")] Xcbo = 29,
        /// <summary>
        ///CBOE FUTURES EXCHANGE
        /// </summary>
        [pbr::OriginalName("XCBF")] Xcbf = 30,
        /// <summary>
        ///CHICAGO BOARD OF TRADE
        /// </summary>
        [pbr::OriginalName("XCBT")] Xcbt = 31,
        /// <summary>
        ///LONDON METAL EXCHANGE
        /// </summary>
        [pbr::OriginalName("XLME")] Xlme = 32,
        /// <summary>
        ///LONDON STOCK EXCHANGE
        /// </summary>
        [pbr::OriginalName("XLON")] Xlon = 34,
        /// <summary>
        ///LONDON STOCK EXCHANGE - DERIVATIVES MARKET
        /// </summary>
        [pbr::OriginalName("XLOD")] Xlod = 35,
        /// <summary>
        ///JAPAN EXCHANGE GROUP
        /// </summary>
        [pbr::OriginalName("XJPX")] Xjpx = 36,
        /// <summary>
        ///OSAKA EXCHANGE
        /// </summary>
        [pbr::OriginalName("XOSE")] Xose = 37,
        /// <summary>
        ///OSAKA EXCHANGE J-NET
        /// </summary>
        [pbr::OriginalName("XOSJ")] Xosj = 38,
        /// <summary>
        ///TOKYO STOCK EXCHANGE
        /// </summary>
        [pbr::OriginalName("XTKS")] Xtks = 39,
        /// <summary>
        ///TOKYO FINANCIAL  EXCHANGE
        /// </summary>
        [pbr::OriginalName("XTFF")] Xtff = 40,
        /// <summary>
        ///TOKYO COMMODITY EXCHANGE
        /// </summary>
        [pbr::OriginalName("XTKT")] Xtkt = 41,
        /// <summary>
        ///ASX - ALL MARKETS
        /// </summary>
        [pbr::OriginalName("XASX")] Xasx = 42,
        /// <summary>
        ///ASX - TRADE24
        /// </summary>
        [pbr::OriginalName("XSFE")] Xsfe = 43,
        /// <summary>
        ///Eurex Exchange
        /// </summary>
        [pbr::OriginalName("XEUR")] Xeur = 44,
        /// <summary>
        ///EUROPEAN CLIMATE EXCHANGE
        /// </summary>
        [pbr::OriginalName("ECXE")] Ecxe = 45,
        /// <summary>
        ///INTERCONTINENTAL EXCHANGE
        /// </summary>
        [pbr::OriginalName("IEPA")] Iepa = 46,
        /// <summary>
        ///TT
        ///Icap Electronic Broking (Us)
        /// </summary>
        [pbr::OriginalName("BTec")] Btec = 48,
        [pbr::OriginalName("ICE_IPE")] IceIpe = 49,
        [pbr::OriginalName("NYSE_Liffe")] NyseLiffe = 50,
        [pbr::OriginalName("Eris_GovEx")] ErisGovEx = 51,
        [pbr::OriginalName("eSpeed")] ESpeed = 52,
        [pbr::OriginalName("Eurex")] Eurex = 53,
        [pbr::OriginalName("CME")] Cme = 54,
        [pbr::OriginalName("MEFF")] Meff = 55,
        [pbr::OriginalName("Montreal")] Montreal = 56,
        [pbr::OriginalName("MX")] Mx = 57,
        [pbr::OriginalName("NASDAQ_OMX_EU")] NasdaqOmxEu = 58,
        [pbr::OriginalName("eCBOT")] ECbot = 59,
        [pbr::OriginalName("EBS")] Ebs = 60,
        [pbr::OriginalName("OSE")] Ose = 61,
        [pbr::OriginalName("CBOT")] Cbot = 62,
        [pbr::OriginalName("SGX")] Sgx = 63,
        [pbr::OriginalName("LME")] Lme = 64,
        [pbr::OriginalName("SFE")] Sfe = 65,
        [pbr::OriginalName("LSE")] Lse = 66,
        [pbr::OriginalName("TOCOM")] Tocom = 67,
        [pbr::OriginalName("TFX")] Tfx = 68,
        [pbr::OriginalName("CFE")] Cfe = 69,
        [pbr::OriginalName("NYSE_Liffe_US")] NyseLiffeUs = 70,
        [pbr::OriginalName("TTSIM")] Ttsim = 71,
        [pbr::OriginalName("NFX")] Nfx = 72,
        [pbr::OriginalName("HKEx")] Hkex = 73,
        [pbr::OriginalName("GMEX")] Gmex = 74,
        [pbr::OriginalName("FIX")] Fix = 75,
        [pbr::OriginalName("TSE")] Tse = 76,
      }

    }
    #endregion

  }

  public sealed partial class DeviceToken : pb::IMessage<DeviceToken> {
    private static readonly pb::MessageParser<DeviceToken> _parser = new pb::MessageParser<DeviceToken>(() => new DeviceToken());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceToken> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceToken() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceToken(DeviceToken other) : this() {
      type_ = other.type_;
      token_ = other.token_;
      updateTimeUTC_ = other.updateTimeUTC_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceToken Clone() {
      return new DeviceToken(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Com.Xceder.Messages.DeviceToken.Types.DEVICE_TYPE type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.DeviceToken.Types.DEVICE_TYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateTimeUTC" field.</summary>
    public const int UpdateTimeUTCFieldNumber = 3;
    private ulong updateTimeUTC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UpdateTimeUTC {
      get { return updateTimeUTC_; }
      set {
        updateTimeUTC_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceToken);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceToken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Token != other.Token) return false;
      if (UpdateTimeUTC != other.UpdateTimeUTC) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (UpdateTimeUTC != 0UL) hash ^= UpdateTimeUTC.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (UpdateTimeUTC != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(UpdateTimeUTC);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (UpdateTimeUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UpdateTimeUTC);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceToken other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.UpdateTimeUTC != 0UL) {
        UpdateTimeUTC = other.UpdateTimeUTC;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Com.Xceder.Messages.DeviceToken.Types.DEVICE_TYPE) input.ReadEnum();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 24: {
            UpdateTimeUTC = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DeviceToken message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DEVICE_TYPE {
        [pbr::OriginalName("UNKNOW_DEVICE")] UnknowDevice = 0,
        [pbr::OriginalName("IPHONE")] Iphone = 1,
        [pbr::OriginalName("IPAD")] Ipad = 2,
        [pbr::OriginalName("ANDROID")] Android = 3,
        [pbr::OriginalName("PC")] Pc = 4,
        [pbr::OriginalName("MAC")] Mac = 5,
      }

    }
    #endregion

  }

  public sealed partial class Account : pb::IMessage<Account> {
    private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Account> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account(Account other) : this() {
      Extension = other.extension_ != null ? other.Extension.Clone() : null;
      accountID_ = other.accountID_;
      userID_ = other.userID_;
      password_ = other.password_;
      Particular = other.particular_ != null ? other.Particular.Clone() : null;
      role_ = other.role_;
      services_ = other.services_;
      updateUTC_ = other.updateUTC_;
      status_ = other.status_;
      LoginRecord = other.loginRecord_ != null ? other.LoginRecord.Clone() : null;
      PrevLoginRecord = other.prevLoginRecord_ != null ? other.PrevLoginRecord.Clone() : null;
      tradingRuleUpdateTime_ = other.tradingRuleUpdateTime_;
      allowedConnection_ = other.allowedConnection_;
      loginMode_ = other.loginMode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account Clone() {
      return new Account(this);
    }

    /// <summary>Field number for the "extension" field.</summary>
    public const int ExtensionFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Any extension_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Extension {
      get { return extension_; }
      set {
        extension_ = value;
      }
    }

    /// <summary>Field number for the "accountID" field.</summary>
    public const int AccountIDFieldNumber = 2;
    private uint accountID_;
    /// <summary>
    ///it is server side created account ID, when register new user, it should be just 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountID {
      get { return accountID_; }
      set {
        accountID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private string userID_ = "";
    /// <summary>
    ///client side specified user ID. it will be used as login user name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserID {
      get { return userID_; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 4;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "particular" field.</summary>
    public const int ParticularFieldNumber = 5;
    private global::Com.Xceder.Messages.Particular particular_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Particular Particular {
      get { return particular_; }
      set {
        particular_ = value;
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 6;
    private global::Com.Xceder.Messages.Account.Types.ROLE role_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Account.Types.ROLE Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "services" field.</summary>
    public const int ServicesFieldNumber = 7;
    private uint services_;
    /// <summary>
    /// the enum Service.SERVICE bits mask.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Services {
      get { return services_; }
      set {
        services_ = value;
      }
    }

    /// <summary>Field number for the "updateUTC" field.</summary>
    public const int UpdateUTCFieldNumber = 8;
    private ulong updateUTC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UpdateUTC {
      get { return updateUTC_; }
      set {
        updateUTC_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 9;
    private global::Com.Xceder.Messages.Account.Types.STATUS status_ = 0;
    /// <summary>
    ///for new client, it should be UNVERIFIED
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Account.Types.STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "loginRecord" field.</summary>
    public const int LoginRecordFieldNumber = 10;
    private global::Com.Xceder.Messages.LoginRecord loginRecord_;
    /// <summary>
    ///it is the server side recorded current login record
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.LoginRecord LoginRecord {
      get { return loginRecord_; }
      set {
        loginRecord_ = value;
      }
    }

    /// <summary>Field number for the "prevLoginRecord" field.</summary>
    public const int PrevLoginRecordFieldNumber = 11;
    private global::Com.Xceder.Messages.LoginRecord prevLoginRecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.LoginRecord PrevLoginRecord {
      get { return prevLoginRecord_; }
      set {
        prevLoginRecord_ = value;
      }
    }

    /// <summary>Field number for the "tradingRuleUpdateTime" field.</summary>
    public const int TradingRuleUpdateTimeFieldNumber = 12;
    private ulong tradingRuleUpdateTime_;
    /// <summary>
    ///the latest account trading rule update timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TradingRuleUpdateTime {
      get { return tradingRuleUpdateTime_; }
      set {
        tradingRuleUpdateTime_ = value;
      }
    }

    /// <summary>Field number for the "allowedConnection" field.</summary>
    public const int AllowedConnectionFieldNumber = 13;
    private global::Com.Xceder.Messages.Account.Types.CONNECTION allowedConnection_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Account.Types.CONNECTION AllowedConnection {
      get { return allowedConnection_; }
      set {
        allowedConnection_ = value;
      }
    }

    /// <summary>Field number for the "loginMode" field.</summary>
    public const int LoginModeFieldNumber = 14;
    private global::Com.Xceder.Messages.Account.Types.LOGIN_MODE loginMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Account.Types.LOGIN_MODE LoginMode {
      get { return loginMode_; }
      set {
        loginMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Account);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Account other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Extension, other.Extension)) return false;
      if (AccountID != other.AccountID) return false;
      if (UserID != other.UserID) return false;
      if (Password != other.Password) return false;
      if (!object.Equals(Particular, other.Particular)) return false;
      if (Role != other.Role) return false;
      if (Services != other.Services) return false;
      if (UpdateUTC != other.UpdateUTC) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(LoginRecord, other.LoginRecord)) return false;
      if (!object.Equals(PrevLoginRecord, other.PrevLoginRecord)) return false;
      if (TradingRuleUpdateTime != other.TradingRuleUpdateTime) return false;
      if (AllowedConnection != other.AllowedConnection) return false;
      if (LoginMode != other.LoginMode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (extension_ != null) hash ^= Extension.GetHashCode();
      if (AccountID != 0) hash ^= AccountID.GetHashCode();
      if (UserID.Length != 0) hash ^= UserID.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (particular_ != null) hash ^= Particular.GetHashCode();
      if (Role != 0) hash ^= Role.GetHashCode();
      if (Services != 0) hash ^= Services.GetHashCode();
      if (UpdateUTC != 0UL) hash ^= UpdateUTC.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (loginRecord_ != null) hash ^= LoginRecord.GetHashCode();
      if (prevLoginRecord_ != null) hash ^= PrevLoginRecord.GetHashCode();
      if (TradingRuleUpdateTime != 0UL) hash ^= TradingRuleUpdateTime.GetHashCode();
      if (AllowedConnection != 0) hash ^= AllowedConnection.GetHashCode();
      if (LoginMode != 0) hash ^= LoginMode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (extension_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Extension);
      }
      if (AccountID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AccountID);
      }
      if (UserID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserID);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Password);
      }
      if (particular_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Particular);
      }
      if (Role != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Role);
      }
      if (Services != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Services);
      }
      if (UpdateUTC != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(UpdateUTC);
      }
      if (Status != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Status);
      }
      if (loginRecord_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(LoginRecord);
      }
      if (prevLoginRecord_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(PrevLoginRecord);
      }
      if (TradingRuleUpdateTime != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(TradingRuleUpdateTime);
      }
      if (AllowedConnection != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) AllowedConnection);
      }
      if (LoginMode != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) LoginMode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (extension_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extension);
      }
      if (AccountID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountID);
      }
      if (UserID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (particular_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Particular);
      }
      if (Role != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Role);
      }
      if (Services != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Services);
      }
      if (UpdateUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UpdateUTC);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (loginRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginRecord);
      }
      if (prevLoginRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrevLoginRecord);
      }
      if (TradingRuleUpdateTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TradingRuleUpdateTime);
      }
      if (AllowedConnection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AllowedConnection);
      }
      if (LoginMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginMode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Account other) {
      if (other == null) {
        return;
      }
      if (other.extension_ != null) {
        if (extension_ == null) {
          extension_ = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        Extension.MergeFrom(other.Extension);
      }
      if (other.AccountID != 0) {
        AccountID = other.AccountID;
      }
      if (other.UserID.Length != 0) {
        UserID = other.UserID;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.particular_ != null) {
        if (particular_ == null) {
          particular_ = new global::Com.Xceder.Messages.Particular();
        }
        Particular.MergeFrom(other.Particular);
      }
      if (other.Role != 0) {
        Role = other.Role;
      }
      if (other.Services != 0) {
        Services = other.Services;
      }
      if (other.UpdateUTC != 0UL) {
        UpdateUTC = other.UpdateUTC;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.loginRecord_ != null) {
        if (loginRecord_ == null) {
          loginRecord_ = new global::Com.Xceder.Messages.LoginRecord();
        }
        LoginRecord.MergeFrom(other.LoginRecord);
      }
      if (other.prevLoginRecord_ != null) {
        if (prevLoginRecord_ == null) {
          prevLoginRecord_ = new global::Com.Xceder.Messages.LoginRecord();
        }
        PrevLoginRecord.MergeFrom(other.PrevLoginRecord);
      }
      if (other.TradingRuleUpdateTime != 0UL) {
        TradingRuleUpdateTime = other.TradingRuleUpdateTime;
      }
      if (other.AllowedConnection != 0) {
        AllowedConnection = other.AllowedConnection;
      }
      if (other.LoginMode != 0) {
        LoginMode = other.LoginMode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (extension_ == null) {
              extension_ = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(extension_);
            break;
          }
          case 16: {
            AccountID = input.ReadUInt32();
            break;
          }
          case 26: {
            UserID = input.ReadString();
            break;
          }
          case 34: {
            Password = input.ReadString();
            break;
          }
          case 42: {
            if (particular_ == null) {
              particular_ = new global::Com.Xceder.Messages.Particular();
            }
            input.ReadMessage(particular_);
            break;
          }
          case 48: {
            role_ = (global::Com.Xceder.Messages.Account.Types.ROLE) input.ReadEnum();
            break;
          }
          case 56: {
            Services = input.ReadUInt32();
            break;
          }
          case 64: {
            UpdateUTC = input.ReadUInt64();
            break;
          }
          case 72: {
            status_ = (global::Com.Xceder.Messages.Account.Types.STATUS) input.ReadEnum();
            break;
          }
          case 82: {
            if (loginRecord_ == null) {
              loginRecord_ = new global::Com.Xceder.Messages.LoginRecord();
            }
            input.ReadMessage(loginRecord_);
            break;
          }
          case 90: {
            if (prevLoginRecord_ == null) {
              prevLoginRecord_ = new global::Com.Xceder.Messages.LoginRecord();
            }
            input.ReadMessage(prevLoginRecord_);
            break;
          }
          case 96: {
            TradingRuleUpdateTime = input.ReadUInt64();
            break;
          }
          case 104: {
            allowedConnection_ = (global::Com.Xceder.Messages.Account.Types.CONNECTION) input.ReadEnum();
            break;
          }
          case 112: {
            loginMode_ = (global::Com.Xceder.Messages.Account.Types.LOGIN_MODE) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Account message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum LOGIN_MODE {
        [pbr::OriginalName("PASSWORD")] Password = 0,
        [pbr::OriginalName("OATH2")] Oath2 = 1,
        [pbr::OriginalName("OTP")] Otp = 2,
      }

      public enum ROLE {
        /// <summary>
        /// Anonymouse users
        /// </summary>
        [pbr::OriginalName("ANONYMOUSE")] Anonymouse = 0,
        /// <summary>
        /// normal client
        /// </summary>
        [pbr::OriginalName("CLIENT")] Client = 1,
        /// <summary>
        /// trading representative, such as dealers
        /// </summary>
        [pbr::OriginalName("TR")] Tr = 2,
        /// <summary>
        /// administrator
        /// </summary>
        [pbr::OriginalName("ADMIN")] Admin = 3,
        /// <summary>
        /// For demostration purpose
        /// </summary>
        [pbr::OriginalName("DEMO")] Demo = 4,
        /// <summary>
        /// applications, such as computer trading system
        /// </summary>
        [pbr::OriginalName("APPS")] Apps = 5,
      }

      public enum CONNECTION {
        [pbr::OriginalName("SIMULATION")] Simulation = 0,
        [pbr::OriginalName("LIVE")] Live = 1,
        [pbr::OriginalName("ALL")] All = 2,
      }

      public enum STATUS {
        [pbr::OriginalName("UNVERIFIED")] Unverified = 0,
        [pbr::OriginalName("VERIFIED")] Verified = 1,
        [pbr::OriginalName("SUSPEND")] Suspend = 2,
      }

    }
    #endregion

  }

  public sealed partial class Particular : pb::IMessage<Particular> {
    private static readonly pb::MessageParser<Particular> _parser = new pb::MessageParser<Particular>(() => new Particular());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Particular> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Particular() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Particular(Particular other) : this() {
      firstName_ = other.firstName_;
      surName_ = other.surName_;
      email_ = other.email_;
      phone_ = other.phone_;
      country_ = other.country_;
      language_ = other.language_;
      timezoneOffset_ = other.timezoneOffset_;
      gender_ = other.gender_;
      signUpUTC_ = other.signUpUTC_;
      emailVerifiedUTC_ = other.emailVerifiedUTC_;
      phoneVerifiedUTC_ = other.phoneVerifiedUTC_;
      mobileDeviceTokens_ = other.mobileDeviceTokens_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Particular Clone() {
      return new Particular(this);
    }

    /// <summary>Field number for the "firstName" field.</summary>
    public const int FirstNameFieldNumber = 1;
    private string firstName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstName {
      get { return firstName_; }
      set {
        firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "surName" field.</summary>
    public const int SurNameFieldNumber = 2;
    private string surName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SurName {
      get { return surName_; }
      set {
        surName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 3;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "phone" field.</summary>
    public const int PhoneFieldNumber = 4;
    private string phone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phone {
      get { return phone_; }
      set {
        phone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 5;
    private string country_ = "";
    /// <summary>
    ///ISO 3166 2-letter code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Country {
      get { return country_; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 6;
    private string language_ = "";
    /// <summary>
    ///ISO 639 alpha-2 language code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timezoneOffset" field.</summary>
    public const int TimezoneOffsetFieldNumber = 7;
    private int timezoneOffset_;
    /// <summary>
    ///in minutes, default, SG time zone
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimezoneOffset {
      get { return timezoneOffset_; }
      set {
        timezoneOffset_ = value;
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 8;
    private global::Com.Xceder.Messages.Particular.Types.GENDER gender_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Particular.Types.GENDER Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "signUpUTC" field.</summary>
    public const int SignUpUTCFieldNumber = 9;
    private ulong signUpUTC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SignUpUTC {
      get { return signUpUTC_; }
      set {
        signUpUTC_ = value;
      }
    }

    /// <summary>Field number for the "emailVerifiedUTC" field.</summary>
    public const int EmailVerifiedUTCFieldNumber = 10;
    private ulong emailVerifiedUTC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EmailVerifiedUTC {
      get { return emailVerifiedUTC_; }
      set {
        emailVerifiedUTC_ = value;
      }
    }

    /// <summary>Field number for the "phoneVerifiedUTC" field.</summary>
    public const int PhoneVerifiedUTCFieldNumber = 11;
    private ulong phoneVerifiedUTC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PhoneVerifiedUTC {
      get { return phoneVerifiedUTC_; }
      set {
        phoneVerifiedUTC_ = value;
      }
    }

    /// <summary>Field number for the "mobileDeviceTokens" field.</summary>
    public const int MobileDeviceTokensFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Com.Xceder.Messages.DeviceToken> _repeated_mobileDeviceTokens_codec
        = pb::FieldCodec.ForMessage(98, global::Com.Xceder.Messages.DeviceToken.Parser);
    private readonly pbc::RepeatedField<global::Com.Xceder.Messages.DeviceToken> mobileDeviceTokens_ = new pbc::RepeatedField<global::Com.Xceder.Messages.DeviceToken>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Xceder.Messages.DeviceToken> MobileDeviceTokens {
      get { return mobileDeviceTokens_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Particular);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Particular other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FirstName != other.FirstName) return false;
      if (SurName != other.SurName) return false;
      if (Email != other.Email) return false;
      if (Phone != other.Phone) return false;
      if (Country != other.Country) return false;
      if (Language != other.Language) return false;
      if (TimezoneOffset != other.TimezoneOffset) return false;
      if (Gender != other.Gender) return false;
      if (SignUpUTC != other.SignUpUTC) return false;
      if (EmailVerifiedUTC != other.EmailVerifiedUTC) return false;
      if (PhoneVerifiedUTC != other.PhoneVerifiedUTC) return false;
      if(!mobileDeviceTokens_.Equals(other.mobileDeviceTokens_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
      if (SurName.Length != 0) hash ^= SurName.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Phone.Length != 0) hash ^= Phone.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (TimezoneOffset != 0) hash ^= TimezoneOffset.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      if (SignUpUTC != 0UL) hash ^= SignUpUTC.GetHashCode();
      if (EmailVerifiedUTC != 0UL) hash ^= EmailVerifiedUTC.GetHashCode();
      if (PhoneVerifiedUTC != 0UL) hash ^= PhoneVerifiedUTC.GetHashCode();
      hash ^= mobileDeviceTokens_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FirstName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FirstName);
      }
      if (SurName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SurName);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Email);
      }
      if (Phone.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Phone);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Country);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Language);
      }
      if (TimezoneOffset != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(TimezoneOffset);
      }
      if (Gender != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Gender);
      }
      if (SignUpUTC != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(SignUpUTC);
      }
      if (EmailVerifiedUTC != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(EmailVerifiedUTC);
      }
      if (PhoneVerifiedUTC != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(PhoneVerifiedUTC);
      }
      mobileDeviceTokens_.WriteTo(output, _repeated_mobileDeviceTokens_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FirstName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
      }
      if (SurName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SurName);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Phone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phone);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (TimezoneOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TimezoneOffset);
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Gender);
      }
      if (SignUpUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SignUpUTC);
      }
      if (EmailVerifiedUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EmailVerifiedUTC);
      }
      if (PhoneVerifiedUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PhoneVerifiedUTC);
      }
      size += mobileDeviceTokens_.CalculateSize(_repeated_mobileDeviceTokens_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Particular other) {
      if (other == null) {
        return;
      }
      if (other.FirstName.Length != 0) {
        FirstName = other.FirstName;
      }
      if (other.SurName.Length != 0) {
        SurName = other.SurName;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Phone.Length != 0) {
        Phone = other.Phone;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      if (other.TimezoneOffset != 0) {
        TimezoneOffset = other.TimezoneOffset;
      }
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      if (other.SignUpUTC != 0UL) {
        SignUpUTC = other.SignUpUTC;
      }
      if (other.EmailVerifiedUTC != 0UL) {
        EmailVerifiedUTC = other.EmailVerifiedUTC;
      }
      if (other.PhoneVerifiedUTC != 0UL) {
        PhoneVerifiedUTC = other.PhoneVerifiedUTC;
      }
      mobileDeviceTokens_.Add(other.mobileDeviceTokens_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FirstName = input.ReadString();
            break;
          }
          case 18: {
            SurName = input.ReadString();
            break;
          }
          case 26: {
            Email = input.ReadString();
            break;
          }
          case 34: {
            Phone = input.ReadString();
            break;
          }
          case 42: {
            Country = input.ReadString();
            break;
          }
          case 50: {
            Language = input.ReadString();
            break;
          }
          case 56: {
            TimezoneOffset = input.ReadSInt32();
            break;
          }
          case 64: {
            gender_ = (global::Com.Xceder.Messages.Particular.Types.GENDER) input.ReadEnum();
            break;
          }
          case 72: {
            SignUpUTC = input.ReadUInt64();
            break;
          }
          case 80: {
            EmailVerifiedUTC = input.ReadUInt64();
            break;
          }
          case 88: {
            PhoneVerifiedUTC = input.ReadUInt64();
            break;
          }
          case 98: {
            mobileDeviceTokens_.AddEntriesFrom(input, _repeated_mobileDeviceTokens_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Particular message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum GENDER {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("MALE")] Male = 1,
        [pbr::OriginalName("FEMALE")] Female = 2,
      }

    }
    #endregion

  }

  public sealed partial class LoginRecord : pb::IMessage<LoginRecord> {
    private static readonly pb::MessageParser<LoginRecord> _parser = new pb::MessageParser<LoginRecord>(() => new LoginRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRecord(LoginRecord other) : this() {
      authBy_ = other.authBy_;
      loginUTC_ = other.loginUTC_;
      loginFrom_ = other.loginFrom_;
      loginDevice_ = other.loginDevice_;
      LoginResult = other.loginResult_ != null ? other.LoginResult.Clone() : null;
      logoutUTC_ = other.logoutUTC_;
      logoutRemark_ = other.logoutRemark_;
      prevFailCount_ = other.prevFailCount_;
      oTP_ = other.oTP_;
      clientApp_ = other.clientApp_;
      pushingDelay_ = other.pushingDelay_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRecord Clone() {
      return new LoginRecord(this);
    }

    /// <summary>Field number for the "authBy" field.</summary>
    public const int AuthByFieldNumber = 1;
    private string authBy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthBy {
      get { return authBy_; }
      set {
        authBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loginUTC" field.</summary>
    public const int LoginUTCFieldNumber = 2;
    private ulong loginUTC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LoginUTC {
      get { return loginUTC_; }
      set {
        loginUTC_ = value;
      }
    }

    /// <summary>Field number for the "loginFrom" field.</summary>
    public const int LoginFromFieldNumber = 3;
    private string loginFrom_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginFrom {
      get { return loginFrom_; }
      set {
        loginFrom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loginDevice" field.</summary>
    public const int LoginDeviceFieldNumber = 4;
    private string loginDevice_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginDevice {
      get { return loginDevice_; }
      set {
        loginDevice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loginResult" field.</summary>
    public const int LoginResultFieldNumber = 5;
    private global::Com.Xceder.Messages.Result loginResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Result LoginResult {
      get { return loginResult_; }
      set {
        loginResult_ = value;
      }
    }

    /// <summary>Field number for the "logoutUTC" field.</summary>
    public const int LogoutUTCFieldNumber = 6;
    private ulong logoutUTC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LogoutUTC {
      get { return logoutUTC_; }
      set {
        logoutUTC_ = value;
      }
    }

    /// <summary>Field number for the "logoutRemark" field.</summary>
    public const int LogoutRemarkFieldNumber = 7;
    private string logoutRemark_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogoutRemark {
      get { return logoutRemark_; }
      set {
        logoutRemark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prevFailCount" field.</summary>
    public const int PrevFailCountFieldNumber = 8;
    private uint prevFailCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PrevFailCount {
      get { return prevFailCount_; }
      set {
        prevFailCount_ = value;
      }
    }

    /// <summary>Field number for the "OTP" field.</summary>
    public const int OTPFieldNumber = 9;
    private uint oTP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OTP {
      get { return oTP_; }
      set {
        oTP_ = value;
      }
    }

    /// <summary>Field number for the "clientApp" field.</summary>
    public const int ClientAppFieldNumber = 10;
    private string clientApp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientApp {
      get { return clientApp_; }
      set {
        clientApp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pushingDelay" field.</summary>
    public const int PushingDelayFieldNumber = 11;
    private uint pushingDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PushingDelay {
      get { return pushingDelay_; }
      set {
        pushingDelay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AuthBy != other.AuthBy) return false;
      if (LoginUTC != other.LoginUTC) return false;
      if (LoginFrom != other.LoginFrom) return false;
      if (LoginDevice != other.LoginDevice) return false;
      if (!object.Equals(LoginResult, other.LoginResult)) return false;
      if (LogoutUTC != other.LogoutUTC) return false;
      if (LogoutRemark != other.LogoutRemark) return false;
      if (PrevFailCount != other.PrevFailCount) return false;
      if (OTP != other.OTP) return false;
      if (ClientApp != other.ClientApp) return false;
      if (PushingDelay != other.PushingDelay) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AuthBy.Length != 0) hash ^= AuthBy.GetHashCode();
      if (LoginUTC != 0UL) hash ^= LoginUTC.GetHashCode();
      if (LoginFrom.Length != 0) hash ^= LoginFrom.GetHashCode();
      if (LoginDevice.Length != 0) hash ^= LoginDevice.GetHashCode();
      if (loginResult_ != null) hash ^= LoginResult.GetHashCode();
      if (LogoutUTC != 0UL) hash ^= LogoutUTC.GetHashCode();
      if (LogoutRemark.Length != 0) hash ^= LogoutRemark.GetHashCode();
      if (PrevFailCount != 0) hash ^= PrevFailCount.GetHashCode();
      if (OTP != 0) hash ^= OTP.GetHashCode();
      if (ClientApp.Length != 0) hash ^= ClientApp.GetHashCode();
      if (PushingDelay != 0) hash ^= PushingDelay.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AuthBy.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AuthBy);
      }
      if (LoginUTC != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(LoginUTC);
      }
      if (LoginFrom.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LoginFrom);
      }
      if (LoginDevice.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LoginDevice);
      }
      if (loginResult_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LoginResult);
      }
      if (LogoutUTC != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(LogoutUTC);
      }
      if (LogoutRemark.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LogoutRemark);
      }
      if (PrevFailCount != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(PrevFailCount);
      }
      if (OTP != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(OTP);
      }
      if (ClientApp.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ClientApp);
      }
      if (PushingDelay != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(PushingDelay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AuthBy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthBy);
      }
      if (LoginUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LoginUTC);
      }
      if (LoginFrom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginFrom);
      }
      if (LoginDevice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginDevice);
      }
      if (loginResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginResult);
      }
      if (LogoutUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LogoutUTC);
      }
      if (LogoutRemark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogoutRemark);
      }
      if (PrevFailCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PrevFailCount);
      }
      if (OTP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OTP);
      }
      if (ClientApp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientApp);
      }
      if (PushingDelay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PushingDelay);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRecord other) {
      if (other == null) {
        return;
      }
      if (other.AuthBy.Length != 0) {
        AuthBy = other.AuthBy;
      }
      if (other.LoginUTC != 0UL) {
        LoginUTC = other.LoginUTC;
      }
      if (other.LoginFrom.Length != 0) {
        LoginFrom = other.LoginFrom;
      }
      if (other.LoginDevice.Length != 0) {
        LoginDevice = other.LoginDevice;
      }
      if (other.loginResult_ != null) {
        if (loginResult_ == null) {
          loginResult_ = new global::Com.Xceder.Messages.Result();
        }
        LoginResult.MergeFrom(other.LoginResult);
      }
      if (other.LogoutUTC != 0UL) {
        LogoutUTC = other.LogoutUTC;
      }
      if (other.LogoutRemark.Length != 0) {
        LogoutRemark = other.LogoutRemark;
      }
      if (other.PrevFailCount != 0) {
        PrevFailCount = other.PrevFailCount;
      }
      if (other.OTP != 0) {
        OTP = other.OTP;
      }
      if (other.ClientApp.Length != 0) {
        ClientApp = other.ClientApp;
      }
      if (other.PushingDelay != 0) {
        PushingDelay = other.PushingDelay;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AuthBy = input.ReadString();
            break;
          }
          case 16: {
            LoginUTC = input.ReadUInt64();
            break;
          }
          case 26: {
            LoginFrom = input.ReadString();
            break;
          }
          case 34: {
            LoginDevice = input.ReadString();
            break;
          }
          case 42: {
            if (loginResult_ == null) {
              loginResult_ = new global::Com.Xceder.Messages.Result();
            }
            input.ReadMessage(loginResult_);
            break;
          }
          case 48: {
            LogoutUTC = input.ReadUInt64();
            break;
          }
          case 58: {
            LogoutRemark = input.ReadString();
            break;
          }
          case 64: {
            PrevFailCount = input.ReadUInt32();
            break;
          }
          case 72: {
            OTP = input.ReadUInt32();
            break;
          }
          case 82: {
            ClientApp = input.ReadString();
            break;
          }
          case 88: {
            PushingDelay = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///each request will get a process error result from the server before the actual result disseminated
  ///because of the async process, later when remote side reject the request, the error will be disseminated accordingly
  ///client side need use the reqID to determine which request this error is for
  /// </summary>
  public sealed partial class Result : pb::IMessage<Result> {
    private static readonly pb::MessageParser<Result> _parser = new pb::MessageParser<Result>(() => new Result());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result(Result other) : this() {
      request_ = other.request_;
      serverID_ = other.serverID_;
      resultCode_ = other.resultCode_;
      remark_ = other.remark_;
      requestRcvUTC_ = other.requestRcvUTC_;
      startProcessUTC_ = other.startProcessUTC_;
      finishProcessUTC_ = other.finishProcessUTC_;
      requestFromIP_ = other.requestFromIP_;
      requestFromPort_ = other.requestFromPort_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result Clone() {
      return new Result(this);
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 1;
    private ulong request_;
    /// <summary>
    ///request's ID, submitted in the RequestMsg
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "serverID" field.</summary>
    public const int ServerIDFieldNumber = 2;
    private uint serverID_;
    /// <summary>
    ///id of the result source server
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerID {
      get { return serverID_; }
      set {
        serverID_ = value;
      }
    }

    /// <summary>Field number for the "resultCode" field.</summary>
    public const int ResultCodeFieldNumber = 3;
    private global::Com.Xceder.Messages.ERRORCODE resultCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.ERRORCODE ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 4;
    private string remark_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requestRcvUTC" field.</summary>
    public const int RequestRcvUTCFieldNumber = 5;
    private ulong requestRcvUTC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestRcvUTC {
      get { return requestRcvUTC_; }
      set {
        requestRcvUTC_ = value;
      }
    }

    /// <summary>Field number for the "startProcessUTC" field.</summary>
    public const int StartProcessUTCFieldNumber = 6;
    private ulong startProcessUTC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartProcessUTC {
      get { return startProcessUTC_; }
      set {
        startProcessUTC_ = value;
      }
    }

    /// <summary>Field number for the "finishProcessUTC" field.</summary>
    public const int FinishProcessUTCFieldNumber = 7;
    private ulong finishProcessUTC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FinishProcessUTC {
      get { return finishProcessUTC_; }
      set {
        finishProcessUTC_ = value;
      }
    }

    /// <summary>Field number for the "requestFromIP" field.</summary>
    public const int RequestFromIPFieldNumber = 8;
    private string requestFromIP_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestFromIP {
      get { return requestFromIP_; }
      set {
        requestFromIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requestFromPort" field.</summary>
    public const int RequestFromPortFieldNumber = 9;
    private uint requestFromPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequestFromPort {
      get { return requestFromPort_; }
      set {
        requestFromPort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Request != other.Request) return false;
      if (ServerID != other.ServerID) return false;
      if (ResultCode != other.ResultCode) return false;
      if (Remark != other.Remark) return false;
      if (RequestRcvUTC != other.RequestRcvUTC) return false;
      if (StartProcessUTC != other.StartProcessUTC) return false;
      if (FinishProcessUTC != other.FinishProcessUTC) return false;
      if (RequestFromIP != other.RequestFromIP) return false;
      if (RequestFromPort != other.RequestFromPort) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Request != 0UL) hash ^= Request.GetHashCode();
      if (ServerID != 0) hash ^= ServerID.GetHashCode();
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (RequestRcvUTC != 0UL) hash ^= RequestRcvUTC.GetHashCode();
      if (StartProcessUTC != 0UL) hash ^= StartProcessUTC.GetHashCode();
      if (FinishProcessUTC != 0UL) hash ^= FinishProcessUTC.GetHashCode();
      if (RequestFromIP.Length != 0) hash ^= RequestFromIP.GetHashCode();
      if (RequestFromPort != 0) hash ^= RequestFromPort.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Request != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Request);
      }
      if (ServerID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ServerID);
      }
      if (ResultCode != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ResultCode);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Remark);
      }
      if (RequestRcvUTC != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(RequestRcvUTC);
      }
      if (StartProcessUTC != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(StartProcessUTC);
      }
      if (FinishProcessUTC != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(FinishProcessUTC);
      }
      if (RequestFromIP.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RequestFromIP);
      }
      if (RequestFromPort != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(RequestFromPort);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Request != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Request);
      }
      if (ServerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerID);
      }
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResultCode);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (RequestRcvUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestRcvUTC);
      }
      if (StartProcessUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartProcessUTC);
      }
      if (FinishProcessUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FinishProcessUTC);
      }
      if (RequestFromIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestFromIP);
      }
      if (RequestFromPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestFromPort);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Result other) {
      if (other == null) {
        return;
      }
      if (other.Request != 0UL) {
        Request = other.Request;
      }
      if (other.ServerID != 0) {
        ServerID = other.ServerID;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.RequestRcvUTC != 0UL) {
        RequestRcvUTC = other.RequestRcvUTC;
      }
      if (other.StartProcessUTC != 0UL) {
        StartProcessUTC = other.StartProcessUTC;
      }
      if (other.FinishProcessUTC != 0UL) {
        FinishProcessUTC = other.FinishProcessUTC;
      }
      if (other.RequestFromIP.Length != 0) {
        RequestFromIP = other.RequestFromIP;
      }
      if (other.RequestFromPort != 0) {
        RequestFromPort = other.RequestFromPort;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Request = input.ReadUInt64();
            break;
          }
          case 16: {
            ServerID = input.ReadUInt32();
            break;
          }
          case 24: {
            resultCode_ = (global::Com.Xceder.Messages.ERRORCODE) input.ReadEnum();
            break;
          }
          case 34: {
            Remark = input.ReadString();
            break;
          }
          case 40: {
            RequestRcvUTC = input.ReadUInt64();
            break;
          }
          case 48: {
            StartProcessUTC = input.ReadUInt64();
            break;
          }
          case 56: {
            FinishProcessUTC = input.ReadUInt64();
            break;
          }
          case 66: {
            RequestFromIP = input.ReadString();
            break;
          }
          case 72: {
            RequestFromPort = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Service : pb::IMessage<Service> {
    private static readonly pb::MessageParser<Service> _parser = new pb::MessageParser<Service>(() => new Service());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Service> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service(Service other) : this() {
      broker_ = other.broker_;
      svc_ = other.svc_;
      exchange_ = other.exchange_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service Clone() {
      return new Service(this);
    }

    /// <summary>Field number for the "broker" field.</summary>
    public const int BrokerFieldNumber = 1;
    private global::Com.Xceder.Messages.BROKER broker_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.BROKER Broker {
      get { return broker_; }
      set {
        broker_ = value;
      }
    }

    /// <summary>Field number for the "svc" field.</summary>
    public const int SvcFieldNumber = 2;
    private global::Com.Xceder.Messages.Service.Types.SERVICE svc_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Service.Types.SERVICE Svc {
      get { return svc_; }
      set {
        svc_ = value;
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 3;
    private global::Com.Xceder.Messages.Exchange.Types.EXCHANGE exchange_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Exchange.Types.EXCHANGE Exchange {
      get { return exchange_; }
      set {
        exchange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Service);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Service other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Broker != other.Broker) return false;
      if (Svc != other.Svc) return false;
      if (Exchange != other.Exchange) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Broker != 0) hash ^= Broker.GetHashCode();
      if (Svc != 0) hash ^= Svc.GetHashCode();
      if (Exchange != 0) hash ^= Exchange.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Broker != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Broker);
      }
      if (Svc != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Svc);
      }
      if (Exchange != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Exchange);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Broker != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Broker);
      }
      if (Svc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Svc);
      }
      if (Exchange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Exchange);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Service other) {
      if (other == null) {
        return;
      }
      if (other.Broker != 0) {
        Broker = other.Broker;
      }
      if (other.Svc != 0) {
        Svc = other.Svc;
      }
      if (other.Exchange != 0) {
        Exchange = other.Exchange;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            broker_ = (global::Com.Xceder.Messages.BROKER) input.ReadEnum();
            break;
          }
          case 16: {
            svc_ = (global::Com.Xceder.Messages.Service.Types.SERVICE) input.ReadEnum();
            break;
          }
          case 24: {
            exchange_ = (global::Com.Xceder.Messages.Exchange.Types.EXCHANGE) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Service message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SERVICE {
        [pbr::OriginalName("SVCALL")] Svcall = 0,
        [pbr::OriginalName("PRICE")] Price = 1,
        [pbr::OriginalName("ORDER")] Order = 2,
        [pbr::OriginalName("SPREADER")] Spreader = 3,
        [pbr::OriginalName("ALGO")] Algo = 4,
      }

    }
    #endregion

  }

  public sealed partial class ServiceStatus : pb::IMessage<ServiceStatus> {
    private static readonly pb::MessageParser<ServiceStatus> _parser = new pb::MessageParser<ServiceStatus>(() => new ServiceStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceStatus(ServiceStatus other) : this() {
      serverID_ = other.serverID_;
      Service = other.service_ != null ? other.Service.Clone() : null;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceStatus Clone() {
      return new ServiceStatus(this);
    }

    /// <summary>Field number for the "serverID" field.</summary>
    public const int ServerIDFieldNumber = 1;
    private uint serverID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerID {
      get { return serverID_; }
      set {
        serverID_ = value;
      }
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 2;
    private global::Com.Xceder.Messages.Service service_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Service Service {
      get { return service_; }
      set {
        service_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Com.Xceder.Messages.ServiceStatus.Types.STATUS status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.ServiceStatus.Types.STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerID != other.ServerID) return false;
      if (!object.Equals(Service, other.Service)) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerID != 0) hash ^= ServerID.GetHashCode();
      if (service_ != null) hash ^= Service.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerID);
      }
      if (service_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Service);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerID);
      }
      if (service_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Service);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceStatus other) {
      if (other == null) {
        return;
      }
      if (other.ServerID != 0) {
        ServerID = other.ServerID;
      }
      if (other.service_ != null) {
        if (service_ == null) {
          service_ = new global::Com.Xceder.Messages.Service();
        }
        Service.MergeFrom(other.Service);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerID = input.ReadUInt32();
            break;
          }
          case 18: {
            if (service_ == null) {
              service_ = new global::Com.Xceder.Messages.Service();
            }
            input.ReadMessage(service_);
            break;
          }
          case 24: {
            status_ = (global::Com.Xceder.Messages.ServiceStatus.Types.STATUS) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ServiceStatus message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum STATUS {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("CONNECTING")] Connecting = 1,
        /// <summary>
        ///line is up and can take requests
        /// </summary>
        [pbr::OriginalName("READY")] Ready = 2,
        /// <summary>
        ///network connection is broken
        /// </summary>
        [pbr::OriginalName("BROKEN")] Broken = 3,
        /// <summary>
        ///disconnect from broker in trading hour either caused by network issue or counter party system
        /// </summary>
        [pbr::OriginalName("DISCONNECT")] Disconnect = 4,
        /// <summary>
        ///session is over
        /// </summary>
        [pbr::OriginalName("CLOSE")] Close = 5,
      }

    }
    #endregion

  }

  public sealed partial class ServiceStatuses : pb::IMessage<ServiceStatuses> {
    private static readonly pb::MessageParser<ServiceStatuses> _parser = new pb::MessageParser<ServiceStatuses>(() => new ServiceStatuses());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceStatuses> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceStatuses() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceStatuses(ServiceStatuses other) : this() {
      status_ = other.status_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceStatuses Clone() {
      return new ServiceStatuses(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Xceder.Messages.ServiceStatus> _repeated_status_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Xceder.Messages.ServiceStatus.Parser);
    private readonly pbc::RepeatedField<global::Com.Xceder.Messages.ServiceStatus> status_ = new pbc::RepeatedField<global::Com.Xceder.Messages.ServiceStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Xceder.Messages.ServiceStatus> Status {
      get { return status_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceStatuses);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceStatuses other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!status_.Equals(other.status_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= status_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      status_.WriteTo(output, _repeated_status_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += status_.CalculateSize(_repeated_status_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceStatuses other) {
      if (other == null) {
        return;
      }
      status_.Add(other.status_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Logon into the system and opening a new session.
  /// </summary>
  public sealed partial class Logon : pb::IMessage<Logon> {
    private static readonly pb::MessageParser<Logon> _parser = new pb::MessageParser<Logon>(() => new Logon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Logon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Logon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Logon(Logon other) : this() {
      userID_ = other.userID_;
      password_ = other.password_;
      oTP_ = other.oTP_;
      clientApp_ = other.clientApp_;
      pushingDelay_ = other.pushingDelay_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Logon Clone() {
      return new Logon(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private string userID_ = "";
    /// <summary>
    /// User login ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserID {
      get { return userID_; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    /// <summary>
    /// User's password.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OTP" field.</summary>
    public const int OTPFieldNumber = 3;
    private uint oTP_;
    /// <summary>
    /// User's one time password, might be required according to the user's settings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OTP {
      get { return oTP_; }
      set {
        oTP_ = value;
      }
    }

    /// <summary>Field number for the "clientApp" field.</summary>
    public const int ClientAppFieldNumber = 4;
    private string clientApp_ = "";
    /// <summary>
    /// Identifier of the client application.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientApp {
      get { return clientApp_; }
      set {
        clientApp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pushingDelay" field.</summary>
    public const int PushingDelayFieldNumber = 5;
    private uint pushingDelay_;
    /// <summary>
    ///specify the minimum pushing message gap (in seconds) from the server, such as price, order status updates. this excludes those reponse of
    ///requests. if it is 0, means no delay on the pushing message.
    ///this is to avoid sending too many messages. server will merge the messages properly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PushingDelay {
      get { return pushingDelay_; }
      set {
        pushingDelay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Logon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Logon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (Password != other.Password) return false;
      if (OTP != other.OTP) return false;
      if (ClientApp != other.ClientApp) return false;
      if (PushingDelay != other.PushingDelay) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID.Length != 0) hash ^= UserID.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (OTP != 0) hash ^= OTP.GetHashCode();
      if (ClientApp.Length != 0) hash ^= ClientApp.GetHashCode();
      if (PushingDelay != 0) hash ^= PushingDelay.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserID);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (OTP != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OTP);
      }
      if (ClientApp.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientApp);
      }
      if (PushingDelay != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(PushingDelay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (OTP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OTP);
      }
      if (ClientApp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientApp);
      }
      if (PushingDelay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PushingDelay);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Logon other) {
      if (other == null) {
        return;
      }
      if (other.UserID.Length != 0) {
        UserID = other.UserID;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.OTP != 0) {
        OTP = other.OTP;
      }
      if (other.ClientApp.Length != 0) {
        ClientApp = other.ClientApp;
      }
      if (other.PushingDelay != 0) {
        PushingDelay = other.PushingDelay;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserID = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 24: {
            OTP = input.ReadUInt32();
            break;
          }
          case 34: {
            ClientApp = input.ReadString();
            break;
          }
          case 40: {
            PushingDelay = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Result of the successful logon
  /// </summary>
  public sealed partial class LogonResult : pb::IMessage<LogonResult> {
    private static readonly pb::MessageParser<LogonResult> _parser = new pb::MessageParser<LogonResult>(() => new LogonResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogonResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogonResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogonResult(LogonResult other) : this() {
      Account = other.account_ != null ? other.Account.Clone() : null;
      redirectURL_ = other.redirectURL_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogonResult Clone() {
      return new LogonResult(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private global::Com.Xceder.Messages.Account account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Account Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "redirectURL" field.</summary>
    public const int RedirectURLFieldNumber = 2;
    private string redirectURL_ = "";
    /// <summary>
    /// URL for a client to reconnect in case of redirection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RedirectURL {
      get { return redirectURL_; }
      set {
        redirectURL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogonResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogonResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Account, other.Account)) return false;
      if (RedirectURL != other.RedirectURL) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account_ != null) hash ^= Account.GetHashCode();
      if (RedirectURL.Length != 0) hash ^= RedirectURL.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (RedirectURL.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RedirectURL);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (RedirectURL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RedirectURL);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogonResult other) {
      if (other == null) {
        return;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          account_ = new global::Com.Xceder.Messages.Account();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.RedirectURL.Length != 0) {
        RedirectURL = other.RedirectURL;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (account_ == null) {
              account_ = new global::Com.Xceder.Messages.Account();
            }
            input.ReadMessage(account_);
            break;
          }
          case 18: {
            RedirectURL = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message to change user's password.
  /// </summary>
  public sealed partial class PasswordChange : pb::IMessage<PasswordChange> {
    private static readonly pb::MessageParser<PasswordChange> _parser = new pb::MessageParser<PasswordChange>(() => new PasswordChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PasswordChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PasswordChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PasswordChange(PasswordChange other) : this() {
      currentPassword_ = other.currentPassword_;
      newPassword_ = other.newPassword_;
      email_ = other.email_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PasswordChange Clone() {
      return new PasswordChange(this);
    }

    /// <summary>Field number for the "currentPassword" field.</summary>
    public const int CurrentPasswordFieldNumber = 1;
    private string currentPassword_ = "";
    /// <summary>
    /// Currently used password.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentPassword {
      get { return currentPassword_; }
      set {
        currentPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "newPassword" field.</summary>
    public const int NewPasswordFieldNumber = 2;
    private string newPassword_ = "";
    /// <summary>
    /// New password that user wants to use. put blank means request the reset token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewPassword {
      get { return newPassword_; }
      set {
        newPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 3;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PasswordChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PasswordChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentPassword != other.CurrentPassword) return false;
      if (NewPassword != other.NewPassword) return false;
      if (Email != other.Email) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentPassword.Length != 0) hash ^= CurrentPassword.GetHashCode();
      if (NewPassword.Length != 0) hash ^= NewPassword.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPassword.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CurrentPassword);
      }
      if (NewPassword.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NewPassword);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Email);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentPassword);
      }
      if (NewPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewPassword);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PasswordChange other) {
      if (other == null) {
        return;
      }
      if (other.CurrentPassword.Length != 0) {
        CurrentPassword = other.CurrentPassword;
      }
      if (other.NewPassword.Length != 0) {
        NewPassword = other.NewPassword;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CurrentPassword = input.ReadString();
            break;
          }
          case 18: {
            NewPassword = input.ReadString();
            break;
          }
          case 26: {
            Email = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NoticeMessages : pb::IMessage<NoticeMessages> {
    private static readonly pb::MessageParser<NoticeMessages> _parser = new pb::MessageParser<NoticeMessages>(() => new NoticeMessages());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeMessages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeMessages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeMessages(NoticeMessages other) : this() {
      notice_ = other.notice_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeMessages Clone() {
      return new NoticeMessages(this);
    }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Xceder.Messages.NoticeMessage> _repeated_notice_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Xceder.Messages.NoticeMessage.Parser);
    private readonly pbc::RepeatedField<global::Com.Xceder.Messages.NoticeMessage> notice_ = new pbc::RepeatedField<global::Com.Xceder.Messages.NoticeMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Xceder.Messages.NoticeMessage> Notice {
      get { return notice_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeMessages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeMessages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!notice_.Equals(other.notice_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= notice_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      notice_.WriteTo(output, _repeated_notice_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += notice_.CalculateSize(_repeated_notice_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeMessages other) {
      if (other == null) {
        return;
      }
      notice_.Add(other.notice_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            notice_.AddEntriesFrom(input, _repeated_notice_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Text message from server.
  /// </summary>
  public sealed partial class NoticeMessage : pb::IMessage<NoticeMessage> {
    private static readonly pb::MessageParser<NoticeMessage> _parser = new pb::MessageParser<NoticeMessage>(() => new NoticeMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeMessage(NoticeMessage other) : this() {
      type_ = other.type_;
      source_ = other.source_;
      subject_ = other.subject_;
      text_ = other.text_;
      expirationUTC_ = other.expirationUTC_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeMessage Clone() {
      return new NoticeMessage(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Com.Xceder.Messages.NoticeMessage.Types.TYPE type_ = 0;
    /// <summary>
    /// This field is associated with MessageType enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.NoticeMessage.Types.TYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private string source_ = "";
    /// <summary>
    /// Information about source of the message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subject" field.</summary>
    public const int SubjectFieldNumber = 3;
    private string subject_ = "";
    /// <summary>
    /// Message subject.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subject {
      get { return subject_; }
      set {
        subject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 4;
    private string text_ = "";
    /// <summary>
    /// Message text.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expirationUTC" field.</summary>
    public const int ExpirationUTCFieldNumber = 5;
    private ulong expirationUTC_;
    /// <summary>
    /// Optional time when this message is expired, it should be hidden from user after this time (UTC).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExpirationUTC {
      get { return expirationUTC_; }
      set {
        expirationUTC_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Source != other.Source) return false;
      if (Subject != other.Subject) return false;
      if (Text != other.Text) return false;
      if (ExpirationUTC != other.ExpirationUTC) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (Subject.Length != 0) hash ^= Subject.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (ExpirationUTC != 0UL) hash ^= ExpirationUTC.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Source);
      }
      if (Subject.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Subject);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Text);
      }
      if (ExpirationUTC != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ExpirationUTC);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (Subject.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subject);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (ExpirationUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpirationUTC);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeMessage other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.Subject.Length != 0) {
        Subject = other.Subject;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.ExpirationUTC != 0UL) {
        ExpirationUTC = other.ExpirationUTC;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Com.Xceder.Messages.NoticeMessage.Types.TYPE) input.ReadEnum();
            break;
          }
          case 18: {
            Source = input.ReadString();
            break;
          }
          case 26: {
            Subject = input.ReadString();
            break;
          }
          case 34: {
            Text = input.ReadString();
            break;
          }
          case 40: {
            ExpirationUTC = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NoticeMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Type of the message.
      /// </summary>
      public enum TYPE {
        /// <summary>
        /// General information.
        /// </summary>
        [pbr::OriginalName("INFO")] Info = 0,
        /// <summary>
        /// Warning.
        /// </summary>
        [pbr::OriginalName("WARNING")] Warning = 1,
        /// <summary>
        /// Critical error message.
        /// </summary>
        [pbr::OriginalName("ERROR")] Error = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Ping request which can be initiated by any side to ensure connection is alive. Both client and
  /// server sides must respond such request with Ping.
  /// </summary>
  public sealed partial class Ping : pb::IMessage<Ping> {
    private static readonly pb::MessageParser<Ping> _parser = new pb::MessageParser<Ping>(() => new Ping());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ping> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping(Ping other) : this() {
      pingUTC_ = other.pingUTC_;
      pongUTC_ = other.pongUTC_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping Clone() {
      return new Ping(this);
    }

    /// <summary>Field number for the "pingUTC" field.</summary>
    public const int PingUTCFieldNumber = 1;
    private ulong pingUTC_;
    /// <summary>
    /// initiator time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PingUTC {
      get { return pingUTC_; }
      set {
        pingUTC_ = value;
      }
    }

    /// <summary>Field number for the "pongUTC" field.</summary>
    public const int PongUTCFieldNumber = 2;
    private ulong pongUTC_;
    /// <summary>
    /// responser time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PongUTC {
      get { return pongUTC_; }
      set {
        pongUTC_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ping);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ping other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PingUTC != other.PingUTC) return false;
      if (PongUTC != other.PongUTC) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PingUTC != 0UL) hash ^= PingUTC.GetHashCode();
      if (PongUTC != 0UL) hash ^= PongUTC.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PingUTC != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PingUTC);
      }
      if (PongUTC != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(PongUTC);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PingUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PingUTC);
      }
      if (PongUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PongUTC);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ping other) {
      if (other == null) {
        return;
      }
      if (other.PingUTC != 0UL) {
        PingUTC = other.PingUTC;
      }
      if (other.PongUTC != 0UL) {
        PongUTC = other.PongUTC;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PingUTC = input.ReadUInt64();
            break;
          }
          case 16: {
            PongUTC = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for information.
  /// </summary>
  public sealed partial class Query : pb::IMessage<Query> {
    private static readonly pb::MessageParser<Query> _parser = new pb::MessageParser<Query>(() => new Query());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Query> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query(Query other) : this() {
      switch (other.QueryCase) {
        case QueryOneofCase.Extension:
          Extension = other.Extension.Clone();
          break;
        case QueryOneofCase.Order:
          Order = other.Order.Clone();
          break;
        case QueryOneofCase.Log:
          Log = other.Log.Clone();
          break;
        case QueryOneofCase.Instruments:
          Instruments = other.Instruments.Clone();
          break;
        case QueryOneofCase.AccountTradingRule:
          AccountTradingRule = other.AccountTradingRule;
          break;
        case QueryOneofCase.SupportBrokerExchanges:
          SupportBrokerExchanges = other.SupportBrokerExchanges;
          break;
        case QueryOneofCase.Calendar:
          Calendar = other.Calendar.Clone();
          break;
        case QueryOneofCase.Spreader:
          Spreader = other.Spreader.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query Clone() {
      return new Query(this);
    }

    /// <summary>Field number for the "extension" field.</summary>
    public const int ExtensionFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Extension {
      get { return queryCase_ == QueryOneofCase.Extension ? (global::Google.Protobuf.WellKnownTypes.Any) query_ : null; }
      set {
        query_ = value;
        queryCase_ = value == null ? QueryOneofCase.None : QueryOneofCase.Extension;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 2;
    /// <summary>
    /// Request for a list of historical orders according to a search criteria.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.QueryConditions Order {
      get { return queryCase_ == QueryOneofCase.Order ? (global::Com.Xceder.Messages.QueryConditions) query_ : null; }
      set {
        query_ = value;
        queryCase_ = value == null ? QueryOneofCase.None : QueryOneofCase.Order;
      }
    }

    /// <summary>Field number for the "log" field.</summary>
    public const int LogFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.QueryConditions Log {
      get { return queryCase_ == QueryOneofCase.Log ? (global::Com.Xceder.Messages.QueryConditions) query_ : null; }
      set {
        query_ = value;
        queryCase_ = value == null ? QueryOneofCase.None : QueryOneofCase.Log;
      }
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.QueryConditions Instruments {
      get { return queryCase_ == QueryOneofCase.Instruments ? (global::Com.Xceder.Messages.QueryConditions) query_ : null; }
      set {
        query_ = value;
        queryCase_ = value == null ? QueryOneofCase.None : QueryOneofCase.Instruments;
      }
    }

    /// <summary>Field number for the "accountTradingRule" field.</summary>
    public const int AccountTradingRuleFieldNumber = 5;
    /// <summary>
    ///always query the whole rules to ensure the data intact.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountTradingRule {
      get { return queryCase_ == QueryOneofCase.AccountTradingRule ? (uint) query_ : 0; }
      set {
        query_ = value;
        queryCase_ = QueryOneofCase.AccountTradingRule;
      }
    }

    /// <summary>Field number for the "supportBrokerExchanges" field.</summary>
    public const int SupportBrokerExchangesFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SupportBrokerExchanges {
      get { return queryCase_ == QueryOneofCase.SupportBrokerExchanges ? (bool) query_ : false; }
      set {
        query_ = value;
        queryCase_ = QueryOneofCase.SupportBrokerExchanges;
      }
    }

    /// <summary>Field number for the "calendar" field.</summary>
    public const int CalendarFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.QueryConditions Calendar {
      get { return queryCase_ == QueryOneofCase.Calendar ? (global::Com.Xceder.Messages.QueryConditions) query_ : null; }
      set {
        query_ = value;
        queryCase_ = value == null ? QueryOneofCase.None : QueryOneofCase.Calendar;
      }
    }

    /// <summary>Field number for the "spreader" field.</summary>
    public const int SpreaderFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.QueryConditions Spreader {
      get { return queryCase_ == QueryOneofCase.Spreader ? (global::Com.Xceder.Messages.QueryConditions) query_ : null; }
      set {
        query_ = value;
        queryCase_ = value == null ? QueryOneofCase.None : QueryOneofCase.Spreader;
      }
    }

    private object query_;
    /// <summary>Enum of possible cases for the "query" oneof.</summary>
    public enum QueryOneofCase {
      None = 0,
      Extension = 1,
      Order = 2,
      Log = 3,
      Instruments = 4,
      AccountTradingRule = 5,
      SupportBrokerExchanges = 6,
      Calendar = 7,
      Spreader = 8,
    }
    private QueryOneofCase queryCase_ = QueryOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryOneofCase QueryCase {
      get { return queryCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuery() {
      queryCase_ = QueryOneofCase.None;
      query_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Query);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Query other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Extension, other.Extension)) return false;
      if (!object.Equals(Order, other.Order)) return false;
      if (!object.Equals(Log, other.Log)) return false;
      if (!object.Equals(Instruments, other.Instruments)) return false;
      if (AccountTradingRule != other.AccountTradingRule) return false;
      if (SupportBrokerExchanges != other.SupportBrokerExchanges) return false;
      if (!object.Equals(Calendar, other.Calendar)) return false;
      if (!object.Equals(Spreader, other.Spreader)) return false;
      if (QueryCase != other.QueryCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (queryCase_ == QueryOneofCase.Extension) hash ^= Extension.GetHashCode();
      if (queryCase_ == QueryOneofCase.Order) hash ^= Order.GetHashCode();
      if (queryCase_ == QueryOneofCase.Log) hash ^= Log.GetHashCode();
      if (queryCase_ == QueryOneofCase.Instruments) hash ^= Instruments.GetHashCode();
      if (queryCase_ == QueryOneofCase.AccountTradingRule) hash ^= AccountTradingRule.GetHashCode();
      if (queryCase_ == QueryOneofCase.SupportBrokerExchanges) hash ^= SupportBrokerExchanges.GetHashCode();
      if (queryCase_ == QueryOneofCase.Calendar) hash ^= Calendar.GetHashCode();
      if (queryCase_ == QueryOneofCase.Spreader) hash ^= Spreader.GetHashCode();
      hash ^= (int) queryCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (queryCase_ == QueryOneofCase.Extension) {
        output.WriteRawTag(10);
        output.WriteMessage(Extension);
      }
      if (queryCase_ == QueryOneofCase.Order) {
        output.WriteRawTag(18);
        output.WriteMessage(Order);
      }
      if (queryCase_ == QueryOneofCase.Log) {
        output.WriteRawTag(26);
        output.WriteMessage(Log);
      }
      if (queryCase_ == QueryOneofCase.Instruments) {
        output.WriteRawTag(34);
        output.WriteMessage(Instruments);
      }
      if (queryCase_ == QueryOneofCase.AccountTradingRule) {
        output.WriteRawTag(40);
        output.WriteUInt32(AccountTradingRule);
      }
      if (queryCase_ == QueryOneofCase.SupportBrokerExchanges) {
        output.WriteRawTag(48);
        output.WriteBool(SupportBrokerExchanges);
      }
      if (queryCase_ == QueryOneofCase.Calendar) {
        output.WriteRawTag(58);
        output.WriteMessage(Calendar);
      }
      if (queryCase_ == QueryOneofCase.Spreader) {
        output.WriteRawTag(66);
        output.WriteMessage(Spreader);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (queryCase_ == QueryOneofCase.Extension) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extension);
      }
      if (queryCase_ == QueryOneofCase.Order) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Order);
      }
      if (queryCase_ == QueryOneofCase.Log) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Log);
      }
      if (queryCase_ == QueryOneofCase.Instruments) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instruments);
      }
      if (queryCase_ == QueryOneofCase.AccountTradingRule) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountTradingRule);
      }
      if (queryCase_ == QueryOneofCase.SupportBrokerExchanges) {
        size += 1 + 1;
      }
      if (queryCase_ == QueryOneofCase.Calendar) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Calendar);
      }
      if (queryCase_ == QueryOneofCase.Spreader) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spreader);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Query other) {
      if (other == null) {
        return;
      }
      switch (other.QueryCase) {
        case QueryOneofCase.Extension:
          Extension = other.Extension;
          break;
        case QueryOneofCase.Order:
          Order = other.Order;
          break;
        case QueryOneofCase.Log:
          Log = other.Log;
          break;
        case QueryOneofCase.Instruments:
          Instruments = other.Instruments;
          break;
        case QueryOneofCase.AccountTradingRule:
          AccountTradingRule = other.AccountTradingRule;
          break;
        case QueryOneofCase.SupportBrokerExchanges:
          SupportBrokerExchanges = other.SupportBrokerExchanges;
          break;
        case QueryOneofCase.Calendar:
          Calendar = other.Calendar;
          break;
        case QueryOneofCase.Spreader:
          Spreader = other.Spreader;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Protobuf.WellKnownTypes.Any subBuilder = new global::Google.Protobuf.WellKnownTypes.Any();
            if (queryCase_ == QueryOneofCase.Extension) {
              subBuilder.MergeFrom(Extension);
            }
            input.ReadMessage(subBuilder);
            Extension = subBuilder;
            break;
          }
          case 18: {
            global::Com.Xceder.Messages.QueryConditions subBuilder = new global::Com.Xceder.Messages.QueryConditions();
            if (queryCase_ == QueryOneofCase.Order) {
              subBuilder.MergeFrom(Order);
            }
            input.ReadMessage(subBuilder);
            Order = subBuilder;
            break;
          }
          case 26: {
            global::Com.Xceder.Messages.QueryConditions subBuilder = new global::Com.Xceder.Messages.QueryConditions();
            if (queryCase_ == QueryOneofCase.Log) {
              subBuilder.MergeFrom(Log);
            }
            input.ReadMessage(subBuilder);
            Log = subBuilder;
            break;
          }
          case 34: {
            global::Com.Xceder.Messages.QueryConditions subBuilder = new global::Com.Xceder.Messages.QueryConditions();
            if (queryCase_ == QueryOneofCase.Instruments) {
              subBuilder.MergeFrom(Instruments);
            }
            input.ReadMessage(subBuilder);
            Instruments = subBuilder;
            break;
          }
          case 40: {
            AccountTradingRule = input.ReadUInt32();
            break;
          }
          case 48: {
            SupportBrokerExchanges = input.ReadBool();
            break;
          }
          case 58: {
            global::Com.Xceder.Messages.QueryConditions subBuilder = new global::Com.Xceder.Messages.QueryConditions();
            if (queryCase_ == QueryOneofCase.Calendar) {
              subBuilder.MergeFrom(Calendar);
            }
            input.ReadMessage(subBuilder);
            Calendar = subBuilder;
            break;
          }
          case 66: {
            global::Com.Xceder.Messages.QueryConditions subBuilder = new global::Com.Xceder.Messages.QueryConditions();
            if (queryCase_ == QueryOneofCase.Spreader) {
              subBuilder.MergeFrom(Spreader);
            }
            input.ReadMessage(subBuilder);
            Spreader = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///Pagination is done in the server side automatically. Client should always query the server until return empty records
  /// </summary>
  public sealed partial class QueryResult : pb::IMessage<QueryResult> {
    private static readonly pb::MessageParser<QueryResult> _parser = new pb::MessageParser<QueryResult>(() => new QueryResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryResult(QueryResult other) : this() {
      switch (other.ResultCase) {
        case ResultOneofCase.Extension:
          Extension = other.Extension.Clone();
          break;
        case ResultOneofCase.OrdersReports:
          OrdersReports = other.OrdersReports.Clone();
          break;
        case ResultOneofCase.Logs:
          Logs = other.Logs.Clone();
          break;
        case ResultOneofCase.AccountTradingRule:
          AccountTradingRule = other.AccountTradingRule.Clone();
          break;
        case ResultOneofCase.SupportedExchanges:
          SupportedExchanges = other.SupportedExchanges.Clone();
          break;
        case ResultOneofCase.Calendar:
          Calendar = other.Calendar.Clone();
          break;
        case ResultOneofCase.Instruments:
          Instruments = other.Instruments.Clone();
          break;
        case ResultOneofCase.Spreaders:
          Spreaders = other.Spreaders.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryResult Clone() {
      return new QueryResult(this);
    }

    /// <summary>Field number for the "extension" field.</summary>
    public const int ExtensionFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Extension {
      get { return resultCase_ == ResultOneofCase.Extension ? (global::Google.Protobuf.WellKnownTypes.Any) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Extension;
      }
    }

    /// <summary>Field number for the "ordersReports" field.</summary>
    public const int OrdersReportsFieldNumber = 2;
    /// <summary>
    /// Report with a list of historical orders according to specified parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.OrderReports OrdersReports {
      get { return resultCase_ == ResultOneofCase.OrdersReports ? (global::Com.Xceder.Messages.OrderReports) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.OrdersReports;
      }
    }

    /// <summary>Field number for the "logs" field.</summary>
    public const int LogsFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.RequestLogs Logs {
      get { return resultCase_ == ResultOneofCase.Logs ? (global::Com.Xceder.Messages.RequestLogs) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Logs;
      }
    }

    /// <summary>Field number for the "accountTradingRule" field.</summary>
    public const int AccountTradingRuleFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.AccountTradingRules AccountTradingRule {
      get { return resultCase_ == ResultOneofCase.AccountTradingRule ? (global::Com.Xceder.Messages.AccountTradingRules) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.AccountTradingRule;
      }
    }

    /// <summary>Field number for the "supportedExchanges" field.</summary>
    public const int SupportedExchangesFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.BrokerExchanges SupportedExchanges {
      get { return resultCase_ == ResultOneofCase.SupportedExchanges ? (global::Com.Xceder.Messages.BrokerExchanges) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.SupportedExchanges;
      }
    }

    /// <summary>Field number for the "calendar" field.</summary>
    public const int CalendarFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.ExchangeCalendar Calendar {
      get { return resultCase_ == ResultOneofCase.Calendar ? (global::Com.Xceder.Messages.ExchangeCalendar) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Calendar;
      }
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Instruments Instruments {
      get { return resultCase_ == ResultOneofCase.Instruments ? (global::Com.Xceder.Messages.Instruments) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Instruments;
      }
    }

    /// <summary>Field number for the "spreaders" field.</summary>
    public const int SpreadersFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Spreaders Spreaders {
      get { return resultCase_ == ResultOneofCase.Spreaders ? (global::Com.Xceder.Messages.Spreaders) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Spreaders;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      Extension = 1,
      OrdersReports = 2,
      Logs = 3,
      AccountTradingRule = 4,
      SupportedExchanges = 5,
      Calendar = 6,
      Instruments = 7,
      Spreaders = 8,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Extension, other.Extension)) return false;
      if (!object.Equals(OrdersReports, other.OrdersReports)) return false;
      if (!object.Equals(Logs, other.Logs)) return false;
      if (!object.Equals(AccountTradingRule, other.AccountTradingRule)) return false;
      if (!object.Equals(SupportedExchanges, other.SupportedExchanges)) return false;
      if (!object.Equals(Calendar, other.Calendar)) return false;
      if (!object.Equals(Instruments, other.Instruments)) return false;
      if (!object.Equals(Spreaders, other.Spreaders)) return false;
      if (ResultCase != other.ResultCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.Extension) hash ^= Extension.GetHashCode();
      if (resultCase_ == ResultOneofCase.OrdersReports) hash ^= OrdersReports.GetHashCode();
      if (resultCase_ == ResultOneofCase.Logs) hash ^= Logs.GetHashCode();
      if (resultCase_ == ResultOneofCase.AccountTradingRule) hash ^= AccountTradingRule.GetHashCode();
      if (resultCase_ == ResultOneofCase.SupportedExchanges) hash ^= SupportedExchanges.GetHashCode();
      if (resultCase_ == ResultOneofCase.Calendar) hash ^= Calendar.GetHashCode();
      if (resultCase_ == ResultOneofCase.Instruments) hash ^= Instruments.GetHashCode();
      if (resultCase_ == ResultOneofCase.Spreaders) hash ^= Spreaders.GetHashCode();
      hash ^= (int) resultCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultCase_ == ResultOneofCase.Extension) {
        output.WriteRawTag(10);
        output.WriteMessage(Extension);
      }
      if (resultCase_ == ResultOneofCase.OrdersReports) {
        output.WriteRawTag(18);
        output.WriteMessage(OrdersReports);
      }
      if (resultCase_ == ResultOneofCase.Logs) {
        output.WriteRawTag(26);
        output.WriteMessage(Logs);
      }
      if (resultCase_ == ResultOneofCase.AccountTradingRule) {
        output.WriteRawTag(34);
        output.WriteMessage(AccountTradingRule);
      }
      if (resultCase_ == ResultOneofCase.SupportedExchanges) {
        output.WriteRawTag(42);
        output.WriteMessage(SupportedExchanges);
      }
      if (resultCase_ == ResultOneofCase.Calendar) {
        output.WriteRawTag(50);
        output.WriteMessage(Calendar);
      }
      if (resultCase_ == ResultOneofCase.Instruments) {
        output.WriteRawTag(58);
        output.WriteMessage(Instruments);
      }
      if (resultCase_ == ResultOneofCase.Spreaders) {
        output.WriteRawTag(66);
        output.WriteMessage(Spreaders);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.Extension) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extension);
      }
      if (resultCase_ == ResultOneofCase.OrdersReports) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OrdersReports);
      }
      if (resultCase_ == ResultOneofCase.Logs) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Logs);
      }
      if (resultCase_ == ResultOneofCase.AccountTradingRule) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccountTradingRule);
      }
      if (resultCase_ == ResultOneofCase.SupportedExchanges) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SupportedExchanges);
      }
      if (resultCase_ == ResultOneofCase.Calendar) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Calendar);
      }
      if (resultCase_ == ResultOneofCase.Instruments) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instruments);
      }
      if (resultCase_ == ResultOneofCase.Spreaders) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spreaders);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryResult other) {
      if (other == null) {
        return;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.Extension:
          Extension = other.Extension;
          break;
        case ResultOneofCase.OrdersReports:
          OrdersReports = other.OrdersReports;
          break;
        case ResultOneofCase.Logs:
          Logs = other.Logs;
          break;
        case ResultOneofCase.AccountTradingRule:
          AccountTradingRule = other.AccountTradingRule;
          break;
        case ResultOneofCase.SupportedExchanges:
          SupportedExchanges = other.SupportedExchanges;
          break;
        case ResultOneofCase.Calendar:
          Calendar = other.Calendar;
          break;
        case ResultOneofCase.Instruments:
          Instruments = other.Instruments;
          break;
        case ResultOneofCase.Spreaders:
          Spreaders = other.Spreaders;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Protobuf.WellKnownTypes.Any subBuilder = new global::Google.Protobuf.WellKnownTypes.Any();
            if (resultCase_ == ResultOneofCase.Extension) {
              subBuilder.MergeFrom(Extension);
            }
            input.ReadMessage(subBuilder);
            Extension = subBuilder;
            break;
          }
          case 18: {
            global::Com.Xceder.Messages.OrderReports subBuilder = new global::Com.Xceder.Messages.OrderReports();
            if (resultCase_ == ResultOneofCase.OrdersReports) {
              subBuilder.MergeFrom(OrdersReports);
            }
            input.ReadMessage(subBuilder);
            OrdersReports = subBuilder;
            break;
          }
          case 26: {
            global::Com.Xceder.Messages.RequestLogs subBuilder = new global::Com.Xceder.Messages.RequestLogs();
            if (resultCase_ == ResultOneofCase.Logs) {
              subBuilder.MergeFrom(Logs);
            }
            input.ReadMessage(subBuilder);
            Logs = subBuilder;
            break;
          }
          case 34: {
            global::Com.Xceder.Messages.AccountTradingRules subBuilder = new global::Com.Xceder.Messages.AccountTradingRules();
            if (resultCase_ == ResultOneofCase.AccountTradingRule) {
              subBuilder.MergeFrom(AccountTradingRule);
            }
            input.ReadMessage(subBuilder);
            AccountTradingRule = subBuilder;
            break;
          }
          case 42: {
            global::Com.Xceder.Messages.BrokerExchanges subBuilder = new global::Com.Xceder.Messages.BrokerExchanges();
            if (resultCase_ == ResultOneofCase.SupportedExchanges) {
              subBuilder.MergeFrom(SupportedExchanges);
            }
            input.ReadMessage(subBuilder);
            SupportedExchanges = subBuilder;
            break;
          }
          case 50: {
            global::Com.Xceder.Messages.ExchangeCalendar subBuilder = new global::Com.Xceder.Messages.ExchangeCalendar();
            if (resultCase_ == ResultOneofCase.Calendar) {
              subBuilder.MergeFrom(Calendar);
            }
            input.ReadMessage(subBuilder);
            Calendar = subBuilder;
            break;
          }
          case 58: {
            global::Com.Xceder.Messages.Instruments subBuilder = new global::Com.Xceder.Messages.Instruments();
            if (resultCase_ == ResultOneofCase.Instruments) {
              subBuilder.MergeFrom(Instruments);
            }
            input.ReadMessage(subBuilder);
            Instruments = subBuilder;
            break;
          }
          case 66: {
            global::Com.Xceder.Messages.Spreaders subBuilder = new global::Com.Xceder.Messages.Spreaders();
            if (resultCase_ == ResultOneofCase.Spreaders) {
              subBuilder.MergeFrom(Spreaders);
            }
            input.ReadMessage(subBuilder);
            Spreaders = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExchangeCalendar : pb::IMessage<ExchangeCalendar> {
    private static readonly pb::MessageParser<ExchangeCalendar> _parser = new pb::MessageParser<ExchangeCalendar>(() => new ExchangeCalendar());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangeCalendar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeCalendar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeCalendar(ExchangeCalendar other) : this() {
      exchange_ = other.exchange_;
      holiday_ = other.holiday_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeCalendar Clone() {
      return new ExchangeCalendar(this);
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 1;
    private global::Com.Xceder.Messages.Exchange.Types.EXCHANGE exchange_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Exchange.Types.EXCHANGE Exchange {
      get { return exchange_; }
      set {
        exchange_ = value;
      }
    }

    /// <summary>Field number for the "holiday" field.</summary>
    public const int HolidayFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Xceder.Messages.ExchangeCalendar.Types.Holiday> _repeated_holiday_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Xceder.Messages.ExchangeCalendar.Types.Holiday.Parser);
    private readonly pbc::RepeatedField<global::Com.Xceder.Messages.ExchangeCalendar.Types.Holiday> holiday_ = new pbc::RepeatedField<global::Com.Xceder.Messages.ExchangeCalendar.Types.Holiday>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Xceder.Messages.ExchangeCalendar.Types.Holiday> Holiday {
      get { return holiday_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExchangeCalendar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExchangeCalendar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Exchange != other.Exchange) return false;
      if(!holiday_.Equals(other.holiday_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Exchange != 0) hash ^= Exchange.GetHashCode();
      hash ^= holiday_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Exchange != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Exchange);
      }
      holiday_.WriteTo(output, _repeated_holiday_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Exchange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Exchange);
      }
      size += holiday_.CalculateSize(_repeated_holiday_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExchangeCalendar other) {
      if (other == null) {
        return;
      }
      if (other.Exchange != 0) {
        Exchange = other.Exchange;
      }
      holiday_.Add(other.holiday_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            exchange_ = (global::Com.Xceder.Messages.Exchange.Types.EXCHANGE) input.ReadEnum();
            break;
          }
          case 18: {
            holiday_.AddEntriesFrom(input, _repeated_holiday_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ExchangeCalendar message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Holiday : pb::IMessage<Holiday> {
        private static readonly pb::MessageParser<Holiday> _parser = new pb::MessageParser<Holiday>(() => new Holiday());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Holiday> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Xceder.Messages.ExchangeCalendar.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Holiday() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Holiday(Holiday other) : this() {
          epochDay_ = other.epochDay_;
          holiday_ = other.holiday_;
          hours_ = other.hours_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Holiday Clone() {
          return new Holiday(this);
        }

        /// <summary>Field number for the "epochDay" field.</summary>
        public const int EpochDayFieldNumber = 1;
        private uint epochDay_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint EpochDay {
          get { return epochDay_; }
          set {
            epochDay_ = value;
          }
        }

        /// <summary>Field number for the "holiday" field.</summary>
        public const int Holiday_FieldNumber = 2;
        private string holiday_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Holiday_ {
          get { return holiday_; }
          set {
            holiday_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "hours" field.</summary>
        public const int HoursFieldNumber = 3;
        private uint hours_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Hours {
          get { return hours_; }
          set {
            hours_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Holiday);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Holiday other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EpochDay != other.EpochDay) return false;
          if (Holiday_ != other.Holiday_) return false;
          if (Hours != other.Hours) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (EpochDay != 0) hash ^= EpochDay.GetHashCode();
          if (Holiday_.Length != 0) hash ^= Holiday_.GetHashCode();
          if (Hours != 0) hash ^= Hours.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (EpochDay != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(EpochDay);
          }
          if (Holiday_.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Holiday_);
          }
          if (Hours != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Hours);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (EpochDay != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EpochDay);
          }
          if (Holiday_.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Holiday_);
          }
          if (Hours != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hours);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Holiday other) {
          if (other == null) {
            return;
          }
          if (other.EpochDay != 0) {
            EpochDay = other.EpochDay;
          }
          if (other.Holiday_.Length != 0) {
            Holiday_ = other.Holiday_;
          }
          if (other.Hours != 0) {
            Hours = other.Hours;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                EpochDay = input.ReadUInt32();
                break;
              }
              case 18: {
                Holiday_ = input.ReadString();
                break;
              }
              case 24: {
                Hours = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class BrokerExchanges : pb::IMessage<BrokerExchanges> {
    private static readonly pb::MessageParser<BrokerExchanges> _parser = new pb::MessageParser<BrokerExchanges>(() => new BrokerExchanges());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BrokerExchanges> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrokerExchanges() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrokerExchanges(BrokerExchanges other) : this() {
      broker_ = other.broker_.Clone();
      exchange_ = other.exchange_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrokerExchanges Clone() {
      return new BrokerExchanges(this);
    }

    /// <summary>Field number for the "broker" field.</summary>
    public const int BrokerFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Xceder.Messages.BROKER> _repeated_broker_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::Com.Xceder.Messages.BROKER) x);
    private readonly pbc::RepeatedField<global::Com.Xceder.Messages.BROKER> broker_ = new pbc::RepeatedField<global::Com.Xceder.Messages.BROKER>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Xceder.Messages.BROKER> Broker {
      get { return broker_; }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Xceder.Messages.Exchange.Types.EXCHANGE> _repeated_exchange_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::Com.Xceder.Messages.Exchange.Types.EXCHANGE) x);
    private readonly pbc::RepeatedField<global::Com.Xceder.Messages.Exchange.Types.EXCHANGE> exchange_ = new pbc::RepeatedField<global::Com.Xceder.Messages.Exchange.Types.EXCHANGE>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Xceder.Messages.Exchange.Types.EXCHANGE> Exchange {
      get { return exchange_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BrokerExchanges);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BrokerExchanges other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!broker_.Equals(other.broker_)) return false;
      if(!exchange_.Equals(other.exchange_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= broker_.GetHashCode();
      hash ^= exchange_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      broker_.WriteTo(output, _repeated_broker_codec);
      exchange_.WriteTo(output, _repeated_exchange_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += broker_.CalculateSize(_repeated_broker_codec);
      size += exchange_.CalculateSize(_repeated_exchange_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BrokerExchanges other) {
      if (other == null) {
        return;
      }
      broker_.Add(other.broker_);
      exchange_.Add(other.exchange_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            broker_.AddEntriesFrom(input, _repeated_broker_codec);
            break;
          }
          case 18:
          case 16: {
            exchange_.AddEntriesFrom(input, _repeated_exchange_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///based on different data, the parameter may be used differently
  /// </summary>
  public sealed partial class QueryConditions : pb::IMessage<QueryConditions> {
    private static readonly pb::MessageParser<QueryConditions> _parser = new pb::MessageParser<QueryConditions>(() => new QueryConditions());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryConditions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryConditions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryConditions(QueryConditions other) : this() {
      fromUTC_ = other.fromUTC_;
      toUTC_ = other.toUTC_;
      broker_ = other.broker_;
      exchange_ = other.exchange_;
      symbol_ = other.symbol_;
      product_ = other.product_;
      instrumentID_ = other.instrumentID_;
      account_ = other.account_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryConditions Clone() {
      return new QueryConditions(this);
    }

    /// <summary>Field number for the "fromUTC" field.</summary>
    public const int FromUTCFieldNumber = 1;
    private ulong fromUTC_;
    /// <summary>
    ///include this time, this can be 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FromUTC {
      get { return fromUTC_; }
      set {
        fromUTC_ = value;
      }
    }

    /// <summary>Field number for the "toUTC" field.</summary>
    public const int ToUTCFieldNumber = 2;
    private ulong toUTC_;
    /// <summary>
    ///exclude this time, this can be 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ToUTC {
      get { return toUTC_; }
      set {
        toUTC_ = value;
      }
    }

    /// <summary>Field number for the "broker" field.</summary>
    public const int BrokerFieldNumber = 3;
    private global::Com.Xceder.Messages.BROKER broker_ = 0;
    /// <summary>
    ///if this query related to particular broker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.BROKER Broker {
      get { return broker_; }
      set {
        broker_ = value;
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 4;
    private global::Com.Xceder.Messages.Exchange.Types.EXCHANGE exchange_ = 0;
    /// <summary>
    ///if this query related to particular broker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Exchange.Types.EXCHANGE Exchange {
      get { return exchange_; }
      set {
        exchange_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 5;
    private string symbol_ = "";
    /// <summary>
    ///if this query related to particular symbol
    ///for spreader query, it is the spreader name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "product" field.</summary>
    public const int ProductFieldNumber = 6;
    private global::Com.Xceder.Messages.Instrument.Types.PRODUCT product_ = 0;
    /// <summary>
    ///if this query related to particular product type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Instrument.Types.PRODUCT Product {
      get { return product_; }
      set {
        product_ = value;
      }
    }

    /// <summary>Field number for the "instrumentID" field.</summary>
    public const int InstrumentIDFieldNumber = 7;
    private ulong instrumentID_;
    /// <summary>
    ///if this query related to particular instrument, when this is set for instrument query, the above condition will be ignored
    ///in spreader query, it is the spreader ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InstrumentID {
      get { return instrumentID_; }
      set {
        instrumentID_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 8;
    private uint account_;
    /// <summary>
    ///if  this query related to the particular user, only allow to query itself or its client account's info
    ///0 means query itself info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryConditions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryConditions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromUTC != other.FromUTC) return false;
      if (ToUTC != other.ToUTC) return false;
      if (Broker != other.Broker) return false;
      if (Exchange != other.Exchange) return false;
      if (Symbol != other.Symbol) return false;
      if (Product != other.Product) return false;
      if (InstrumentID != other.InstrumentID) return false;
      if (Account != other.Account) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromUTC != 0UL) hash ^= FromUTC.GetHashCode();
      if (ToUTC != 0UL) hash ^= ToUTC.GetHashCode();
      if (Broker != 0) hash ^= Broker.GetHashCode();
      if (Exchange != 0) hash ^= Exchange.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Product != 0) hash ^= Product.GetHashCode();
      if (InstrumentID != 0UL) hash ^= InstrumentID.GetHashCode();
      if (Account != 0) hash ^= Account.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromUTC != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FromUTC);
      }
      if (ToUTC != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ToUTC);
      }
      if (Broker != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Broker);
      }
      if (Exchange != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Exchange);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Symbol);
      }
      if (Product != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Product);
      }
      if (InstrumentID != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(InstrumentID);
      }
      if (Account != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Account);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromUTC);
      }
      if (ToUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ToUTC);
      }
      if (Broker != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Broker);
      }
      if (Exchange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Exchange);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Product != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Product);
      }
      if (InstrumentID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InstrumentID);
      }
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Account);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryConditions other) {
      if (other == null) {
        return;
      }
      if (other.FromUTC != 0UL) {
        FromUTC = other.FromUTC;
      }
      if (other.ToUTC != 0UL) {
        ToUTC = other.ToUTC;
      }
      if (other.Broker != 0) {
        Broker = other.Broker;
      }
      if (other.Exchange != 0) {
        Exchange = other.Exchange;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Product != 0) {
        Product = other.Product;
      }
      if (other.InstrumentID != 0UL) {
        InstrumentID = other.InstrumentID;
      }
      if (other.Account != 0) {
        Account = other.Account;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromUTC = input.ReadUInt64();
            break;
          }
          case 16: {
            ToUTC = input.ReadUInt64();
            break;
          }
          case 24: {
            broker_ = (global::Com.Xceder.Messages.BROKER) input.ReadEnum();
            break;
          }
          case 32: {
            exchange_ = (global::Com.Xceder.Messages.Exchange.Types.EXCHANGE) input.ReadEnum();
            break;
          }
          case 42: {
            Symbol = input.ReadString();
            break;
          }
          case 48: {
            product_ = (global::Com.Xceder.Messages.Instrument.Types.PRODUCT) input.ReadEnum();
            break;
          }
          case 56: {
            InstrumentID = input.ReadUInt64();
            break;
          }
          case 64: {
            Account = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OrderReports : pb::IMessage<OrderReports> {
    private static readonly pb::MessageParser<OrderReports> _parser = new pb::MessageParser<OrderReports>(() => new OrderReports());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderReports> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderReports() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderReports(OrderReports other) : this() {
      orderReport_ = other.orderReport_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderReports Clone() {
      return new OrderReports(this);
    }

    /// <summary>Field number for the "orderReport" field.</summary>
    public const int OrderReportFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Xceder.Messages.OrderReport> _repeated_orderReport_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Xceder.Messages.OrderReport.Parser);
    private readonly pbc::RepeatedField<global::Com.Xceder.Messages.OrderReport> orderReport_ = new pbc::RepeatedField<global::Com.Xceder.Messages.OrderReport>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Xceder.Messages.OrderReport> OrderReport {
      get { return orderReport_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderReports);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderReports other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!orderReport_.Equals(other.orderReport_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= orderReport_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      orderReport_.WriteTo(output, _repeated_orderReport_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += orderReport_.CalculateSize(_repeated_orderReport_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderReports other) {
      if (other == null) {
        return;
      }
      orderReport_.Add(other.orderReport_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            orderReport_.AddEntriesFrom(input, _repeated_orderReport_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OrderReport : pb::IMessage<OrderReport> {
    private static readonly pb::MessageParser<OrderReport> _parser = new pb::MessageParser<OrderReport>(() => new OrderReport());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderReport(OrderReport other) : this() {
      Order = other.order_ != null ? other.Order.Clone() : null;
      report_ = other.report_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderReport Clone() {
      return new OrderReport(this);
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 1;
    private global::Com.Xceder.Messages.Order order_;
    /// <summary>
    ///if it is not empty, must have the reports
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Order Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    /// <summary>Field number for the "report" field.</summary>
    public const int ReportFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Xceder.Messages.ExecutionReport> _repeated_report_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Xceder.Messages.ExecutionReport.Parser);
    private readonly pbc::RepeatedField<global::Com.Xceder.Messages.ExecutionReport> report_ = new pbc::RepeatedField<global::Com.Xceder.Messages.ExecutionReport>();
    /// <summary>
    ///can be used without order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Xceder.Messages.ExecutionReport> Report {
      get { return report_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Order, other.Order)) return false;
      if(!report_.Equals(other.report_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (order_ != null) hash ^= Order.GetHashCode();
      hash ^= report_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (order_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Order);
      }
      report_.WriteTo(output, _repeated_report_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (order_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Order);
      }
      size += report_.CalculateSize(_repeated_report_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderReport other) {
      if (other == null) {
        return;
      }
      if (other.order_ != null) {
        if (order_ == null) {
          order_ = new global::Com.Xceder.Messages.Order();
        }
        Order.MergeFrom(other.Order);
      }
      report_.Add(other.report_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (order_ == null) {
              order_ = new global::Com.Xceder.Messages.Order();
            }
            input.ReadMessage(order_);
            break;
          }
          case 18: {
            report_.AddEntriesFrom(input, _repeated_report_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RequestLogs : pb::IMessage<RequestLogs> {
    private static readonly pb::MessageParser<RequestLogs> _parser = new pb::MessageParser<RequestLogs>(() => new RequestLogs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestLogs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestLogs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestLogs(RequestLogs other) : this() {
      logs_ = other.logs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestLogs Clone() {
      return new RequestLogs(this);
    }

    /// <summary>Field number for the "logs" field.</summary>
    public const int LogsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Xceder.Messages.RequestLog> _repeated_logs_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Xceder.Messages.RequestLog.Parser);
    private readonly pbc::RepeatedField<global::Com.Xceder.Messages.RequestLog> logs_ = new pbc::RepeatedField<global::Com.Xceder.Messages.RequestLog>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Xceder.Messages.RequestLog> Logs {
      get { return logs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestLogs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestLogs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!logs_.Equals(other.logs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= logs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      logs_.WriteTo(output, _repeated_logs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += logs_.CalculateSize(_repeated_logs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestLogs other) {
      if (other == null) {
        return;
      }
      logs_.Add(other.logs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            logs_.AddEntriesFrom(input, _repeated_logs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RequestLog : pb::IMessage<RequestLog> {
    private static readonly pb::MessageParser<RequestLog> _parser = new pb::MessageParser<RequestLog>(() => new RequestLog());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestLog(RequestLog other) : this() {
      Request = other.request_ != null ? other.Request.Clone() : null;
      Result = other.result_ != null ? other.Result.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestLog Clone() {
      return new RequestLog(this);
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 1;
    private global::Com.Xceder.Messages.Request request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Request Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Com.Xceder.Messages.Result result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Request, other.Request)) return false;
      if (!object.Equals(Result, other.Result)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (request_ != null) hash ^= Request.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (request_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Request);
      }
      if (result_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestLog other) {
      if (other == null) {
        return;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::Com.Xceder.Messages.Request();
        }
        Request.MergeFrom(other.Request);
      }
      if (other.result_ != null) {
        if (result_ == null) {
          result_ = new global::Com.Xceder.Messages.Result();
        }
        Result.MergeFrom(other.Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (request_ == null) {
              request_ = new global::Com.Xceder.Messages.Request();
            }
            input.ReadMessage(request_);
            break;
          }
          case 18: {
            if (result_ == null) {
              result_ = new global::Com.Xceder.Messages.Result();
            }
            input.ReadMessage(result_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Trade routing order. It is used as new order request and as a part of order status updates.
  /// </summary>
  public sealed partial class Order : pb::IMessage<Order> {
    private static readonly pb::MessageParser<Order> _parser = new pb::MessageParser<Order>(() => new Order());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Order> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Order() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Order(Order other) : this() {
      account_ = other.account_;
      enterBy_ = other.enterBy_;
      submitUTC_ = other.submitUTC_;
      tag_ = other.tag_;
      leg_ = other.leg_;
      indicator_ = other.indicator_;
      switch (other.DetailCase) {
        case DetailOneofCase.Params:
          Params = other.Params.Clone();
          break;
        case DetailOneofCase.Compound:
          Compound = other.Compound.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Order Clone() {
      return new Order(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private uint account_;
    /// <summary>
    /// this order owner user ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "enterBy" field.</summary>
    public const int EnterByFieldNumber = 2;
    private uint enterBy_;
    /// <summary>
    /// who placed the order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnterBy {
      get { return enterBy_; }
      set {
        enterBy_ = value;
      }
    }

    /// <summary>Field number for the "submitUTC" field.</summary>
    public const int SubmitUTCFieldNumber = 3;
    private ulong submitUTC_;
    /// <summary>
    ///order source time when an order was submitted (UTC).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubmitUTC {
      get { return submitUTC_; }
      set {
        submitUTC_ = value;
      }
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 4;
    private string tag_ = "";
    /// <summary>
    /// tag for this order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "leg" field.</summary>
    public const int LegFieldNumber = 5;
    private uint leg_;
    /// <summary>
    ///this is for the multipe leg orders. normally it should be 0 for non-leg orders
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Leg {
      get { return leg_; }
      set {
        leg_ = value;
      }
    }

    /// <summary>Field number for the "indicator" field.</summary>
    public const int IndicatorFieldNumber = 6;
    private global::Com.Xceder.Messages.Order.Types.SUBMITMODE indicator_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Order.Types.SUBMITMODE Indicator {
      get { return indicator_; }
      set {
        indicator_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.OrderParams Params {
      get { return detailCase_ == DetailOneofCase.Params ? (global::Com.Xceder.Messages.OrderParams) detail_ : null; }
      set {
        detail_ = value;
        detailCase_ = value == null ? DetailOneofCase.None : DetailOneofCase.Params;
      }
    }

    /// <summary>Field number for the "compound" field.</summary>
    public const int CompoundFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.CompoundOrder Compound {
      get { return detailCase_ == DetailOneofCase.Compound ? (global::Com.Xceder.Messages.CompoundOrder) detail_ : null; }
      set {
        detail_ = value;
        detailCase_ = value == null ? DetailOneofCase.None : DetailOneofCase.Compound;
      }
    }

    private object detail_;
    /// <summary>Enum of possible cases for the "detail" oneof.</summary>
    public enum DetailOneofCase {
      None = 0,
      Params = 7,
      Compound = 8,
    }
    private DetailOneofCase detailCase_ = DetailOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetailOneofCase DetailCase {
      get { return detailCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDetail() {
      detailCase_ = DetailOneofCase.None;
      detail_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Order);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Order other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (EnterBy != other.EnterBy) return false;
      if (SubmitUTC != other.SubmitUTC) return false;
      if (Tag != other.Tag) return false;
      if (Leg != other.Leg) return false;
      if (Indicator != other.Indicator) return false;
      if (!object.Equals(Params, other.Params)) return false;
      if (!object.Equals(Compound, other.Compound)) return false;
      if (DetailCase != other.DetailCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account != 0) hash ^= Account.GetHashCode();
      if (EnterBy != 0) hash ^= EnterBy.GetHashCode();
      if (SubmitUTC != 0UL) hash ^= SubmitUTC.GetHashCode();
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      if (Leg != 0) hash ^= Leg.GetHashCode();
      if (Indicator != 0) hash ^= Indicator.GetHashCode();
      if (detailCase_ == DetailOneofCase.Params) hash ^= Params.GetHashCode();
      if (detailCase_ == DetailOneofCase.Compound) hash ^= Compound.GetHashCode();
      hash ^= (int) detailCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Account);
      }
      if (EnterBy != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(EnterBy);
      }
      if (SubmitUTC != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SubmitUTC);
      }
      if (Tag.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Tag);
      }
      if (Leg != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Leg);
      }
      if (Indicator != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Indicator);
      }
      if (detailCase_ == DetailOneofCase.Params) {
        output.WriteRawTag(58);
        output.WriteMessage(Params);
      }
      if (detailCase_ == DetailOneofCase.Compound) {
        output.WriteRawTag(66);
        output.WriteMessage(Compound);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Account);
      }
      if (EnterBy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnterBy);
      }
      if (SubmitUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SubmitUTC);
      }
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (Leg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Leg);
      }
      if (Indicator != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Indicator);
      }
      if (detailCase_ == DetailOneofCase.Params) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Params);
      }
      if (detailCase_ == DetailOneofCase.Compound) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Compound);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Order other) {
      if (other == null) {
        return;
      }
      if (other.Account != 0) {
        Account = other.Account;
      }
      if (other.EnterBy != 0) {
        EnterBy = other.EnterBy;
      }
      if (other.SubmitUTC != 0UL) {
        SubmitUTC = other.SubmitUTC;
      }
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
      if (other.Leg != 0) {
        Leg = other.Leg;
      }
      if (other.Indicator != 0) {
        Indicator = other.Indicator;
      }
      switch (other.DetailCase) {
        case DetailOneofCase.Params:
          Params = other.Params;
          break;
        case DetailOneofCase.Compound:
          Compound = other.Compound;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadUInt32();
            break;
          }
          case 16: {
            EnterBy = input.ReadUInt32();
            break;
          }
          case 24: {
            SubmitUTC = input.ReadUInt64();
            break;
          }
          case 34: {
            Tag = input.ReadString();
            break;
          }
          case 40: {
            Leg = input.ReadUInt32();
            break;
          }
          case 48: {
            indicator_ = (global::Com.Xceder.Messages.Order.Types.SUBMITMODE) input.ReadEnum();
            break;
          }
          case 58: {
            global::Com.Xceder.Messages.OrderParams subBuilder = new global::Com.Xceder.Messages.OrderParams();
            if (detailCase_ == DetailOneofCase.Params) {
              subBuilder.MergeFrom(Params);
            }
            input.ReadMessage(subBuilder);
            Params = subBuilder;
            break;
          }
          case 66: {
            global::Com.Xceder.Messages.CompoundOrder subBuilder = new global::Com.Xceder.Messages.CompoundOrder();
            if (detailCase_ == DetailOneofCase.Compound) {
              subBuilder.MergeFrom(Compound);
            }
            input.ReadMessage(subBuilder);
            Compound = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Order message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///FIX OrdType char code
      /// </summary>
      public enum TYPE {
        /// <summary>
        /// Limit order, buy or sell by price that is the same or better then specified limit price.
        /// </summary>
        [pbr::OriginalName("LMT")] Lmt = 0,
        /// <summary>
        /// Stop order, Order becomes a Market when market reaches order's stop price
        /// (which is on opposite side of market).
        /// </summary>
        [pbr::OriginalName("STP")] Stp = 1,
        /// <summary>
        /// Stop-limit order, Order becomes a Limit when market reaches order's stop price.
        /// </summary>
        [pbr::OriginalName("STL")] Stl = 2,
        /// <summary>
        /// Market order, buy or sell by the best available opposite price.
        /// </summary>
        [pbr::OriginalName("MKT")] Mkt = 3,
      }

      /// <summary>
      ///FIX TimeInForce
      /// </summary>
      public enum TIMEINFORCE {
        [pbr::OriginalName("DAY")] Day = 0,
        /// <summary>
        ///Good Till Cancel
        /// </summary>
        [pbr::OriginalName("GTC")] Gtc = 1,
        /// <summary>
        ///At the Opening
        /// </summary>
        [pbr::OriginalName("OPG")] Opg = 2,
        /// <summary>
        ///Immediate or Cancel
        /// </summary>
        [pbr::OriginalName("IOC")] Ioc = 3,
        /// <summary>
        ///Fill or Kill
        /// </summary>
        [pbr::OriginalName("FOK")] Fok = 4,
        /// <summary>
        ///Good in Session
        /// </summary>
        [pbr::OriginalName("GIS")] Gis = 8,
      }

      public enum EXECINSTRUCTION {
        /// <summary>
        /// All or None (fill order only completely).
        /// </summary>
        [pbr::OriginalName("AON")] Aon = 0,
        /// <summary>
        /// Iceberg (show only part of order size).
        /// </summary>
        [pbr::OriginalName("ICEBERG")] Iceberg = 1,
        /// <summary>
        /// Quantity triggered (aka DOM Triggered, honor additional quantity threshold for triggering).
        /// </summary>
        [pbr::OriginalName("QT")] Qt = 2,
        /// <summary>
        /// Trailing order (price of the order is following market one direction by specific offset).
        /// </summary>
        [pbr::OriginalName("TRAIL")] Trail = 3,
        /// <summary>
        /// Funari (Limit order becomes a Market on Close).
        /// </summary>
        [pbr::OriginalName("FUNARI")] Funari = 4,
        /// <summary>
        /// Market if Touched (Limit order becomes a Market when market reaches order's limit price).
        /// </summary>
        [pbr::OriginalName("MIT")] Mit = 5,
        /// <summary>
        /// Market Limit Market is a limit order that is used to place a buy order above the best offer
        /// to fill by the best offer or a sell order below the best bid to fill by the best bid.
        /// </summary>
        [pbr::OriginalName("MLM")] Mlm = 6,
      }

      public enum TRAILINGPEG {
        /// <summary>
        /// Trail the best bid.
        /// </summary>
        [pbr::OriginalName("BESTBID")] Bestbid = 0,
        /// <summary>
        /// Trail the best ask.
        /// </summary>
        [pbr::OriginalName("BESTASK")] Bestask = 1,
        /// <summary>
        /// Trail the last trade.
        /// </summary>
        [pbr::OriginalName("LASTTRADE")] Lasttrade = 2,
      }

      public enum SUBMITMODE {
        [pbr::OriginalName("AUTOMATED")] Automated = 0,
        [pbr::OriginalName("MANUAL")] Manual = 1,
      }

    }
    #endregion

  }

  public sealed partial class OrderParams : pb::IMessage<OrderParams> {
    private static readonly pb::MessageParser<OrderParams> _parser = new pb::MessageParser<OrderParams>(() => new OrderParams());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderParams(OrderParams other) : this() {
      origClOrdID_ = other.origClOrdID_;
      instrument_ = other.instrument_;
      side_ = other.side_;
      orderType_ = other.orderType_;
      execInstruction_ = other.execInstruction_.Clone();
      timeInForce_ = other.timeInForce_;
      orderQty_ = other.orderQty_;
      limitPrice_ = other.limitPrice_;
      stopPrice_ = other.stopPrice_;
      visibleQty_ = other.visibleQty_;
      minVisibleQty_ = other.minVisibleQty_;
      goodThruUTC_ = other.goodThruUTC_;
      regulatoryAlgorithm_ = other.regulatoryAlgorithm_;
      trailOffset_ = other.trailOffset_;
      trailingPeg_ = other.trailingPeg_;
      triggerQty_ = other.triggerQty_;
      activationUTC_ = other.activationUTC_;
      suspensionUTC_ = other.suspensionUTC_;
      currency_ = other.currency_;
      close_ = other.close_;
      aggressive_ = other.aggressive_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderParams Clone() {
      return new OrderParams(this);
    }

    /// <summary>Field number for the "origClOrdID" field.</summary>
    public const int OrigClOrdIDFieldNumber = 1;
    private ulong origClOrdID_;
    /// <summary>
    ///if this order is replaced/withdraw, this is its original clOrdID. otherwise, it should be 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OrigClOrdID {
      get { return origClOrdID_; }
      set {
        origClOrdID_ = value;
      }
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 2;
    private ulong instrument_;
    /// <summary>
    ///instrument/spreader ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 3;
    private global::Com.Xceder.Messages.SIDE side_ = 0;
    /// <summary>
    /// Order side.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.SIDE Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "orderType" field.</summary>
    public const int OrderTypeFieldNumber = 4;
    private global::Com.Xceder.Messages.Order.Types.TYPE orderType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Order.Types.TYPE OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    /// <summary>Field number for the "execInstruction" field.</summary>
    public const int ExecInstructionFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Com.Xceder.Messages.Order.Types.EXECINSTRUCTION> _repeated_execInstruction_codec
        = pb::FieldCodec.ForEnum(42, x => (int) x, x => (global::Com.Xceder.Messages.Order.Types.EXECINSTRUCTION) x);
    private readonly pbc::RepeatedField<global::Com.Xceder.Messages.Order.Types.EXECINSTRUCTION> execInstruction_ = new pbc::RepeatedField<global::Com.Xceder.Messages.Order.Types.EXECINSTRUCTION>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Xceder.Messages.Order.Types.EXECINSTRUCTION> ExecInstruction {
      get { return execInstruction_; }
    }

    /// <summary>Field number for the "timeInForce" field.</summary>
    public const int TimeInForceFieldNumber = 6;
    private global::Com.Xceder.Messages.Order.Types.TIMEINFORCE timeInForce_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Order.Types.TIMEINFORCE TimeInForce {
      get { return timeInForce_; }
      set {
        timeInForce_ = value;
      }
    }

    /// <summary>Field number for the "orderQty" field.</summary>
    public const int OrderQtyFieldNumber = 7;
    private uint orderQty_;
    /// <summary>
    /// Total positive size of the order. if the qty is 0, means the order is requested to be cancelled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OrderQty {
      get { return orderQty_; }
      set {
        orderQty_ = value;
      }
    }

    /// <summary>Field number for the "limitPrice" field.</summary>
    public const int LimitPriceFieldNumber = 8;
    private double limitPrice_;
    /// <summary>
    ///Limit price of the order (required for Limit and Stop-limit orders).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LimitPrice {
      get { return limitPrice_; }
      set {
        limitPrice_ = value;
      }
    }

    /// <summary>Field number for the "stopPrice" field.</summary>
    public const int StopPriceFieldNumber = 9;
    private double stopPrice_;
    /// <summary>
    /// Stop price of the order (required for Stop and Stop-limit orders).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StopPrice {
      get { return stopPrice_; }
      set {
        stopPrice_ = value;
      }
    }

    /// <summary>Field number for the "visibleQty" field.</summary>
    public const int VisibleQtyFieldNumber = 10;
    private uint visibleQty_;
    /// <summary>
    /// Visible size of the order for Icebergs, if it is 0 means all visible.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VisibleQty {
      get { return visibleQty_; }
      set {
        visibleQty_ = value;
      }
    }

    /// <summary>Field number for the "minVisibleQty" field.</summary>
    public const int MinVisibleQtyFieldNumber = 11;
    private uint minVisibleQty_;
    /// <summary>
    /// Minimum visible positive size of the order
    /// used for iceberg orders with 'random visible size',
    /// must be &lt; visible_qty.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinVisibleQty {
      get { return minVisibleQty_; }
      set {
        minVisibleQty_ = value;
      }
    }

    /// <summary>Field number for the "goodThruUTC" field.</summary>
    public const int GoodThruUTCFieldNumber = 12;
    private ulong goodThruUTC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GoodThruUTC {
      get { return goodThruUTC_; }
      set {
        goodThruUTC_ = value;
      }
    }

    /// <summary>Field number for the "regulatoryAlgorithm" field.</summary>
    public const int RegulatoryAlgorithmFieldNumber = 13;
    private uint regulatoryAlgorithm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RegulatoryAlgorithm {
      get { return regulatoryAlgorithm_; }
      set {
        regulatoryAlgorithm_ = value;
      }
    }

    /// <summary>Field number for the "trailOffset" field.</summary>
    public const int TrailOffsetFieldNumber = 14;
    private uint trailOffset_;
    /// <summary>
    /// Maximum offset between market and limit prices for trail orders.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TrailOffset {
      get { return trailOffset_; }
      set {
        trailOffset_ = value;
      }
    }

    /// <summary>Field number for the "trailingPeg" field.</summary>
    public const int TrailingPegFieldNumber = 15;
    private global::Com.Xceder.Messages.Order.Types.TRAILINGPEG trailingPeg_ = 0;
    /// <summary>
    /// Trailing limit peg to follow specific side of the market.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Order.Types.TRAILINGPEG TrailingPeg {
      get { return trailingPeg_; }
      set {
        trailingPeg_ = value;
      }
    }

    /// <summary>Field number for the "triggerQty" field.</summary>
    public const int TriggerQtyFieldNumber = 16;
    private uint triggerQty_;
    /// <summary>
    /// Trigger quantity (threshold) as additional stop order activation condition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TriggerQty {
      get { return triggerQty_; }
      set {
        triggerQty_ = value;
      }
    }

    /// <summary>Field number for the "activationUTC" field.</summary>
    public const int ActivationUTCFieldNumber = 17;
    private ulong activationUTC_;
    /// <summary>
    /// Time when order should be submitted to execution system as assigned by client (UTC).
    ///if it is 0 means, this order is in suspending status, need activation request to activate it
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ActivationUTC {
      get { return activationUTC_; }
      set {
        activationUTC_ = value;
      }
    }

    /// <summary>Field number for the "suspensionUTC" field.</summary>
    public const int SuspensionUTCFieldNumber = 18;
    private ulong suspensionUTC_;
    /// <summary>
    /// Time when order should be suspended (UTC).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SuspensionUTC {
      get { return suspensionUTC_; }
      set {
        suspensionUTC_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 19;
    private string currency_ = "";
    /// <summary>
    ///ISO 3 charactor currency
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "close" field.</summary>
    public const int CloseFieldNumber = 20;
    private bool close_;
    /// <summary>
    /// True if order is used for closing/ reducing a position, opening/ increasing otherwise
    /// default is false, means open position
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Close {
      get { return close_; }
      set {
        close_ = value;
      }
    }

    /// <summary>Field number for the "aggressive" field.</summary>
    public const int AggressiveFieldNumber = 21;
    private bool aggressive_;
    /// <summary>
    /// True if the order is aggressive (Fixed Income specific order modifier).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Aggressive {
      get { return aggressive_; }
      set {
        aggressive_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrigClOrdID != other.OrigClOrdID) return false;
      if (Instrument != other.Instrument) return false;
      if (Side != other.Side) return false;
      if (OrderType != other.OrderType) return false;
      if(!execInstruction_.Equals(other.execInstruction_)) return false;
      if (TimeInForce != other.TimeInForce) return false;
      if (OrderQty != other.OrderQty) return false;
      if (LimitPrice != other.LimitPrice) return false;
      if (StopPrice != other.StopPrice) return false;
      if (VisibleQty != other.VisibleQty) return false;
      if (MinVisibleQty != other.MinVisibleQty) return false;
      if (GoodThruUTC != other.GoodThruUTC) return false;
      if (RegulatoryAlgorithm != other.RegulatoryAlgorithm) return false;
      if (TrailOffset != other.TrailOffset) return false;
      if (TrailingPeg != other.TrailingPeg) return false;
      if (TriggerQty != other.TriggerQty) return false;
      if (ActivationUTC != other.ActivationUTC) return false;
      if (SuspensionUTC != other.SuspensionUTC) return false;
      if (Currency != other.Currency) return false;
      if (Close != other.Close) return false;
      if (Aggressive != other.Aggressive) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrigClOrdID != 0UL) hash ^= OrigClOrdID.GetHashCode();
      if (Instrument != 0UL) hash ^= Instrument.GetHashCode();
      if (Side != 0) hash ^= Side.GetHashCode();
      if (OrderType != 0) hash ^= OrderType.GetHashCode();
      hash ^= execInstruction_.GetHashCode();
      if (TimeInForce != 0) hash ^= TimeInForce.GetHashCode();
      if (OrderQty != 0) hash ^= OrderQty.GetHashCode();
      if (LimitPrice != 0D) hash ^= LimitPrice.GetHashCode();
      if (StopPrice != 0D) hash ^= StopPrice.GetHashCode();
      if (VisibleQty != 0) hash ^= VisibleQty.GetHashCode();
      if (MinVisibleQty != 0) hash ^= MinVisibleQty.GetHashCode();
      if (GoodThruUTC != 0UL) hash ^= GoodThruUTC.GetHashCode();
      if (RegulatoryAlgorithm != 0) hash ^= RegulatoryAlgorithm.GetHashCode();
      if (TrailOffset != 0) hash ^= TrailOffset.GetHashCode();
      if (TrailingPeg != 0) hash ^= TrailingPeg.GetHashCode();
      if (TriggerQty != 0) hash ^= TriggerQty.GetHashCode();
      if (ActivationUTC != 0UL) hash ^= ActivationUTC.GetHashCode();
      if (SuspensionUTC != 0UL) hash ^= SuspensionUTC.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (Close != false) hash ^= Close.GetHashCode();
      if (Aggressive != false) hash ^= Aggressive.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrigClOrdID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(OrigClOrdID);
      }
      if (Instrument != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Instrument);
      }
      if (Side != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Side);
      }
      if (OrderType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) OrderType);
      }
      execInstruction_.WriteTo(output, _repeated_execInstruction_codec);
      if (TimeInForce != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) TimeInForce);
      }
      if (OrderQty != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(OrderQty);
      }
      if (LimitPrice != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(LimitPrice);
      }
      if (StopPrice != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(StopPrice);
      }
      if (VisibleQty != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(VisibleQty);
      }
      if (MinVisibleQty != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(MinVisibleQty);
      }
      if (GoodThruUTC != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(GoodThruUTC);
      }
      if (RegulatoryAlgorithm != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(RegulatoryAlgorithm);
      }
      if (TrailOffset != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(TrailOffset);
      }
      if (TrailingPeg != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) TrailingPeg);
      }
      if (TriggerQty != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(TriggerQty);
      }
      if (ActivationUTC != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(ActivationUTC);
      }
      if (SuspensionUTC != 0UL) {
        output.WriteRawTag(144, 1);
        output.WriteUInt64(SuspensionUTC);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Currency);
      }
      if (Close != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(Close);
      }
      if (Aggressive != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(Aggressive);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrigClOrdID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OrigClOrdID);
      }
      if (Instrument != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Instrument);
      }
      if (Side != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (OrderType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType);
      }
      size += execInstruction_.CalculateSize(_repeated_execInstruction_codec);
      if (TimeInForce != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimeInForce);
      }
      if (OrderQty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OrderQty);
      }
      if (LimitPrice != 0D) {
        size += 1 + 8;
      }
      if (StopPrice != 0D) {
        size += 1 + 8;
      }
      if (VisibleQty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VisibleQty);
      }
      if (MinVisibleQty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinVisibleQty);
      }
      if (GoodThruUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GoodThruUTC);
      }
      if (RegulatoryAlgorithm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RegulatoryAlgorithm);
      }
      if (TrailOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TrailOffset);
      }
      if (TrailingPeg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TrailingPeg);
      }
      if (TriggerQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TriggerQty);
      }
      if (ActivationUTC != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ActivationUTC);
      }
      if (SuspensionUTC != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(SuspensionUTC);
      }
      if (Currency.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (Close != false) {
        size += 2 + 1;
      }
      if (Aggressive != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderParams other) {
      if (other == null) {
        return;
      }
      if (other.OrigClOrdID != 0UL) {
        OrigClOrdID = other.OrigClOrdID;
      }
      if (other.Instrument != 0UL) {
        Instrument = other.Instrument;
      }
      if (other.Side != 0) {
        Side = other.Side;
      }
      if (other.OrderType != 0) {
        OrderType = other.OrderType;
      }
      execInstruction_.Add(other.execInstruction_);
      if (other.TimeInForce != 0) {
        TimeInForce = other.TimeInForce;
      }
      if (other.OrderQty != 0) {
        OrderQty = other.OrderQty;
      }
      if (other.LimitPrice != 0D) {
        LimitPrice = other.LimitPrice;
      }
      if (other.StopPrice != 0D) {
        StopPrice = other.StopPrice;
      }
      if (other.VisibleQty != 0) {
        VisibleQty = other.VisibleQty;
      }
      if (other.MinVisibleQty != 0) {
        MinVisibleQty = other.MinVisibleQty;
      }
      if (other.GoodThruUTC != 0UL) {
        GoodThruUTC = other.GoodThruUTC;
      }
      if (other.RegulatoryAlgorithm != 0) {
        RegulatoryAlgorithm = other.RegulatoryAlgorithm;
      }
      if (other.TrailOffset != 0) {
        TrailOffset = other.TrailOffset;
      }
      if (other.TrailingPeg != 0) {
        TrailingPeg = other.TrailingPeg;
      }
      if (other.TriggerQty != 0) {
        TriggerQty = other.TriggerQty;
      }
      if (other.ActivationUTC != 0UL) {
        ActivationUTC = other.ActivationUTC;
      }
      if (other.SuspensionUTC != 0UL) {
        SuspensionUTC = other.SuspensionUTC;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.Close != false) {
        Close = other.Close;
      }
      if (other.Aggressive != false) {
        Aggressive = other.Aggressive;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OrigClOrdID = input.ReadUInt64();
            break;
          }
          case 16: {
            Instrument = input.ReadUInt64();
            break;
          }
          case 24: {
            side_ = (global::Com.Xceder.Messages.SIDE) input.ReadEnum();
            break;
          }
          case 32: {
            orderType_ = (global::Com.Xceder.Messages.Order.Types.TYPE) input.ReadEnum();
            break;
          }
          case 42:
          case 40: {
            execInstruction_.AddEntriesFrom(input, _repeated_execInstruction_codec);
            break;
          }
          case 48: {
            timeInForce_ = (global::Com.Xceder.Messages.Order.Types.TIMEINFORCE) input.ReadEnum();
            break;
          }
          case 56: {
            OrderQty = input.ReadUInt32();
            break;
          }
          case 65: {
            LimitPrice = input.ReadDouble();
            break;
          }
          case 73: {
            StopPrice = input.ReadDouble();
            break;
          }
          case 80: {
            VisibleQty = input.ReadUInt32();
            break;
          }
          case 88: {
            MinVisibleQty = input.ReadUInt32();
            break;
          }
          case 96: {
            GoodThruUTC = input.ReadUInt64();
            break;
          }
          case 104: {
            RegulatoryAlgorithm = input.ReadUInt32();
            break;
          }
          case 112: {
            TrailOffset = input.ReadUInt32();
            break;
          }
          case 120: {
            trailingPeg_ = (global::Com.Xceder.Messages.Order.Types.TRAILINGPEG) input.ReadEnum();
            break;
          }
          case 128: {
            TriggerQty = input.ReadUInt32();
            break;
          }
          case 136: {
            ActivationUTC = input.ReadUInt64();
            break;
          }
          case 144: {
            SuspensionUTC = input.ReadUInt64();
            break;
          }
          case 154: {
            Currency = input.ReadString();
            break;
          }
          case 160: {
            Close = input.ReadBool();
            break;
          }
          case 168: {
            Aggressive = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Compound order.
  /// </summary>
  public sealed partial class CompoundOrder : pb::IMessage<CompoundOrder> {
    private static readonly pb::MessageParser<CompoundOrder> _parser = new pb::MessageParser<CompoundOrder>(() => new CompoundOrder());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompoundOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompoundOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompoundOrder(CompoundOrder other) : this() {
      type_ = other.type_;
      compoundID_ = other.compoundID_;
      remark_ = other.remark_;
      completeFill_ = other.completeFill_;
      order_ = other.order_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompoundOrder Clone() {
      return new CompoundOrder(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Com.Xceder.Messages.CompoundOrder.Types.TYPE type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.CompoundOrder.Types.TYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "compoundID" field.</summary>
    public const int CompoundIDFieldNumber = 2;
    private string compoundID_ = "";
    /// <summary>
    /// ID of the compound order assigned by client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CompoundID {
      get { return compoundID_; }
      set {
        compoundID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 3;
    private string remark_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "completeFill" field.</summary>
    public const int CompleteFillFieldNumber = 4;
    private bool completeFill_;
    /// <summary>
    /// Indicates whether compound order execution shall happen on a complete fill (true) or partial fill (false)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CompleteFill {
      get { return completeFill_; }
      set {
        completeFill_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Com.Xceder.Messages.OrderParams> _repeated_order_codec
        = pb::FieldCodec.ForMessage(42, global::Com.Xceder.Messages.OrderParams.Parser);
    private readonly pbc::RepeatedField<global::Com.Xceder.Messages.OrderParams> order_ = new pbc::RepeatedField<global::Com.Xceder.Messages.OrderParams>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Xceder.Messages.OrderParams> Order {
      get { return order_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompoundOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompoundOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (CompoundID != other.CompoundID) return false;
      if (Remark != other.Remark) return false;
      if (CompleteFill != other.CompleteFill) return false;
      if(!order_.Equals(other.order_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (CompoundID.Length != 0) hash ^= CompoundID.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (CompleteFill != false) hash ^= CompleteFill.GetHashCode();
      hash ^= order_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (CompoundID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CompoundID);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Remark);
      }
      if (CompleteFill != false) {
        output.WriteRawTag(32);
        output.WriteBool(CompleteFill);
      }
      order_.WriteTo(output, _repeated_order_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (CompoundID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CompoundID);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (CompleteFill != false) {
        size += 1 + 1;
      }
      size += order_.CalculateSize(_repeated_order_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompoundOrder other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.CompoundID.Length != 0) {
        CompoundID = other.CompoundID;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.CompleteFill != false) {
        CompleteFill = other.CompleteFill;
      }
      order_.Add(other.order_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Com.Xceder.Messages.CompoundOrder.Types.TYPE) input.ReadEnum();
            break;
          }
          case 18: {
            CompoundID = input.ReadString();
            break;
          }
          case 26: {
            Remark = input.ReadString();
            break;
          }
          case 32: {
            CompleteFill = input.ReadBool();
            break;
          }
          case 42: {
            order_.AddEntriesFrom(input, _repeated_order_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CompoundOrder message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Type of the compound order.
      /// </summary>
      public enum TYPE {
        /// <summary>
        /// Order Places Order.
        /// [Partial] fill of the first entry triggers [partial] placement of all other orders.
        /// </summary>
        [pbr::OriginalName("OPO")] Opo = 0,
        /// <summary>
        /// Order Cancels Order. This type allows several compound order entires.
        /// [Partial] fill of any order triggers [partial] canceling of all other orders.
        /// </summary>
        [pbr::OriginalName("OCO")] Oco = 1,
      }

    }
    #endregion

  }

  public sealed partial class Spreaders : pb::IMessage<Spreaders> {
    private static readonly pb::MessageParser<Spreaders> _parser = new pb::MessageParser<Spreaders>(() => new Spreaders());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Spreaders> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spreaders() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spreaders(Spreaders other) : this() {
      speader_ = other.speader_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spreaders Clone() {
      return new Spreaders(this);
    }

    /// <summary>Field number for the "speader" field.</summary>
    public const int SpeaderFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Xceder.Messages.Spreader> _repeated_speader_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Xceder.Messages.Spreader.Parser);
    private readonly pbc::RepeatedField<global::Com.Xceder.Messages.Spreader> speader_ = new pbc::RepeatedField<global::Com.Xceder.Messages.Spreader>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Xceder.Messages.Spreader> Speader {
      get { return speader_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Spreaders);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Spreaders other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!speader_.Equals(other.speader_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= speader_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      speader_.WriteTo(output, _repeated_speader_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += speader_.CalculateSize(_repeated_speader_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Spreaders other) {
      if (other == null) {
        return;
      }
      speader_.Add(other.speader_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            speader_.AddEntriesFrom(input, _repeated_speader_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Spreader : pb::IMessage<Spreader> {
    private static readonly pb::MessageParser<Spreader> _parser = new pb::MessageParser<Spreader>(() => new Spreader());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Spreader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spreader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spreader(Spreader other) : this() {
      id_ = other.id_;
      ownerAcct_ = other.ownerAcct_;
      name_ = other.name_;
      remark_ = other.remark_;
      type_ = other.type_;
      formula_ = other.formula_;
      reloadOffset_ = other.reloadOffset_;
      reloadQty_ = other.reloadQty_;
      tickSize_ = other.tickSize_;
      leg_ = other.leg_.Clone();
      updateTimeUTC_ = other.updateTimeUTC_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spreader Clone() {
      return new Spreader(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    /// <summary>
    ///this will be created by server after it is registered successfully, client side spreader create request should be 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ownerAcct" field.</summary>
    public const int OwnerAcctFieldNumber = 2;
    private uint ownerAcct_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OwnerAcct {
      get { return ownerAcct_; }
      set {
        ownerAcct_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///this must be unique for the owner account
    ///if it is blank, will delete the spreader specified by the id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 4;
    private string remark_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::Com.Xceder.Messages.Spreader.Types.TYPE type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Spreader.Types.TYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "formula" field.</summary>
    public const int FormulaFieldNumber = 6;
    private string formula_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Formula {
      get { return formula_; }
      set {
        formula_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reloadOffset" field.</summary>
    public const int ReloadOffsetFieldNumber = 7;
    private uint reloadOffset_;
    /// <summary>
    ///Reload is an order that lets you execute a total spread order quantity by splitting the spread order into smaller
    ///disclosed quantities.
    ///When a disclosed spread order quantity is filled, the next disclosed quantity order is submitted until the entire spread
    ///order quantity fills.
    ///You can use the this property tick enter the market at the same price or a set number of ticks from the previously
    ///disclosed spread order.
    ///0 will submit the new spread order at the same price as the previous spread order.
    ///1 will submit the spread order at a price 1 tick from the previous spread order away from the market.
    ///-1 will submit the spread order 1 tick from the previous spread order toward the market.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReloadOffset {
      get { return reloadOffset_; }
      set {
        reloadOffset_ = value;
      }
    }

    /// <summary>Field number for the "reloadQty" field.</summary>
    public const int ReloadQtyFieldNumber = 8;
    private uint reloadQty_;
    /// <summary>
    ///Reload is an order that lets you execute a total spread order quantity by splitting the spread order into smaller
    ///disclosed quantities.
    ///When a disclosed spread order quantity is filled, the next disclosed quantity order is submitted until the entire
    ///spread order quantity fills.
    ///This property specifies the quantity for each child disclosed order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReloadQty {
      get { return reloadQty_; }
      set {
        reloadQty_ = value;
      }
    }

    /// <summary>Field number for the "tickSize" field.</summary>
    public const int TickSizeFieldNumber = 9;
    private double tickSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TickSize {
      get { return tickSize_; }
      set {
        tickSize_ = value;
      }
    }

    /// <summary>Field number for the "leg" field.</summary>
    public const int LegFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Com.Xceder.Messages.Spreader.Types.Leg> _repeated_leg_codec
        = pb::FieldCodec.ForMessage(82, global::Com.Xceder.Messages.Spreader.Types.Leg.Parser);
    private readonly pbc::RepeatedField<global::Com.Xceder.Messages.Spreader.Types.Leg> leg_ = new pbc::RepeatedField<global::Com.Xceder.Messages.Spreader.Types.Leg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Xceder.Messages.Spreader.Types.Leg> Leg {
      get { return leg_; }
    }

    /// <summary>Field number for the "updateTimeUTC" field.</summary>
    public const int UpdateTimeUTCFieldNumber = 11;
    private ulong updateTimeUTC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UpdateTimeUTC {
      get { return updateTimeUTC_; }
      set {
        updateTimeUTC_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Spreader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Spreader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (OwnerAcct != other.OwnerAcct) return false;
      if (Name != other.Name) return false;
      if (Remark != other.Remark) return false;
      if (Type != other.Type) return false;
      if (Formula != other.Formula) return false;
      if (ReloadOffset != other.ReloadOffset) return false;
      if (ReloadQty != other.ReloadQty) return false;
      if (TickSize != other.TickSize) return false;
      if(!leg_.Equals(other.leg_)) return false;
      if (UpdateTimeUTC != other.UpdateTimeUTC) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (OwnerAcct != 0) hash ^= OwnerAcct.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Formula.Length != 0) hash ^= Formula.GetHashCode();
      if (ReloadOffset != 0) hash ^= ReloadOffset.GetHashCode();
      if (ReloadQty != 0) hash ^= ReloadQty.GetHashCode();
      if (TickSize != 0D) hash ^= TickSize.GetHashCode();
      hash ^= leg_.GetHashCode();
      if (UpdateTimeUTC != 0UL) hash ^= UpdateTimeUTC.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (OwnerAcct != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OwnerAcct);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Remark);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (Formula.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Formula);
      }
      if (ReloadOffset != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ReloadOffset);
      }
      if (ReloadQty != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ReloadQty);
      }
      if (TickSize != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(TickSize);
      }
      leg_.WriteTo(output, _repeated_leg_codec);
      if (UpdateTimeUTC != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(UpdateTimeUTC);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (OwnerAcct != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OwnerAcct);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Formula.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Formula);
      }
      if (ReloadOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReloadOffset);
      }
      if (ReloadQty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReloadQty);
      }
      if (TickSize != 0D) {
        size += 1 + 8;
      }
      size += leg_.CalculateSize(_repeated_leg_codec);
      if (UpdateTimeUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UpdateTimeUTC);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Spreader other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.OwnerAcct != 0) {
        OwnerAcct = other.OwnerAcct;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Formula.Length != 0) {
        Formula = other.Formula;
      }
      if (other.ReloadOffset != 0) {
        ReloadOffset = other.ReloadOffset;
      }
      if (other.ReloadQty != 0) {
        ReloadQty = other.ReloadQty;
      }
      if (other.TickSize != 0D) {
        TickSize = other.TickSize;
      }
      leg_.Add(other.leg_);
      if (other.UpdateTimeUTC != 0UL) {
        UpdateTimeUTC = other.UpdateTimeUTC;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            OwnerAcct = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Remark = input.ReadString();
            break;
          }
          case 40: {
            type_ = (global::Com.Xceder.Messages.Spreader.Types.TYPE) input.ReadEnum();
            break;
          }
          case 50: {
            Formula = input.ReadString();
            break;
          }
          case 56: {
            ReloadOffset = input.ReadUInt32();
            break;
          }
          case 64: {
            ReloadQty = input.ReadUInt32();
            break;
          }
          case 73: {
            TickSize = input.ReadDouble();
            break;
          }
          case 82: {
            leg_.AddEntriesFrom(input, _repeated_leg_codec);
            break;
          }
          case 88: {
            UpdateTimeUTC = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Spreader message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum QUOTING_MODE {
        /// <summary>
        ///If the hedge market quantity drops below the minimum hedge quantity, the associated quoting order will be pulled
        ///from the market and will not be resubmitted even if sufficient hedge market volume reappears at some later time.
        /// </summary>
        [pbr::OriginalName("ALL_NONE")] AllNone = 0,
        /// <summary>
        ///Resubmits a quoting order when there is sufficient hedge volume.
        ///Note: that with this option, the spread order will persist and remain working even though no quoting orders are
        ///working in the market; quoting orders will automatically be resubmitted if sufficient hedge quantity returns.
        /// </summary>
        [pbr::OriginalName("ALL_NONE_RESUBMIT")] AllNoneResubmit = 1,
        /// <summary>
        ///Leans on only the inside market of the hedge legs and, therefore, only considers the size of the hedge leg’s inside
        ///market. If that volume is less than the minimum hedge quantity, the quoting order will be reduced to the largest
        ///size that could be fully hedged at the inside market of the hedge leg(s).
        /// </summary>
        [pbr::OriginalName("DYNAMIC_INSIDELEAN")] DynamicInsidelean = 2,
      }

      public enum COUPONFREQ {
        [pbr::OriginalName("ANNUAL")] Annual = 0,
        [pbr::OriginalName("MONTHLY")] Monthly = 1,
        [pbr::OriginalName("QUARTERLY")] Quarterly = 2,
        [pbr::OriginalName("SEMIANNUALLY")] Semiannually = 3,
      }

      public enum DAYCOUNTTYPE {
        /// <summary>
        ///actual number of days based on an actual calendar year (leap year counts for 366 days)
        /// </summary>
        [pbr::OriginalName("ACTUAL")] Actual = 0,
        /// <summary>
        ///actual number of days based on a 365-day calendar year
        /// </summary>
        [pbr::OriginalName("D365")] D365 = 1,
        /// <summary>
        ///actual number of days based on a 360-day calendar year
        /// </summary>
        [pbr::OriginalName("D360")] D360 = 2,
        /// <summary>
        ///Count is the number of days based on a 365 day calendar year, where the second date is changed from the 31st to
        ///the 30th only if the first date falls on the 30th or 31st
        /// </summary>
        [pbr::OriginalName("D365_30")] D36530 = 3,
        /// <summary>
        ///Count is the number of days based on a 360 day calendar year, where the second date is changed from the 31st to
        ///the 30th only if the first date falls on the 30th or 31st
        /// </summary>
        [pbr::OriginalName("D360_30")] D36030 = 4,
        /// <summary>
        ///number of days based on a 360 day calendar year, where the second date is changed from the 31st to the 30th
        /// </summary>
        [pbr::OriginalName("D365_30E")] D36530E = 5,
      }

      public enum YIELD_TYPE {
        /// <summary>
        ///Instrument price is in yield, so no conversion is necessary
        /// </summary>
        [pbr::OriginalName("TYPE1")] Type1 = 0,
        /// <summary>
        ///(100-price): Yield is calculated by subtracting the instrument price from 100. Calculation for the Euribor.
        /// </summary>
        [pbr::OriginalName("TYPE2")] Type2 = 1,
        /// <summary>
        ///((10000-Price)/100): yield is calculated by subtracting the instrument price from 10000 and dividing the result by
        ///100. Calculation for the Eurodollar.
        /// </summary>
        [pbr::OriginalName("TYPE3")] Type3 = 2,
        /// <summary>
        ///((10000-(Price+Strip Base))/100): Eurodollar Strip type yield, a base (settlement) is added to the instrument price
        ///before the Eurodollar conversion. Calculation for the exchange traded Strip, Pack or Bundle.
        /// </summary>
        [pbr::OriginalName("TYPE4")] Type4 = 3,
        /// <summary>
        ///((100000-Price)/1000): CBOT 30-day Fed Fund (ZQ) contract.
        /// </summary>
        [pbr::OriginalName("TYPE5")] Type5 = 4,
        /// <summary>
        ///Yield To Maturity: Price based on the rate of return if held until the maturity date.
        /// </summary>
        [pbr::OriginalName("TYPE6")] Type6 = 5,
        /// <summary>
        ///Par Rate. You must set the Leg.PV01 property as input to this yield calculation.
        /// </summary>
        [pbr::OriginalName("TYPE7")] Type7 = 6,
      }

      /// <summary>
      ///how to represent the price for this spread
      /// </summary>
      public enum TYPE {
        /// <summary>
        /// Prices display as the implied price of the spread.
        /// Leg A Price (*) User-Defined Multiplier – Leg B Price (*) User-Defined Multiplier= Implied Price
        /// </summary>
        [pbr::OriginalName("IMPLIED")] Implied = 0,
        /// <summary>
        ///Prices display based on the individual legs' net change from the previous day settlement.
        ///If you base spread prices on Net Change , you disable calculations in the Tick Information section.
        ///The Calculated Tick Size defaults to 25/100. You can still use the Override Tick Size to change it.
        /// </summary>
        [pbr::OriginalName("NETCHANGE")] Netchange = 1,
        /// <summary>
        ///Prices display as a percentage ratio (divides Leg A price by Leg B price).
        ///The Ratio setting is for two-legged spreads.
        /// </summary>
        [pbr::OriginalName("RATIO")] Ratio = 2,
        /// <summary>
        ///Prices display in yield. When enabled, an additional set of “Yield” parameters is displayed that can be configured
        ///for each leg
        /// </summary>
        [pbr::OriginalName("YIELD")] Yield = 3,
        /// <summary>
        ///Prices display based on a custom formula for the implied spread price.
        /// </summary>
        [pbr::OriginalName("CUSTOM")] Custom = 4,
      }

      public sealed partial class SpreadSlop : pb::IMessage<SpreadSlop> {
        private static readonly pb::MessageParser<SpreadSlop> _parser = new pb::MessageParser<SpreadSlop>(() => new SpreadSlop());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SpreadSlop> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Xceder.Messages.Spreader.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpreadSlop() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpreadSlop(SpreadSlop other) : this() {
          range_ = other.range_;
          insideSlop_ = other.insideSlop_;
          outsideSlop_ = other.outsideSlop_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpreadSlop Clone() {
          return new SpreadSlop(this);
        }

        /// <summary>Field number for the "range" field.</summary>
        public const int RangeFieldNumber = 1;
        private double range_;
        /// <summary>
        ///spread price range for this slop
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Range {
          get { return range_; }
          set {
            range_ = value;
          }
        }

        /// <summary>Field number for the "insideSlop" field.</summary>
        public const int InsideSlopFieldNumber = 2;
        private double insideSlop_;
        /// <summary>
        ///The worst spread price you will accept
        ///When buying, this property applies to prices above the current bid.
        ///When selling, this property applies to prices below the current offer.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double InsideSlop {
          get { return insideSlop_; }
          set {
            insideSlop_ = value;
          }
        }

        /// <summary>Field number for the "outsideSlop" field.</summary>
        public const int OutsideSlopFieldNumber = 3;
        private double outsideSlop_;
        /// <summary>
        ///The best spread price you will accept
        ///When buying, this property applies to prices below the current bid.
        ///When selling, this property applies to prices above the current offer.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double OutsideSlop {
          get { return outsideSlop_; }
          set {
            outsideSlop_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SpreadSlop);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SpreadSlop other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Range != other.Range) return false;
          if (InsideSlop != other.InsideSlop) return false;
          if (OutsideSlop != other.OutsideSlop) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Range != 0D) hash ^= Range.GetHashCode();
          if (InsideSlop != 0D) hash ^= InsideSlop.GetHashCode();
          if (OutsideSlop != 0D) hash ^= OutsideSlop.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Range != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Range);
          }
          if (InsideSlop != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(InsideSlop);
          }
          if (OutsideSlop != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(OutsideSlop);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Range != 0D) {
            size += 1 + 8;
          }
          if (InsideSlop != 0D) {
            size += 1 + 8;
          }
          if (OutsideSlop != 0D) {
            size += 1 + 8;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SpreadSlop other) {
          if (other == null) {
            return;
          }
          if (other.Range != 0D) {
            Range = other.Range;
          }
          if (other.InsideSlop != 0D) {
            InsideSlop = other.InsideSlop;
          }
          if (other.OutsideSlop != 0D) {
            OutsideSlop = other.OutsideSlop;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 9: {
                Range = input.ReadDouble();
                break;
              }
              case 17: {
                InsideSlop = input.ReadDouble();
                break;
              }
              case 25: {
                OutsideSlop = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      public sealed partial class InsideQuote : pb::IMessage<InsideQuote> {
        private static readonly pb::MessageParser<InsideQuote> _parser = new pb::MessageParser<InsideQuote>(() => new InsideQuote());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InsideQuote> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Xceder.Messages.Spreader.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InsideQuote() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InsideQuote(InsideQuote other) : this() {
          insideTick_ = other.insideTick_;
          distanceLimit_ = other.distanceLimit_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InsideQuote Clone() {
          return new InsideQuote(this);
        }

        /// <summary>Field number for the "insideTick" field.</summary>
        public const int InsideTickFieldNumber = 1;
        private uint insideTick_;
        /// <summary>
        ///0: means disable
        ///1: Quotes do not adjust toward the inside market unless the new quote price is the inside market
        ///n: quoting (n-1) ticks away from the inside market
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InsideTick {
          get { return insideTick_; }
          set {
            insideTick_ = value;
          }
        }

        /// <summary>Field number for the "distanceLimit" field.</summary>
        public const int DistanceLimitFieldNumber = 2;
        private uint distanceLimit_;
        /// <summary>
        ///limit in ticks a quoting order is allowed to work away from the price level that matches the spread differential
        ///0: the spread differential price level and the quoting order will always requote to the price that matches the
        ///spread differential.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DistanceLimit {
          get { return distanceLimit_; }
          set {
            distanceLimit_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as InsideQuote);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InsideQuote other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (InsideTick != other.InsideTick) return false;
          if (DistanceLimit != other.DistanceLimit) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (InsideTick != 0) hash ^= InsideTick.GetHashCode();
          if (DistanceLimit != 0) hash ^= DistanceLimit.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InsideTick != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(InsideTick);
          }
          if (DistanceLimit != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(DistanceLimit);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InsideTick != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InsideTick);
          }
          if (DistanceLimit != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DistanceLimit);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InsideQuote other) {
          if (other == null) {
            return;
          }
          if (other.InsideTick != 0) {
            InsideTick = other.InsideTick;
          }
          if (other.DistanceLimit != 0) {
            DistanceLimit = other.DistanceLimit;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                InsideTick = input.ReadUInt32();
                break;
              }
              case 16: {
                DistanceLimit = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class EventRules : pb::IMessage<EventRules> {
        private static readonly pb::MessageParser<EventRules> _parser = new pb::MessageParser<EventRules>(() => new EventRules());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EventRules> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Xceder.Messages.Spreader.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventRules() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventRules(EventRules other) : this() {
          preQuoting_ = other.preQuoting_;
          preHedging_ = other.preHedging_;
          postHedging_ = other.postHedging_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventRules Clone() {
          return new EventRules(this);
        }

        /// <summary>Field number for the "preQuoting" field.</summary>
        public const int PreQuotingFieldNumber = 1;
        private string preQuoting_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PreQuoting {
          get { return preQuoting_; }
          set {
            preQuoting_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "preHedging" field.</summary>
        public const int PreHedgingFieldNumber = 2;
        private string preHedging_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PreHedging {
          get { return preHedging_; }
          set {
            preHedging_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "postHedging" field.</summary>
        public const int PostHedgingFieldNumber = 3;
        private string postHedging_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PostHedging {
          get { return postHedging_; }
          set {
            postHedging_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EventRules);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EventRules other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PreQuoting != other.PreQuoting) return false;
          if (PreHedging != other.PreHedging) return false;
          if (PostHedging != other.PostHedging) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PreQuoting.Length != 0) hash ^= PreQuoting.GetHashCode();
          if (PreHedging.Length != 0) hash ^= PreHedging.GetHashCode();
          if (PostHedging.Length != 0) hash ^= PostHedging.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PreQuoting.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(PreQuoting);
          }
          if (PreHedging.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(PreHedging);
          }
          if (PostHedging.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(PostHedging);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PreQuoting.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PreQuoting);
          }
          if (PreHedging.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PreHedging);
          }
          if (PostHedging.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PostHedging);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EventRules other) {
          if (other == null) {
            return;
          }
          if (other.PreQuoting.Length != 0) {
            PreQuoting = other.PreQuoting;
          }
          if (other.PreHedging.Length != 0) {
            PreHedging = other.PreHedging;
          }
          if (other.PostHedging.Length != 0) {
            PostHedging = other.PostHedging;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                PreQuoting = input.ReadString();
                break;
              }
              case 18: {
                PreHedging = input.ReadString();
                break;
              }
              case 26: {
                PostHedging = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Leg : pb::IMessage<Leg> {
        private static readonly pb::MessageParser<Leg> _parser = new pb::MessageParser<Leg>(() => new Leg());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Leg> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Xceder.Messages.Spreader.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Leg() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Leg(Leg other) : this() {
          instrument_ = other.instrument_;
          type_ = other.type_;
          isShortLeg_ = other.isShortLeg_;
          qtyRatio_ = other.qtyRatio_;
          priceWeight_ = other.priceWeight_;
          hedgeTick_ = other.hedgeTick_;
          minQtyLean_ = other.minQtyLean_;
          qtyLeanDepth_ = other.qtyLeanDepth_;
          quotingMode_ = other.quotingMode_;
          queueHolderDepth_ = other.queueHolderDepth_;
          maxQuotePriceMove_ = other.maxQuotePriceMove_;
          maxHedgePriceMove_ = other.maxHedgePriceMove_;
          Rules = other.rules_ != null ? other.Rules.Clone() : null;
          slopLevel_ = other.slopLevel_.Clone();
          InsideQuote = other.insideQuote_ != null ? other.InsideQuote.Clone() : null;
          hedgeTriggerFillQty_ = other.hedgeTriggerFillQty_;
          Attribute = other.attribute_ != null ? other.Attribute.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Leg Clone() {
          return new Leg(this);
        }

        /// <summary>Field number for the "instrument" field.</summary>
        public const int InstrumentFieldNumber = 1;
        private ulong instrument_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Instrument {
          get { return instrument_; }
          set {
            instrument_ = value;
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private global::Com.Xceder.Messages.Spreader.Types.Leg.Types.TYPE type_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.Xceder.Messages.Spreader.Types.Leg.Types.TYPE Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "isShortLeg" field.</summary>
        public const int IsShortLegFieldNumber = 3;
        private bool isShortLeg_;
        /// <summary>
        ///indicate whether this leg is a short leg
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsShortLeg {
          get { return isShortLeg_; }
          set {
            isShortLeg_ = value;
          }
        }

        /// <summary>Field number for the "qtyRatio" field.</summary>
        public const int QtyRatioFieldNumber = 4;
        private double qtyRatio_;
        /// <summary>
        ///quantity of this leg in relation to the other spread legs
        ///The Spread Ratio field allows a value of zero for spreads that require a leg for spread calculation purposes only,
        ///and not for entering orders as a part of the spread. When a leg has a value of zero in the Spread Ratio field,
        ///no quoting orders or hedge orders will be submitted in that leg as a part of a spread, but a spread fill is
        ///generated. The current inside market price at the time of the quoting leg fill will be used for the leg fill price
        ///when creating the spread fill.
        ///Values entered in the Spread Ratio field do not affect the spread price.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double QtyRatio {
          get { return qtyRatio_; }
          set {
            qtyRatio_ = value;
          }
        }

        /// <summary>Field number for the "priceWeight" field.</summary>
        public const int PriceWeightFieldNumber = 5;
        private double priceWeight_;
        /// <summary>
        ///the multipler in the spread price formula
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double PriceWeight {
          get { return priceWeight_; }
          set {
            priceWeight_ = value;
          }
        }

        /// <summary>Field number for the "hedgeTick" field.</summary>
        public const int HedgeTickFieldNumber = 6;
        private int hedgeTick_;
        /// <summary>
        ///Example: You buy one ES Dec-Mar calendar spread at 6.00 and the quote leg fills at 2134.00. Payup Ticks are set to
        ///"-2" for the hedge leg and the contract ticks in ".25" increments. Instead of entering a sell order in the hedge leg
        ///for 2128.00 to achieve the spread price, Autospreader adjusts the price 2 ticks away from the market and enters an
        ///order at 2128.50. Using this same example but with Payup Ticks set to positive "2", Autospreader adjusts the spread
        ///price 2 ticks into the market and enters a hedge order at 2127.50.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HedgeTick {
          get { return hedgeTick_; }
          set {
            hedgeTick_ = value;
          }
        }

        /// <summary>Field number for the "minQtyLean" field.</summary>
        public const int MinQtyLeanFieldNumber = 7;
        private uint minQtyLean_;
        /// <summary>
        ///minimum quantity required for quoting orders to lean against
        ///If you want to lean only against the inside market and not lean on multiple levels of depth you can set the
        ///qtyLeanDepth to 0 and the minQtyLean to 1.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinQtyLean {
          get { return minQtyLean_; }
          set {
            minQtyLean_ = value;
          }
        }

        /// <summary>Field number for the "qtyLeanDepth" field.</summary>
        public const int QtyLeanDepthFieldNumber = 8;
        private uint qtyLeanDepth_;
        /// <summary>
        ///Example: If the quantity on the second leg of the spread is 10 and the trader assigns an qtyLeanDepth of 2,
        ///Spreader determines the price level at which 20 contracts of cumulative market quantity exists on the second leg
        ///and uses this to determine the price at which it quotes the first leg of the spread.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint QtyLeanDepth {
          get { return qtyLeanDepth_; }
          set {
            qtyLeanDepth_ = value;
          }
        }

        /// <summary>Field number for the "quotingMode" field.</summary>
        public const int QuotingModeFieldNumber = 9;
        private global::Com.Xceder.Messages.Spreader.Types.QUOTING_MODE quotingMode_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.Xceder.Messages.Spreader.Types.QUOTING_MODE QuotingMode {
          get { return quotingMode_; }
          set {
            quotingMode_ = value;
          }
        }

        /// <summary>Field number for the "queueHolderDepth" field.</summary>
        public const int QueueHolderDepthFieldNumber = 10;
        private uint queueHolderDepth_;
        /// <summary>
        ///number of outright leg orders placed at consecutive price levels away from the inside market in addition to the
        ///single quoted order for each leg.
        ///Note: Queue Holder is only available with two-legged spreads.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint QueueHolderDepth {
          get { return queueHolderDepth_; }
          set {
            queueHolderDepth_ = value;
          }
        }

        /// <summary>Field number for the "maxQuotePriceMove" field.</summary>
        public const int MaxQuotePriceMoveFieldNumber = 11;
        private uint maxQuotePriceMove_;
        /// <summary>
        ///maximum number of ticks a leg price can move in a single price update before pulling the order
        ///this defines an order move threshold in the quoting leg.
        ///Setting these properties can help prevent legging risks in volatile markets.
        ///minimum setting is 1
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxQuotePriceMove {
          get { return maxQuotePriceMove_; }
          set {
            maxQuotePriceMove_ = value;
          }
        }

        /// <summary>Field number for the "maxHedgePriceMove" field.</summary>
        public const int MaxHedgePriceMoveFieldNumber = 12;
        private uint maxHedgePriceMove_;
        /// <summary>
        ///maximum number of ticks a leg price can move in a single price update before pulling the order from the market
        ///this defines a price move threshold in the leaning (hedging) leg.
        ///Setting these properties can help prevent legging risks in volatile markets.
        ///minimum setting is 1
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxHedgePriceMove {
          get { return maxHedgePriceMove_; }
          set {
            maxHedgePriceMove_ = value;
          }
        }

        /// <summary>Field number for the "rules" field.</summary>
        public const int RulesFieldNumber = 13;
        private global::Com.Xceder.Messages.Spreader.Types.EventRules rules_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.Xceder.Messages.Spreader.Types.EventRules Rules {
          get { return rules_; }
          set {
            rules_ = value;
          }
        }

        /// <summary>Field number for the "slopLevel" field.</summary>
        public const int SlopLevelFieldNumber = 14;
        private static readonly pb::FieldCodec<global::Com.Xceder.Messages.Spreader.Types.SpreadSlop> _repeated_slopLevel_codec
            = pb::FieldCodec.ForMessage(114, global::Com.Xceder.Messages.Spreader.Types.SpreadSlop.Parser);
        private readonly pbc::RepeatedField<global::Com.Xceder.Messages.Spreader.Types.SpreadSlop> slopLevel_ = new pbc::RepeatedField<global::Com.Xceder.Messages.Spreader.Types.SpreadSlop>();
        /// <summary>
        ///Lets you configure multiple levels of slop to determine when to reprice the quoted outright legs based upon
        ///movement in the market
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.Xceder.Messages.Spreader.Types.SpreadSlop> SlopLevel {
          get { return slopLevel_; }
        }

        /// <summary>Field number for the "insideQuote" field.</summary>
        public const int InsideQuoteFieldNumber = 15;
        private global::Com.Xceder.Messages.Spreader.Types.InsideQuote insideQuote_;
        /// <summary>
        ///reduces excessive quoting away from the inside market.
        ///legs only requote when they are a set number of ticks away from the inside market
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.Xceder.Messages.Spreader.Types.InsideQuote InsideQuote {
          get { return insideQuote_; }
          set {
            insideQuote_ = value;
          }
        }

        /// <summary>Field number for the "hedgeTriggerFillQty" field.</summary>
        public const int HedgeTriggerFillQtyFieldNumber = 16;
        private uint hedgeTriggerFillQty_;
        /// <summary>
        ///whether should send a hedge order when the quoted order is more than specified qty filled
        ///This setting is intended to be used for spreads with quoting orders more than double the quantity of the hedge order
        ///Once the entire hedge order fills and there is a quoting order working in the market, the quoting order is now the
        ///unhedged leg of the spread and will not reprice.
        ///Example: You are quoting 11 contracts and hedging 1. With Hedge trigger is set at 6, a hedge order is sent when 6
        ///of the 11 contracts fill. When not set (0), all 11 contracts need to fill before 1 lot hedge is sent.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HedgeTriggerFillQty {
          get { return hedgeTriggerFillQty_; }
          set {
            hedgeTriggerFillQty_ = value;
          }
        }

        /// <summary>Field number for the "attribute" field.</summary>
        public const int AttributeFieldNumber = 17;
        private global::Com.Xceder.Messages.Spreader.Types.Leg.Types.ExtraAttributes attribute_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.Xceder.Messages.Spreader.Types.Leg.Types.ExtraAttributes Attribute {
          get { return attribute_; }
          set {
            attribute_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Leg);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Leg other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Instrument != other.Instrument) return false;
          if (Type != other.Type) return false;
          if (IsShortLeg != other.IsShortLeg) return false;
          if (QtyRatio != other.QtyRatio) return false;
          if (PriceWeight != other.PriceWeight) return false;
          if (HedgeTick != other.HedgeTick) return false;
          if (MinQtyLean != other.MinQtyLean) return false;
          if (QtyLeanDepth != other.QtyLeanDepth) return false;
          if (QuotingMode != other.QuotingMode) return false;
          if (QueueHolderDepth != other.QueueHolderDepth) return false;
          if (MaxQuotePriceMove != other.MaxQuotePriceMove) return false;
          if (MaxHedgePriceMove != other.MaxHedgePriceMove) return false;
          if (!object.Equals(Rules, other.Rules)) return false;
          if(!slopLevel_.Equals(other.slopLevel_)) return false;
          if (!object.Equals(InsideQuote, other.InsideQuote)) return false;
          if (HedgeTriggerFillQty != other.HedgeTriggerFillQty) return false;
          if (!object.Equals(Attribute, other.Attribute)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Instrument != 0UL) hash ^= Instrument.GetHashCode();
          if (Type != 0) hash ^= Type.GetHashCode();
          if (IsShortLeg != false) hash ^= IsShortLeg.GetHashCode();
          if (QtyRatio != 0D) hash ^= QtyRatio.GetHashCode();
          if (PriceWeight != 0D) hash ^= PriceWeight.GetHashCode();
          if (HedgeTick != 0) hash ^= HedgeTick.GetHashCode();
          if (MinQtyLean != 0) hash ^= MinQtyLean.GetHashCode();
          if (QtyLeanDepth != 0) hash ^= QtyLeanDepth.GetHashCode();
          if (QuotingMode != 0) hash ^= QuotingMode.GetHashCode();
          if (QueueHolderDepth != 0) hash ^= QueueHolderDepth.GetHashCode();
          if (MaxQuotePriceMove != 0) hash ^= MaxQuotePriceMove.GetHashCode();
          if (MaxHedgePriceMove != 0) hash ^= MaxHedgePriceMove.GetHashCode();
          if (rules_ != null) hash ^= Rules.GetHashCode();
          hash ^= slopLevel_.GetHashCode();
          if (insideQuote_ != null) hash ^= InsideQuote.GetHashCode();
          if (HedgeTriggerFillQty != 0) hash ^= HedgeTriggerFillQty.GetHashCode();
          if (attribute_ != null) hash ^= Attribute.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Instrument != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Instrument);
          }
          if (Type != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Type);
          }
          if (IsShortLeg != false) {
            output.WriteRawTag(24);
            output.WriteBool(IsShortLeg);
          }
          if (QtyRatio != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(QtyRatio);
          }
          if (PriceWeight != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(PriceWeight);
          }
          if (HedgeTick != 0) {
            output.WriteRawTag(48);
            output.WriteSInt32(HedgeTick);
          }
          if (MinQtyLean != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(MinQtyLean);
          }
          if (QtyLeanDepth != 0) {
            output.WriteRawTag(64);
            output.WriteUInt32(QtyLeanDepth);
          }
          if (QuotingMode != 0) {
            output.WriteRawTag(72);
            output.WriteEnum((int) QuotingMode);
          }
          if (QueueHolderDepth != 0) {
            output.WriteRawTag(80);
            output.WriteUInt32(QueueHolderDepth);
          }
          if (MaxQuotePriceMove != 0) {
            output.WriteRawTag(88);
            output.WriteUInt32(MaxQuotePriceMove);
          }
          if (MaxHedgePriceMove != 0) {
            output.WriteRawTag(96);
            output.WriteUInt32(MaxHedgePriceMove);
          }
          if (rules_ != null) {
            output.WriteRawTag(106);
            output.WriteMessage(Rules);
          }
          slopLevel_.WriteTo(output, _repeated_slopLevel_codec);
          if (insideQuote_ != null) {
            output.WriteRawTag(122);
            output.WriteMessage(InsideQuote);
          }
          if (HedgeTriggerFillQty != 0) {
            output.WriteRawTag(128, 1);
            output.WriteUInt32(HedgeTriggerFillQty);
          }
          if (attribute_ != null) {
            output.WriteRawTag(138, 1);
            output.WriteMessage(Attribute);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Instrument != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Instrument);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (IsShortLeg != false) {
            size += 1 + 1;
          }
          if (QtyRatio != 0D) {
            size += 1 + 8;
          }
          if (PriceWeight != 0D) {
            size += 1 + 8;
          }
          if (HedgeTick != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(HedgeTick);
          }
          if (MinQtyLean != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinQtyLean);
          }
          if (QtyLeanDepth != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QtyLeanDepth);
          }
          if (QuotingMode != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) QuotingMode);
          }
          if (QueueHolderDepth != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QueueHolderDepth);
          }
          if (MaxQuotePriceMove != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxQuotePriceMove);
          }
          if (MaxHedgePriceMove != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxHedgePriceMove);
          }
          if (rules_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rules);
          }
          size += slopLevel_.CalculateSize(_repeated_slopLevel_codec);
          if (insideQuote_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(InsideQuote);
          }
          if (HedgeTriggerFillQty != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HedgeTriggerFillQty);
          }
          if (attribute_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Attribute);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Leg other) {
          if (other == null) {
            return;
          }
          if (other.Instrument != 0UL) {
            Instrument = other.Instrument;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.IsShortLeg != false) {
            IsShortLeg = other.IsShortLeg;
          }
          if (other.QtyRatio != 0D) {
            QtyRatio = other.QtyRatio;
          }
          if (other.PriceWeight != 0D) {
            PriceWeight = other.PriceWeight;
          }
          if (other.HedgeTick != 0) {
            HedgeTick = other.HedgeTick;
          }
          if (other.MinQtyLean != 0) {
            MinQtyLean = other.MinQtyLean;
          }
          if (other.QtyLeanDepth != 0) {
            QtyLeanDepth = other.QtyLeanDepth;
          }
          if (other.QuotingMode != 0) {
            QuotingMode = other.QuotingMode;
          }
          if (other.QueueHolderDepth != 0) {
            QueueHolderDepth = other.QueueHolderDepth;
          }
          if (other.MaxQuotePriceMove != 0) {
            MaxQuotePriceMove = other.MaxQuotePriceMove;
          }
          if (other.MaxHedgePriceMove != 0) {
            MaxHedgePriceMove = other.MaxHedgePriceMove;
          }
          if (other.rules_ != null) {
            if (rules_ == null) {
              rules_ = new global::Com.Xceder.Messages.Spreader.Types.EventRules();
            }
            Rules.MergeFrom(other.Rules);
          }
          slopLevel_.Add(other.slopLevel_);
          if (other.insideQuote_ != null) {
            if (insideQuote_ == null) {
              insideQuote_ = new global::Com.Xceder.Messages.Spreader.Types.InsideQuote();
            }
            InsideQuote.MergeFrom(other.InsideQuote);
          }
          if (other.HedgeTriggerFillQty != 0) {
            HedgeTriggerFillQty = other.HedgeTriggerFillQty;
          }
          if (other.attribute_ != null) {
            if (attribute_ == null) {
              attribute_ = new global::Com.Xceder.Messages.Spreader.Types.Leg.Types.ExtraAttributes();
            }
            Attribute.MergeFrom(other.Attribute);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Instrument = input.ReadUInt64();
                break;
              }
              case 16: {
                type_ = (global::Com.Xceder.Messages.Spreader.Types.Leg.Types.TYPE) input.ReadEnum();
                break;
              }
              case 24: {
                IsShortLeg = input.ReadBool();
                break;
              }
              case 33: {
                QtyRatio = input.ReadDouble();
                break;
              }
              case 41: {
                PriceWeight = input.ReadDouble();
                break;
              }
              case 48: {
                HedgeTick = input.ReadSInt32();
                break;
              }
              case 56: {
                MinQtyLean = input.ReadUInt32();
                break;
              }
              case 64: {
                QtyLeanDepth = input.ReadUInt32();
                break;
              }
              case 72: {
                quotingMode_ = (global::Com.Xceder.Messages.Spreader.Types.QUOTING_MODE) input.ReadEnum();
                break;
              }
              case 80: {
                QueueHolderDepth = input.ReadUInt32();
                break;
              }
              case 88: {
                MaxQuotePriceMove = input.ReadUInt32();
                break;
              }
              case 96: {
                MaxHedgePriceMove = input.ReadUInt32();
                break;
              }
              case 106: {
                if (rules_ == null) {
                  rules_ = new global::Com.Xceder.Messages.Spreader.Types.EventRules();
                }
                input.ReadMessage(rules_);
                break;
              }
              case 114: {
                slopLevel_.AddEntriesFrom(input, _repeated_slopLevel_codec);
                break;
              }
              case 122: {
                if (insideQuote_ == null) {
                  insideQuote_ = new global::Com.Xceder.Messages.Spreader.Types.InsideQuote();
                }
                input.ReadMessage(insideQuote_);
                break;
              }
              case 128: {
                HedgeTriggerFillQty = input.ReadUInt32();
                break;
              }
              case 138: {
                if (attribute_ == null) {
                  attribute_ = new global::Com.Xceder.Messages.Spreader.Types.Leg.Types.ExtraAttributes();
                }
                input.ReadMessage(attribute_);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Leg message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum TYPE {
            /// <summary>
            ///send hedge and quoting orders at the same time
            /// </summary>
            [pbr::OriginalName("QUOTE")] Quote = 0,
            /// <summary>
            ///send the hedge order only after receiving a full fill of the quoting order
            /// </summary>
            [pbr::OriginalName("HEDGE")] Hedge = 1,
          }

          /// <summary>
          ///When creating spread legs for instruments that trade in yield, you can include the following optional values to use
          ///when calculating the yield price:
          ///First Coupon Date (firstCouponDate)
          ///Dated Date (issueDate)
          /// </summary>
          public sealed partial class ExtraAttributes : pb::IMessage<ExtraAttributes> {
            private static readonly pb::MessageParser<ExtraAttributes> _parser = new pb::MessageParser<ExtraAttributes>(() => new ExtraAttributes());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ExtraAttributes> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Com.Xceder.Messages.Spreader.Types.Leg.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ExtraAttributes() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ExtraAttributes(ExtraAttributes other) : this() {
              firstCouponDate_ = other.firstCouponDate_;
              issueDate_ = other.issueDate_;
              conversionFactor_ = other.conversionFactor_;
              use365Days_ = other.use365Days_;
              couponRate_ = other.couponRate_;
              couponFreq_ = other.couponFreq_;
              endOfMonthCoupon_ = other.endOfMonthCoupon_;
              maturityDate_ = other.maturityDate_;
              pV01_ = other.pV01_;
              settlementDate_ = other.settlementDate_;
              stripBase_ = other.stripBase_;
              yieldType_ = other.yieldType_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ExtraAttributes Clone() {
              return new ExtraAttributes(this);
            }

            /// <summary>Field number for the "firstCouponDate" field.</summary>
            public const int FirstCouponDateFieldNumber = 1;
            private ulong firstCouponDate_;
            /// <summary>
            ///first real coupon date, 0 to disable the bond instrument yield to maturity calculation
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong FirstCouponDate {
              get { return firstCouponDate_; }
              set {
                firstCouponDate_ = value;
              }
            }

            /// <summary>Field number for the "issueDate" field.</summary>
            public const int IssueDateFieldNumber = 2;
            private ulong issueDate_;
            /// <summary>
            ///date on which interest accrual begins,must occur before the first coupon date
            ///0 to disable the bond instrument yield to maturity calculation
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong IssueDate {
              get { return issueDate_; }
              set {
                issueDate_ = value;
              }
            }

            /// <summary>Field number for the "conversionFactor" field.</summary>
            public const int ConversionFactorFieldNumber = 3;
            private double conversionFactor_;
            /// <summary>
            ///the factor by which the futures price is multiplied if the specified bond is delivered against it
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double ConversionFactor {
              get { return conversionFactor_; }
              set {
                conversionFactor_ = value;
              }
            }

            /// <summary>Field number for the "use365Days" field.</summary>
            public const int Use365DaysFieldNumber = 4;
            private bool use365Days_;
            /// <summary>
            ///whether to convert 360 days to 365 days
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Use365Days {
              get { return use365Days_; }
              set {
                use365Days_ = value;
              }
            }

            /// <summary>Field number for the "couponRate" field.</summary>
            public const int CouponRateFieldNumber = 5;
            private double couponRate_;
            /// <summary>
            ///coupon's annual interest rate
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double CouponRate {
              get { return couponRate_; }
              set {
                couponRate_ = value;
              }
            }

            /// <summary>Field number for the "couponFreq" field.</summary>
            public const int CouponFreqFieldNumber = 6;
            private global::Com.Xceder.Messages.Spreader.Types.COUPONFREQ couponFreq_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Com.Xceder.Messages.Spreader.Types.COUPONFREQ CouponFreq {
              get { return couponFreq_; }
              set {
                couponFreq_ = value;
              }
            }

            /// <summary>Field number for the "endOfMonthCoupon" field.</summary>
            public const int EndOfMonthCouponFieldNumber = 7;
            private bool endOfMonthCoupon_;
            /// <summary>
            ///coupon payments always occur on the last day of the month if the settlement date falls on the last day of the month
            ///true, if payments always occur on the last day of the month; false, otherwise
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool EndOfMonthCoupon {
              get { return endOfMonthCoupon_; }
              set {
                endOfMonthCoupon_ = value;
              }
            }

            /// <summary>Field number for the "maturityDate" field.</summary>
            public const int MaturityDateFieldNumber = 8;
            private ulong maturityDate_;
            /// <summary>
            ///redemption date of the bond. Must be greater than the settlement date and greater than today
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong MaturityDate {
              get { return maturityDate_; }
              set {
                maturityDate_ = value;
              }
            }

            /// <summary>Field number for the "PV01" field.</summary>
            public const int PV01FieldNumber = 9;
            private double pV01_;
            /// <summary>
            ///used for converting NPV to a Par Rate for Eris Invoice Futures Spreads
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double PV01 {
              get { return pV01_; }
              set {
                pV01_ = value;
              }
            }

            /// <summary>Field number for the "settlementDate" field.</summary>
            public const int SettlementDateFieldNumber = 10;
            private ulong settlementDate_;
            /// <summary>
            ///date the trade settles. The value must be less than the maturity date and greater than today.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong SettlementDate {
              get { return settlementDate_; }
              set {
                settlementDate_ = value;
              }
            }

            /// <summary>Field number for the "stripBase" field.</summary>
            public const int StripBaseFieldNumber = 11;
            private double stripBase_;
            /// <summary>
            ///settlement price of the contracts in an exchange-traded strip, pack, or bundle
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double StripBase {
              get { return stripBase_; }
              set {
                stripBase_ = value;
              }
            }

            /// <summary>Field number for the "yieldType" field.</summary>
            public const int YieldTypeFieldNumber = 12;
            private global::Com.Xceder.Messages.Spreader.Types.YIELD_TYPE yieldType_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Com.Xceder.Messages.Spreader.Types.YIELD_TYPE YieldType {
              get { return yieldType_; }
              set {
                yieldType_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ExtraAttributes);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ExtraAttributes other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (FirstCouponDate != other.FirstCouponDate) return false;
              if (IssueDate != other.IssueDate) return false;
              if (ConversionFactor != other.ConversionFactor) return false;
              if (Use365Days != other.Use365Days) return false;
              if (CouponRate != other.CouponRate) return false;
              if (CouponFreq != other.CouponFreq) return false;
              if (EndOfMonthCoupon != other.EndOfMonthCoupon) return false;
              if (MaturityDate != other.MaturityDate) return false;
              if (PV01 != other.PV01) return false;
              if (SettlementDate != other.SettlementDate) return false;
              if (StripBase != other.StripBase) return false;
              if (YieldType != other.YieldType) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (FirstCouponDate != 0UL) hash ^= FirstCouponDate.GetHashCode();
              if (IssueDate != 0UL) hash ^= IssueDate.GetHashCode();
              if (ConversionFactor != 0D) hash ^= ConversionFactor.GetHashCode();
              if (Use365Days != false) hash ^= Use365Days.GetHashCode();
              if (CouponRate != 0D) hash ^= CouponRate.GetHashCode();
              if (CouponFreq != 0) hash ^= CouponFreq.GetHashCode();
              if (EndOfMonthCoupon != false) hash ^= EndOfMonthCoupon.GetHashCode();
              if (MaturityDate != 0UL) hash ^= MaturityDate.GetHashCode();
              if (PV01 != 0D) hash ^= PV01.GetHashCode();
              if (SettlementDate != 0UL) hash ^= SettlementDate.GetHashCode();
              if (StripBase != 0D) hash ^= StripBase.GetHashCode();
              if (YieldType != 0) hash ^= YieldType.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (FirstCouponDate != 0UL) {
                output.WriteRawTag(8);
                output.WriteUInt64(FirstCouponDate);
              }
              if (IssueDate != 0UL) {
                output.WriteRawTag(16);
                output.WriteUInt64(IssueDate);
              }
              if (ConversionFactor != 0D) {
                output.WriteRawTag(25);
                output.WriteDouble(ConversionFactor);
              }
              if (Use365Days != false) {
                output.WriteRawTag(32);
                output.WriteBool(Use365Days);
              }
              if (CouponRate != 0D) {
                output.WriteRawTag(41);
                output.WriteDouble(CouponRate);
              }
              if (CouponFreq != 0) {
                output.WriteRawTag(48);
                output.WriteEnum((int) CouponFreq);
              }
              if (EndOfMonthCoupon != false) {
                output.WriteRawTag(56);
                output.WriteBool(EndOfMonthCoupon);
              }
              if (MaturityDate != 0UL) {
                output.WriteRawTag(64);
                output.WriteUInt64(MaturityDate);
              }
              if (PV01 != 0D) {
                output.WriteRawTag(73);
                output.WriteDouble(PV01);
              }
              if (SettlementDate != 0UL) {
                output.WriteRawTag(80);
                output.WriteUInt64(SettlementDate);
              }
              if (StripBase != 0D) {
                output.WriteRawTag(89);
                output.WriteDouble(StripBase);
              }
              if (YieldType != 0) {
                output.WriteRawTag(96);
                output.WriteEnum((int) YieldType);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (FirstCouponDate != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FirstCouponDate);
              }
              if (IssueDate != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IssueDate);
              }
              if (ConversionFactor != 0D) {
                size += 1 + 8;
              }
              if (Use365Days != false) {
                size += 1 + 1;
              }
              if (CouponRate != 0D) {
                size += 1 + 8;
              }
              if (CouponFreq != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CouponFreq);
              }
              if (EndOfMonthCoupon != false) {
                size += 1 + 1;
              }
              if (MaturityDate != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaturityDate);
              }
              if (PV01 != 0D) {
                size += 1 + 8;
              }
              if (SettlementDate != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SettlementDate);
              }
              if (StripBase != 0D) {
                size += 1 + 8;
              }
              if (YieldType != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) YieldType);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ExtraAttributes other) {
              if (other == null) {
                return;
              }
              if (other.FirstCouponDate != 0UL) {
                FirstCouponDate = other.FirstCouponDate;
              }
              if (other.IssueDate != 0UL) {
                IssueDate = other.IssueDate;
              }
              if (other.ConversionFactor != 0D) {
                ConversionFactor = other.ConversionFactor;
              }
              if (other.Use365Days != false) {
                Use365Days = other.Use365Days;
              }
              if (other.CouponRate != 0D) {
                CouponRate = other.CouponRate;
              }
              if (other.CouponFreq != 0) {
                CouponFreq = other.CouponFreq;
              }
              if (other.EndOfMonthCoupon != false) {
                EndOfMonthCoupon = other.EndOfMonthCoupon;
              }
              if (other.MaturityDate != 0UL) {
                MaturityDate = other.MaturityDate;
              }
              if (other.PV01 != 0D) {
                PV01 = other.PV01;
              }
              if (other.SettlementDate != 0UL) {
                SettlementDate = other.SettlementDate;
              }
              if (other.StripBase != 0D) {
                StripBase = other.StripBase;
              }
              if (other.YieldType != 0) {
                YieldType = other.YieldType;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    FirstCouponDate = input.ReadUInt64();
                    break;
                  }
                  case 16: {
                    IssueDate = input.ReadUInt64();
                    break;
                  }
                  case 25: {
                    ConversionFactor = input.ReadDouble();
                    break;
                  }
                  case 32: {
                    Use365Days = input.ReadBool();
                    break;
                  }
                  case 41: {
                    CouponRate = input.ReadDouble();
                    break;
                  }
                  case 48: {
                    couponFreq_ = (global::Com.Xceder.Messages.Spreader.Types.COUPONFREQ) input.ReadEnum();
                    break;
                  }
                  case 56: {
                    EndOfMonthCoupon = input.ReadBool();
                    break;
                  }
                  case 64: {
                    MaturityDate = input.ReadUInt64();
                    break;
                  }
                  case 73: {
                    PV01 = input.ReadDouble();
                    break;
                  }
                  case 80: {
                    SettlementDate = input.ReadUInt64();
                    break;
                  }
                  case 89: {
                    StripBase = input.ReadDouble();
                    break;
                  }
                  case 96: {
                    yieldType_ = (global::Com.Xceder.Messages.Spreader.Types.YIELD_TYPE) input.ReadEnum();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class OrderID : pb::IMessage<OrderID> {
    private static readonly pb::MessageParser<OrderID> _parser = new pb::MessageParser<OrderID>(() => new OrderID());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderID> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderID() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderID(OrderID other) : this() {
      clOrdID_ = other.clOrdID_;
      chainClOrdID_ = other.chainClOrdID_;
      origClOrdID_ = other.origClOrdID_;
      tradingAccount_ = other.tradingAccount_;
      execOrderID_ = other.execOrderID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderID Clone() {
      return new OrderID(this);
    }

    /// <summary>Field number for the "clOrdID" field.</summary>
    public const int ClOrdIDFieldNumber = 1;
    private ulong clOrdID_;
    /// <summary>
    /// Client order ID of the order at the transaction moment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClOrdID {
      get { return clOrdID_; }
      set {
        clOrdID_ = value;
      }
    }

    /// <summary>Field number for the "chainClOrdID" field.</summary>
    public const int ChainClOrdIDFieldNumber = 2;
    private ulong chainClOrdID_;
    /// <summary>
    ///the root order for the seriers replace/withdraw, which is 0 for the first order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChainClOrdID {
      get { return chainClOrdID_; }
      set {
        chainClOrdID_ = value;
      }
    }

    /// <summary>Field number for the "origClOrdID" field.</summary>
    public const int OrigClOrdIDFieldNumber = 3;
    private ulong origClOrdID_;
    /// <summary>
    /// If order is modified, this is target order ClOrdID for modification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OrigClOrdID {
      get { return origClOrdID_; }
      set {
        origClOrdID_ = value;
      }
    }

    /// <summary>Field number for the "tradingAccount" field.</summary>
    public const int TradingAccountFieldNumber = 4;
    private string tradingAccount_ = "";
    /// <summary>
    /// trading account used for this order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradingAccount {
      get { return tradingAccount_; }
      set {
        tradingAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "execOrderID" field.</summary>
    public const int ExecOrderIDFieldNumber = 5;
    private string execOrderID_ = "";
    /// <summary>
    /// Order ID assigned by broker or exchange
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExecOrderID {
      get { return execOrderID_; }
      set {
        execOrderID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderID);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderID other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClOrdID != other.ClOrdID) return false;
      if (ChainClOrdID != other.ChainClOrdID) return false;
      if (OrigClOrdID != other.OrigClOrdID) return false;
      if (TradingAccount != other.TradingAccount) return false;
      if (ExecOrderID != other.ExecOrderID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClOrdID != 0UL) hash ^= ClOrdID.GetHashCode();
      if (ChainClOrdID != 0UL) hash ^= ChainClOrdID.GetHashCode();
      if (OrigClOrdID != 0UL) hash ^= OrigClOrdID.GetHashCode();
      if (TradingAccount.Length != 0) hash ^= TradingAccount.GetHashCode();
      if (ExecOrderID.Length != 0) hash ^= ExecOrderID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClOrdID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ClOrdID);
      }
      if (ChainClOrdID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ChainClOrdID);
      }
      if (OrigClOrdID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(OrigClOrdID);
      }
      if (TradingAccount.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TradingAccount);
      }
      if (ExecOrderID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ExecOrderID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClOrdID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClOrdID);
      }
      if (ChainClOrdID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChainClOrdID);
      }
      if (OrigClOrdID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OrigClOrdID);
      }
      if (TradingAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradingAccount);
      }
      if (ExecOrderID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExecOrderID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderID other) {
      if (other == null) {
        return;
      }
      if (other.ClOrdID != 0UL) {
        ClOrdID = other.ClOrdID;
      }
      if (other.ChainClOrdID != 0UL) {
        ChainClOrdID = other.ChainClOrdID;
      }
      if (other.OrigClOrdID != 0UL) {
        OrigClOrdID = other.OrigClOrdID;
      }
      if (other.TradingAccount.Length != 0) {
        TradingAccount = other.TradingAccount;
      }
      if (other.ExecOrderID.Length != 0) {
        ExecOrderID = other.ExecOrderID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClOrdID = input.ReadUInt64();
            break;
          }
          case 16: {
            ChainClOrdID = input.ReadUInt64();
            break;
          }
          case 24: {
            OrigClOrdID = input.ReadUInt64();
            break;
          }
          case 34: {
            TradingAccount = input.ReadString();
            break;
          }
          case 42: {
            ExecOrderID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Status of a specific transaction.
  /// All attributes are at the transaction moment.
  /// </summary>
  public sealed partial class ExecutionReport : pb::IMessage<ExecutionReport> {
    private static readonly pb::MessageParser<ExecutionReport> _parser = new pb::MessageParser<ExecutionReport>(() => new ExecutionReport());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecutionReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutionReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutionReport(ExecutionReport other) : this() {
      execID_ = other.execID_;
      OrderID = other.orderID_ != null ? other.OrderID.Clone() : null;
      execType_ = other.execType_;
      ordStatus_ = other.ordStatus_;
      rejectCode_ = other.rejectCode_;
      transactTimeUTC_ = other.transactTimeUTC_;
      reportTimeUTC_ = other.reportTimeUTC_;
      fillQty_ = other.fillQty_;
      fillPrice_ = other.fillPrice_;
      totalFillQty_ = other.totalFillQty_;
      avgFillPrice_ = other.avgFillPrice_;
      remainingQty_ = other.remainingQty_;
      remark_ = other.remark_;
      fillCounterParty_ = other.fillCounterParty_;
      sourceServer_ = other.sourceServer_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutionReport Clone() {
      return new ExecutionReport(this);
    }

    /// <summary>Field number for the "execID" field.</summary>
    public const int ExecIDFieldNumber = 1;
    private string execID_ = "";
    /// <summary>
    ///FIX ExecID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExecID {
      get { return execID_; }
      set {
        execID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderID" field.</summary>
    public const int OrderIDFieldNumber = 2;
    private global::Com.Xceder.Messages.OrderID orderID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.OrderID OrderID {
      get { return orderID_; }
      set {
        orderID_ = value;
      }
    }

    /// <summary>Field number for the "execType" field.</summary>
    public const int ExecTypeFieldNumber = 3;
    private global::Com.Xceder.Messages.ExecutionReport.Types.STATUS execType_ = 0;
    /// <summary>
    ///this transaction type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.ExecutionReport.Types.STATUS ExecType {
      get { return execType_; }
      set {
        execType_ = value;
      }
    }

    /// <summary>Field number for the "ordStatus" field.</summary>
    public const int OrdStatusFieldNumber = 4;
    private global::Com.Xceder.Messages.ExecutionReport.Types.STATUS ordStatus_ = 0;
    /// <summary>
    ///order status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.ExecutionReport.Types.STATUS OrdStatus {
      get { return ordStatus_; }
      set {
        ordStatus_ = value;
      }
    }

    /// <summary>Field number for the "rejectCode" field.</summary>
    public const int RejectCodeFieldNumber = 5;
    private global::Com.Xceder.Messages.ExecutionReport.Types.REJECTCODE rejectCode_ = 0;
    /// <summary>
    ///only valid when the status is rejected
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.ExecutionReport.Types.REJECTCODE RejectCode {
      get { return rejectCode_; }
      set {
        rejectCode_ = value;
      }
    }

    /// <summary>Field number for the "transactTimeUTC" field.</summary>
    public const int TransactTimeUTCFieldNumber = 6;
    private ulong transactTimeUTC_;
    /// <summary>
    /// Time of execution/order creation, if not provided, 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TransactTimeUTC {
      get { return transactTimeUTC_; }
      set {
        transactTimeUTC_ = value;
      }
    }

    /// <summary>Field number for the "reportTimeUTC" field.</summary>
    public const int ReportTimeUTCFieldNumber = 7;
    private ulong reportTimeUTC_;
    /// <summary>
    /// Time of report received time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ReportTimeUTC {
      get { return reportTimeUTC_; }
      set {
        reportTimeUTC_ = value;
      }
    }

    /// <summary>Field number for the "fillQty" field.</summary>
    public const int FillQtyFieldNumber = 8;
    private uint fillQty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FillQty {
      get { return fillQty_; }
      set {
        fillQty_ = value;
      }
    }

    /// <summary>Field number for the "fillPrice" field.</summary>
    public const int FillPriceFieldNumber = 9;
    private double fillPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FillPrice {
      get { return fillPrice_; }
      set {
        fillPrice_ = value;
      }
    }

    /// <summary>Field number for the "totalFillQty" field.</summary>
    public const int TotalFillQtyFieldNumber = 10;
    private uint totalFillQty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalFillQty {
      get { return totalFillQty_; }
      set {
        totalFillQty_ = value;
      }
    }

    /// <summary>Field number for the "avgFillPrice" field.</summary>
    public const int AvgFillPriceFieldNumber = 11;
    private double avgFillPrice_;
    /// <summary>
    /// Average fill price.
    /// NOTE: this price is aligned by a tick size so don't use it for OTE/UPL calculation but
    /// use prices from individual TRADE elements.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AvgFillPrice {
      get { return avgFillPrice_; }
      set {
        avgFillPrice_ = value;
      }
    }

    /// <summary>Field number for the "remainingQty" field.</summary>
    public const int RemainingQtyFieldNumber = 12;
    private uint remainingQty_;
    /// <summary>
    /// Remaining (unfilled) order quantity. It is not always equal
    /// to order size minus filled size (for example, busted orders violate that).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RemainingQty {
      get { return remainingQty_; }
      set {
        remainingQty_ = value;
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 13;
    private string remark_ = "";
    /// <summary>
    /// Additional transaction details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fillCounterParty" field.</summary>
    public const int FillCounterPartyFieldNumber = 14;
    private string fillCounterParty_ = "";
    /// <summary>
    /// If present, identifies the counterpart of the order fill, as reported by the execution system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FillCounterParty {
      get { return fillCounterParty_; }
      set {
        fillCounterParty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sourceServer" field.</summary>
    public const int SourceServerFieldNumber = 15;
    private uint sourceServer_;
    /// <summary>
    ///which server create this execution report. 0 means it is from counter party
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SourceServer {
      get { return sourceServer_; }
      set {
        sourceServer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecutionReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecutionReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExecID != other.ExecID) return false;
      if (!object.Equals(OrderID, other.OrderID)) return false;
      if (ExecType != other.ExecType) return false;
      if (OrdStatus != other.OrdStatus) return false;
      if (RejectCode != other.RejectCode) return false;
      if (TransactTimeUTC != other.TransactTimeUTC) return false;
      if (ReportTimeUTC != other.ReportTimeUTC) return false;
      if (FillQty != other.FillQty) return false;
      if (FillPrice != other.FillPrice) return false;
      if (TotalFillQty != other.TotalFillQty) return false;
      if (AvgFillPrice != other.AvgFillPrice) return false;
      if (RemainingQty != other.RemainingQty) return false;
      if (Remark != other.Remark) return false;
      if (FillCounterParty != other.FillCounterParty) return false;
      if (SourceServer != other.SourceServer) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExecID.Length != 0) hash ^= ExecID.GetHashCode();
      if (orderID_ != null) hash ^= OrderID.GetHashCode();
      if (ExecType != 0) hash ^= ExecType.GetHashCode();
      if (OrdStatus != 0) hash ^= OrdStatus.GetHashCode();
      if (RejectCode != 0) hash ^= RejectCode.GetHashCode();
      if (TransactTimeUTC != 0UL) hash ^= TransactTimeUTC.GetHashCode();
      if (ReportTimeUTC != 0UL) hash ^= ReportTimeUTC.GetHashCode();
      if (FillQty != 0) hash ^= FillQty.GetHashCode();
      if (FillPrice != 0D) hash ^= FillPrice.GetHashCode();
      if (TotalFillQty != 0) hash ^= TotalFillQty.GetHashCode();
      if (AvgFillPrice != 0D) hash ^= AvgFillPrice.GetHashCode();
      if (RemainingQty != 0) hash ^= RemainingQty.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (FillCounterParty.Length != 0) hash ^= FillCounterParty.GetHashCode();
      if (SourceServer != 0) hash ^= SourceServer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExecID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ExecID);
      }
      if (orderID_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OrderID);
      }
      if (ExecType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ExecType);
      }
      if (OrdStatus != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) OrdStatus);
      }
      if (RejectCode != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) RejectCode);
      }
      if (TransactTimeUTC != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(TransactTimeUTC);
      }
      if (ReportTimeUTC != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(ReportTimeUTC);
      }
      if (FillQty != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(FillQty);
      }
      if (FillPrice != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(FillPrice);
      }
      if (TotalFillQty != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(TotalFillQty);
      }
      if (AvgFillPrice != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(AvgFillPrice);
      }
      if (RemainingQty != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(RemainingQty);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Remark);
      }
      if (FillCounterParty.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(FillCounterParty);
      }
      if (SourceServer != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(SourceServer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExecID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExecID);
      }
      if (orderID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OrderID);
      }
      if (ExecType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ExecType);
      }
      if (OrdStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrdStatus);
      }
      if (RejectCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RejectCode);
      }
      if (TransactTimeUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TransactTimeUTC);
      }
      if (ReportTimeUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ReportTimeUTC);
      }
      if (FillQty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FillQty);
      }
      if (FillPrice != 0D) {
        size += 1 + 8;
      }
      if (TotalFillQty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalFillQty);
      }
      if (AvgFillPrice != 0D) {
        size += 1 + 8;
      }
      if (RemainingQty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RemainingQty);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (FillCounterParty.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FillCounterParty);
      }
      if (SourceServer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceServer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecutionReport other) {
      if (other == null) {
        return;
      }
      if (other.ExecID.Length != 0) {
        ExecID = other.ExecID;
      }
      if (other.orderID_ != null) {
        if (orderID_ == null) {
          orderID_ = new global::Com.Xceder.Messages.OrderID();
        }
        OrderID.MergeFrom(other.OrderID);
      }
      if (other.ExecType != 0) {
        ExecType = other.ExecType;
      }
      if (other.OrdStatus != 0) {
        OrdStatus = other.OrdStatus;
      }
      if (other.RejectCode != 0) {
        RejectCode = other.RejectCode;
      }
      if (other.TransactTimeUTC != 0UL) {
        TransactTimeUTC = other.TransactTimeUTC;
      }
      if (other.ReportTimeUTC != 0UL) {
        ReportTimeUTC = other.ReportTimeUTC;
      }
      if (other.FillQty != 0) {
        FillQty = other.FillQty;
      }
      if (other.FillPrice != 0D) {
        FillPrice = other.FillPrice;
      }
      if (other.TotalFillQty != 0) {
        TotalFillQty = other.TotalFillQty;
      }
      if (other.AvgFillPrice != 0D) {
        AvgFillPrice = other.AvgFillPrice;
      }
      if (other.RemainingQty != 0) {
        RemainingQty = other.RemainingQty;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.FillCounterParty.Length != 0) {
        FillCounterParty = other.FillCounterParty;
      }
      if (other.SourceServer != 0) {
        SourceServer = other.SourceServer;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ExecID = input.ReadString();
            break;
          }
          case 18: {
            if (orderID_ == null) {
              orderID_ = new global::Com.Xceder.Messages.OrderID();
            }
            input.ReadMessage(orderID_);
            break;
          }
          case 24: {
            execType_ = (global::Com.Xceder.Messages.ExecutionReport.Types.STATUS) input.ReadEnum();
            break;
          }
          case 32: {
            ordStatus_ = (global::Com.Xceder.Messages.ExecutionReport.Types.STATUS) input.ReadEnum();
            break;
          }
          case 40: {
            rejectCode_ = (global::Com.Xceder.Messages.ExecutionReport.Types.REJECTCODE) input.ReadEnum();
            break;
          }
          case 48: {
            TransactTimeUTC = input.ReadUInt64();
            break;
          }
          case 56: {
            ReportTimeUTC = input.ReadUInt64();
            break;
          }
          case 64: {
            FillQty = input.ReadUInt32();
            break;
          }
          case 73: {
            FillPrice = input.ReadDouble();
            break;
          }
          case 80: {
            TotalFillQty = input.ReadUInt32();
            break;
          }
          case 89: {
            AvgFillPrice = input.ReadDouble();
            break;
          }
          case 96: {
            RemainingQty = input.ReadUInt32();
            break;
          }
          case 106: {
            Remark = input.ReadString();
            break;
          }
          case 114: {
            FillCounterParty = input.ReadString();
            break;
          }
          case 120: {
            SourceServer = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ExecutionReport message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///keep the 0 for those unknown status
      /// </summary>
      public enum STATUS {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("PENDING_NEW")] PendingNew = 1,
        [pbr::OriginalName("PENDING_CANCEL")] PendingCancel = 2,
        /// <summary>
        ///(e.g. result of Order Cancel/Replace Request &lt;G>)
        /// </summary>
        [pbr::OriginalName("PENDING_REPLACE")] PendingReplace = 3,
        [pbr::OriginalName("NEW")] New = 4,
        [pbr::OriginalName("REPLACED")] Replaced = 5,
        [pbr::OriginalName("PARTIAL_FILL")] PartialFill = 6,
        /// <summary>
        ///this is mainly for the FIX ExecType RESTATED, order status should has no this value
        /// </summary>
        [pbr::OriginalName("RESTATED")] Restated = 7,
        /// <summary>
        ///CQG suspended has other meaning, market is closed and temporarily queued in their server
        /// </summary>
        [pbr::OriginalName("SUSPENDED")] Suspended = 8,
        /// <summary>
        ///non-working order status
        /// </summary>
        [pbr::OriginalName("FILL")] Fill = 9,
        [pbr::OriginalName("CANCELED")] Canceled = 10,
        [pbr::OriginalName("REJECTED")] Rejected = 11,
        [pbr::OriginalName("EXPIRED")] Expired = 12,
      }

      public enum REJECTCODE {
        [pbr::OriginalName("NA")] Na = 0,
        /// <summary>
        ///FIX OrdRejReason
        /// </summary>
        [pbr::OriginalName("BROKER_OPTION")] BrokerOption = 1,
        [pbr::OriginalName("UNKNOWN_ORDER_SYMBOL")] UnknownOrderSymbol = 2,
        [pbr::OriginalName("EXCHANGE_CLOSED")] ExchangeClosed = 3,
        [pbr::OriginalName("EXCEEDS_LIMIT")] ExceedsLimit = 4,
        [pbr::OriginalName("TOO_LATE")] TooLate = 5,
        /// <summary>
        ///Unknown order
        /// </summary>
        [pbr::OriginalName("UNKNOWN_ORDER")] UnknownOrder = 6,
        /// <summary>
        ///(e.g. dupe ClOrdID &lt;11> ())
        /// </summary>
        [pbr::OriginalName("DUPLICATE")] Duplicate = 7,
        /// <summary>
        ///Duplicate of a verbally communicated order
        /// </summary>
        [pbr::OriginalName("DUPLICATE_COMMUNICATED")] DuplicateCommunicated = 8,
        [pbr::OriginalName("STALE")] Stale = 9,
        [pbr::OriginalName("TRADE_ALONG_REQUIRED")] TradeAlongRequired = 10,
        [pbr::OriginalName("INVALID_INVESTOR")] InvalidInvestor = 11,
        /// <summary>
        ///Unsupported order characteristic
        /// </summary>
        [pbr::OriginalName("UNSUPPORTED")] Unsupported = 12,
        /// <summary>
        ///Surveillence Option
        /// </summary>
        [pbr::OriginalName("SURVEILLENCE")] Surveillence = 13,
        /// <summary>
        ///Incorrect quantity
        /// </summary>
        [pbr::OriginalName("QUANTITY")] Quantity = 14,
        /// <summary>
        ///Incorrect allocated quantity
        /// </summary>
        [pbr::OriginalName("ALLOCATED_QUANTITY")] AllocatedQuantity = 15,
        [pbr::OriginalName("UNKNOWN_ORDER_ACCOUNT")] UnknownOrderAccount = 16,
        [pbr::OriginalName("INVALID_PRICE_INCREMENT")] InvalidPriceIncrement = 19,
      }

    }
    #endregion

  }

  public sealed partial class InstrumentSubscription : pb::IMessage<InstrumentSubscription> {
    private static readonly pb::MessageParser<InstrumentSubscription> _parser = new pb::MessageParser<InstrumentSubscription>(() => new InstrumentSubscription());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstrumentSubscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentSubscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentSubscription(InstrumentSubscription other) : this() {
      instrument_ = other.instrument_.Clone();
      action_ = other.action_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentSubscription Clone() {
      return new InstrumentSubscription(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_instrument_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> instrument_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///array of instrument ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Instrument {
      get { return instrument_; }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 2;
    private global::Com.Xceder.Messages.InstrumentSubscription.Types.ACTION action_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.InstrumentSubscription.Types.ACTION Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstrumentSubscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstrumentSubscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instrument_.Equals(other.instrument_)) return false;
      if (Action != other.Action) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instrument_.GetHashCode();
      if (Action != 0) hash ^= Action.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      instrument_.WriteTo(output, _repeated_instrument_codec);
      if (Action != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Action);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += instrument_.CalculateSize(_repeated_instrument_codec);
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstrumentSubscription other) {
      if (other == null) {
        return;
      }
      instrument_.Add(other.instrument_);
      if (other.Action != 0) {
        Action = other.Action;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            instrument_.AddEntriesFrom(input, _repeated_instrument_codec);
            break;
          }
          case 16: {
            action_ = (global::Com.Xceder.Messages.InstrumentSubscription.Types.ACTION) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the InstrumentSubscription message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ACTION {
        [pbr::OriginalName("SUBSCRIBE")] Subscribe = 0,
        [pbr::OriginalName("UNSUBSCRIBE")] Unsubscribe = 1,
      }

    }
    #endregion

  }

  public sealed partial class MarketDatas : pb::IMessage<MarketDatas> {
    private static readonly pb::MessageParser<MarketDatas> _parser = new pb::MessageParser<MarketDatas>(() => new MarketDatas());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDatas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDatas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDatas(MarketDatas other) : this() {
      marketData_ = other.marketData_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDatas Clone() {
      return new MarketDatas(this);
    }

    /// <summary>Field number for the "marketData" field.</summary>
    public const int MarketDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Xceder.Messages.MarketData> _repeated_marketData_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Xceder.Messages.MarketData.Parser);
    private readonly pbc::RepeatedField<global::Com.Xceder.Messages.MarketData> marketData_ = new pbc::RepeatedField<global::Com.Xceder.Messages.MarketData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Xceder.Messages.MarketData> MarketData {
      get { return marketData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDatas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDatas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!marketData_.Equals(other.marketData_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= marketData_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      marketData_.WriteTo(output, _repeated_marketData_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += marketData_.CalculateSize(_repeated_marketData_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDatas other) {
      if (other == null) {
        return;
      }
      marketData_.Add(other.marketData_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            marketData_.AddEntriesFrom(input, _repeated_marketData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PriceBar : pb::IMessage<PriceBar> {
    private static readonly pb::MessageParser<PriceBar> _parser = new pb::MessageParser<PriceBar>(() => new PriceBar());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PriceBar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriceBar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriceBar(PriceBar other) : this() {
      updateTime_ = other.updateTime_;
      open_ = other.open_;
      high_ = other.high_;
      low_ = other.low_;
      close_ = other.close_;
      volume_ = other.volume_;
      settlement_ = other.settlement_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriceBar Clone() {
      return new PriceBar(this);
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 1;
    private ulong updateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 2;
    private double open_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    /// <summary>Field number for the "high" field.</summary>
    public const int HighFieldNumber = 3;
    private double high_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double High {
      get { return high_; }
      set {
        high_ = value;
      }
    }

    /// <summary>Field number for the "low" field.</summary>
    public const int LowFieldNumber = 4;
    private double low_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Low {
      get { return low_; }
      set {
        low_ = value;
      }
    }

    /// <summary>Field number for the "close" field.</summary>
    public const int CloseFieldNumber = 5;
    private double close_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Close {
      get { return close_; }
      set {
        close_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 6;
    private ulong volume_;
    /// <summary>
    ///traded volume
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "settlement" field.</summary>
    public const int SettlementFieldNumber = 7;
    private double settlement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Settlement {
      get { return settlement_; }
      set {
        settlement_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PriceBar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PriceBar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UpdateTime != other.UpdateTime) return false;
      if (Open != other.Open) return false;
      if (High != other.High) return false;
      if (Low != other.Low) return false;
      if (Close != other.Close) return false;
      if (Volume != other.Volume) return false;
      if (Settlement != other.Settlement) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UpdateTime != 0UL) hash ^= UpdateTime.GetHashCode();
      if (Open != 0D) hash ^= Open.GetHashCode();
      if (High != 0D) hash ^= High.GetHashCode();
      if (Low != 0D) hash ^= Low.GetHashCode();
      if (Close != 0D) hash ^= Close.GetHashCode();
      if (Volume != 0UL) hash ^= Volume.GetHashCode();
      if (Settlement != 0D) hash ^= Settlement.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UpdateTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UpdateTime);
      }
      if (Open != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Open);
      }
      if (High != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(High);
      }
      if (Low != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Low);
      }
      if (Close != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Close);
      }
      if (Volume != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Volume);
      }
      if (Settlement != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Settlement);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UpdateTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UpdateTime);
      }
      if (Open != 0D) {
        size += 1 + 8;
      }
      if (High != 0D) {
        size += 1 + 8;
      }
      if (Low != 0D) {
        size += 1 + 8;
      }
      if (Close != 0D) {
        size += 1 + 8;
      }
      if (Volume != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Volume);
      }
      if (Settlement != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PriceBar other) {
      if (other == null) {
        return;
      }
      if (other.UpdateTime != 0UL) {
        UpdateTime = other.UpdateTime;
      }
      if (other.Open != 0D) {
        Open = other.Open;
      }
      if (other.High != 0D) {
        High = other.High;
      }
      if (other.Low != 0D) {
        Low = other.Low;
      }
      if (other.Close != 0D) {
        Close = other.Close;
      }
      if (other.Volume != 0UL) {
        Volume = other.Volume;
      }
      if (other.Settlement != 0D) {
        Settlement = other.Settlement;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UpdateTime = input.ReadUInt64();
            break;
          }
          case 17: {
            Open = input.ReadDouble();
            break;
          }
          case 25: {
            High = input.ReadDouble();
            break;
          }
          case 33: {
            Low = input.ReadDouble();
            break;
          }
          case 41: {
            Close = input.ReadDouble();
            break;
          }
          case 48: {
            Volume = input.ReadUInt64();
            break;
          }
          case 57: {
            Settlement = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Real time data delivery.
  /// Snapshot is sent as the first message after subscription and may appear periodically when subscribed.
  /// </summary>
  public sealed partial class MarketData : pb::IMessage<MarketData> {
    private static readonly pb::MessageParser<MarketData> _parser = new pb::MessageParser<MarketData>(() => new MarketData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketData(MarketData other) : this() {
      instrument_ = other.instrument_;
      updateTimeUTC_ = other.updateTimeUTC_;
      PriceBar = other.priceBar_ != null ? other.PriceBar.Clone() : null;
      PrevPriceBar = other.prevPriceBar_ != null ? other.PrevPriceBar.Clone() : null;
      TradeQuote = other.tradeQuote_ != null ? other.TradeQuote.Clone() : null;
      bidQuotes_ = other.bidQuotes_.Clone();
      askQuotes_ = other.askQuotes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketData Clone() {
      return new MarketData(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private ulong instrument_;
    /// <summary>
    ///instrument ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    /// <summary>Field number for the "updateTimeUTC" field.</summary>
    public const int UpdateTimeUTCFieldNumber = 2;
    private ulong updateTimeUTC_;
    /// <summary>
    ///the latest update timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UpdateTimeUTC {
      get { return updateTimeUTC_; }
      set {
        updateTimeUTC_ = value;
      }
    }

    /// <summary>Field number for the "priceBar" field.</summary>
    public const int PriceBarFieldNumber = 3;
    private global::Com.Xceder.Messages.PriceBar priceBar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.PriceBar PriceBar {
      get { return priceBar_; }
      set {
        priceBar_ = value;
      }
    }

    /// <summary>Field number for the "prevPriceBar" field.</summary>
    public const int PrevPriceBarFieldNumber = 4;
    private global::Com.Xceder.Messages.PriceBar prevPriceBar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.PriceBar PrevPriceBar {
      get { return prevPriceBar_; }
      set {
        prevPriceBar_ = value;
      }
    }

    /// <summary>Field number for the "tradeQuote" field.</summary>
    public const int TradeQuoteFieldNumber = 5;
    private global::Com.Xceder.Messages.Quote tradeQuote_;
    /// <summary>
    ///last trade message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Quote TradeQuote {
      get { return tradeQuote_; }
      set {
        tradeQuote_ = value;
      }
    }

    /// <summary>Field number for the "bidQuotes" field.</summary>
    public const int BidQuotesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Com.Xceder.Messages.Quote> _repeated_bidQuotes_codec
        = pb::FieldCodec.ForMessage(50, global::Com.Xceder.Messages.Quote.Parser);
    private readonly pbc::RepeatedField<global::Com.Xceder.Messages.Quote> bidQuotes_ = new pbc::RepeatedField<global::Com.Xceder.Messages.Quote>();
    /// <summary>
    ///always sorted by the price from best to worst, (bid: highest -> lowest, ask: lowest -> highest)
    ///bid market depth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Xceder.Messages.Quote> BidQuotes {
      get { return bidQuotes_; }
    }

    /// <summary>Field number for the "askQuotes" field.</summary>
    public const int AskQuotesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Com.Xceder.Messages.Quote> _repeated_askQuotes_codec
        = pb::FieldCodec.ForMessage(58, global::Com.Xceder.Messages.Quote.Parser);
    private readonly pbc::RepeatedField<global::Com.Xceder.Messages.Quote> askQuotes_ = new pbc::RepeatedField<global::Com.Xceder.Messages.Quote>();
    /// <summary>
    ///always sorted by the price from best to worst, (bid: highest -> lowest, ask: lowest -> highest)
    ///ask market depth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Xceder.Messages.Quote> AskQuotes {
      get { return askQuotes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Instrument != other.Instrument) return false;
      if (UpdateTimeUTC != other.UpdateTimeUTC) return false;
      if (!object.Equals(PriceBar, other.PriceBar)) return false;
      if (!object.Equals(PrevPriceBar, other.PrevPriceBar)) return false;
      if (!object.Equals(TradeQuote, other.TradeQuote)) return false;
      if(!bidQuotes_.Equals(other.bidQuotes_)) return false;
      if(!askQuotes_.Equals(other.askQuotes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Instrument != 0UL) hash ^= Instrument.GetHashCode();
      if (UpdateTimeUTC != 0UL) hash ^= UpdateTimeUTC.GetHashCode();
      if (priceBar_ != null) hash ^= PriceBar.GetHashCode();
      if (prevPriceBar_ != null) hash ^= PrevPriceBar.GetHashCode();
      if (tradeQuote_ != null) hash ^= TradeQuote.GetHashCode();
      hash ^= bidQuotes_.GetHashCode();
      hash ^= askQuotes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Instrument != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Instrument);
      }
      if (UpdateTimeUTC != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UpdateTimeUTC);
      }
      if (priceBar_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PriceBar);
      }
      if (prevPriceBar_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PrevPriceBar);
      }
      if (tradeQuote_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TradeQuote);
      }
      bidQuotes_.WriteTo(output, _repeated_bidQuotes_codec);
      askQuotes_.WriteTo(output, _repeated_askQuotes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Instrument != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Instrument);
      }
      if (UpdateTimeUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UpdateTimeUTC);
      }
      if (priceBar_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PriceBar);
      }
      if (prevPriceBar_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrevPriceBar);
      }
      if (tradeQuote_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradeQuote);
      }
      size += bidQuotes_.CalculateSize(_repeated_bidQuotes_codec);
      size += askQuotes_.CalculateSize(_repeated_askQuotes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketData other) {
      if (other == null) {
        return;
      }
      if (other.Instrument != 0UL) {
        Instrument = other.Instrument;
      }
      if (other.UpdateTimeUTC != 0UL) {
        UpdateTimeUTC = other.UpdateTimeUTC;
      }
      if (other.priceBar_ != null) {
        if (priceBar_ == null) {
          priceBar_ = new global::Com.Xceder.Messages.PriceBar();
        }
        PriceBar.MergeFrom(other.PriceBar);
      }
      if (other.prevPriceBar_ != null) {
        if (prevPriceBar_ == null) {
          prevPriceBar_ = new global::Com.Xceder.Messages.PriceBar();
        }
        PrevPriceBar.MergeFrom(other.PrevPriceBar);
      }
      if (other.tradeQuote_ != null) {
        if (tradeQuote_ == null) {
          tradeQuote_ = new global::Com.Xceder.Messages.Quote();
        }
        TradeQuote.MergeFrom(other.TradeQuote);
      }
      bidQuotes_.Add(other.bidQuotes_);
      askQuotes_.Add(other.askQuotes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Instrument = input.ReadUInt64();
            break;
          }
          case 16: {
            UpdateTimeUTC = input.ReadUInt64();
            break;
          }
          case 26: {
            if (priceBar_ == null) {
              priceBar_ = new global::Com.Xceder.Messages.PriceBar();
            }
            input.ReadMessage(priceBar_);
            break;
          }
          case 34: {
            if (prevPriceBar_ == null) {
              prevPriceBar_ = new global::Com.Xceder.Messages.PriceBar();
            }
            input.ReadMessage(prevPriceBar_);
            break;
          }
          case 42: {
            if (tradeQuote_ == null) {
              tradeQuote_ = new global::Com.Xceder.Messages.Quote();
            }
            input.ReadMessage(tradeQuote_);
            break;
          }
          case 50: {
            bidQuotes_.AddEntriesFrom(input, _repeated_bidQuotes_codec);
            break;
          }
          case 58: {
            askQuotes_.AddEntriesFrom(input, _repeated_askQuotes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Specific quote information. when both price &amp; volume is 0, means the specified entryID should be deleted
  /// </summary>
  public sealed partial class Quote : pb::IMessage<Quote> {
    private static readonly pb::MessageParser<Quote> _parser = new pb::MessageParser<Quote>(() => new Quote());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Quote> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quote() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quote(Quote other) : this() {
      entryID_ = other.entryID_;
      quoteUTC_ = other.quoteUTC_;
      price_ = other.price_;
      volume_ = other.volume_;
      tradeCondition_ = other.tradeCondition_;
      numberOfOrders_ = other.numberOfOrders_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quote Clone() {
      return new Quote(this);
    }

    /// <summary>Field number for the "entryID" field.</summary>
    public const int EntryIDFieldNumber = 1;
    private string entryID_ = "";
    /// <summary>
    ///this is for MDEntryID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EntryID {
      get { return entryID_; }
      set {
        entryID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quoteUTC" field.</summary>
    public const int QuoteUTCFieldNumber = 2;
    private ulong quoteUTC_;
    /// <summary>
    /// Time of the quote (UTC).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QuoteUTC {
      get { return quoteUTC_; }
      set {
        quoteUTC_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 3;
    private double price_;
    /// <summary>
    /// Quote price. when price &amp; volume are all 0, means remove the specified entry
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 4;
    private ulong volume_;
    /// <summary>
    /// Quote volume (included for BBA only if volume is subscribed).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "tradeCondition" field.</summary>
    public const int TradeConditionFieldNumber = 5;
    private string tradeCondition_ = "";
    /// <summary>
    ///refer to FIX tag 277,Space-delimited list of conditions describing a trade
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeCondition {
      get { return tradeCondition_; }
      set {
        tradeCondition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "numberOfOrders" field.</summary>
    public const int NumberOfOrdersFieldNumber = 6;
    private uint numberOfOrders_;
    /// <summary>
    ///In an Aggregated Book, used to show how many individual orders make up this entry
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumberOfOrders {
      get { return numberOfOrders_; }
      set {
        numberOfOrders_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Quote);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Quote other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntryID != other.EntryID) return false;
      if (QuoteUTC != other.QuoteUTC) return false;
      if (Price != other.Price) return false;
      if (Volume != other.Volume) return false;
      if (TradeCondition != other.TradeCondition) return false;
      if (NumberOfOrders != other.NumberOfOrders) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntryID.Length != 0) hash ^= EntryID.GetHashCode();
      if (QuoteUTC != 0UL) hash ^= QuoteUTC.GetHashCode();
      if (Price != 0D) hash ^= Price.GetHashCode();
      if (Volume != 0UL) hash ^= Volume.GetHashCode();
      if (TradeCondition.Length != 0) hash ^= TradeCondition.GetHashCode();
      if (NumberOfOrders != 0) hash ^= NumberOfOrders.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntryID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EntryID);
      }
      if (QuoteUTC != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(QuoteUTC);
      }
      if (Price != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Price);
      }
      if (Volume != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Volume);
      }
      if (TradeCondition.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TradeCondition);
      }
      if (NumberOfOrders != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(NumberOfOrders);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntryID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EntryID);
      }
      if (QuoteUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QuoteUTC);
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (Volume != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Volume);
      }
      if (TradeCondition.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeCondition);
      }
      if (NumberOfOrders != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumberOfOrders);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Quote other) {
      if (other == null) {
        return;
      }
      if (other.EntryID.Length != 0) {
        EntryID = other.EntryID;
      }
      if (other.QuoteUTC != 0UL) {
        QuoteUTC = other.QuoteUTC;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.Volume != 0UL) {
        Volume = other.Volume;
      }
      if (other.TradeCondition.Length != 0) {
        TradeCondition = other.TradeCondition;
      }
      if (other.NumberOfOrders != 0) {
        NumberOfOrders = other.NumberOfOrders;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EntryID = input.ReadString();
            break;
          }
          case 16: {
            QuoteUTC = input.ReadUInt64();
            break;
          }
          case 25: {
            Price = input.ReadDouble();
            break;
          }
          case 32: {
            Volume = input.ReadUInt64();
            break;
          }
          case 42: {
            TradeCondition = input.ReadString();
            break;
          }
          case 48: {
            NumberOfOrders = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TickRange : pb::IMessage<TickRange> {
    private static readonly pb::MessageParser<TickRange> _parser = new pb::MessageParser<TickRange>(() => new TickRange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TickRange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TickRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TickRange(TickRange other) : this() {
      priceRange_ = other.priceRange_;
      numTicks_ = other.numTicks_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TickRange Clone() {
      return new TickRange(this);
    }

    /// <summary>Field number for the "priceRange" field.</summary>
    public const int PriceRangeFieldNumber = 1;
    private double priceRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PriceRange {
      get { return priceRange_; }
      set {
        priceRange_ = value;
      }
    }

    /// <summary>Field number for the "numTicks" field.</summary>
    public const int NumTicksFieldNumber = 2;
    private uint numTicks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumTicks {
      get { return numTicks_; }
      set {
        numTicks_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TickRange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TickRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PriceRange != other.PriceRange) return false;
      if (NumTicks != other.NumTicks) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PriceRange != 0D) hash ^= PriceRange.GetHashCode();
      if (NumTicks != 0) hash ^= NumTicks.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PriceRange != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(PriceRange);
      }
      if (NumTicks != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NumTicks);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PriceRange != 0D) {
        size += 1 + 8;
      }
      if (NumTicks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumTicks);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TickRange other) {
      if (other == null) {
        return;
      }
      if (other.PriceRange != 0D) {
        PriceRange = other.PriceRange;
      }
      if (other.NumTicks != 0) {
        NumTicks = other.NumTicks;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            PriceRange = input.ReadDouble();
            break;
          }
          case 16: {
            NumTicks = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InstrumentTradingRule : pb::IMessage<InstrumentTradingRule> {
    private static readonly pb::MessageParser<InstrumentTradingRule> _parser = new pb::MessageParser<InstrumentTradingRule>(() => new InstrumentTradingRule());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstrumentTradingRule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentTradingRule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentTradingRule(InstrumentTradingRule other) : this() {
      volumeMultiple_ = other.volumeMultiple_;
      maxMarketOrderVolume_ = other.maxMarketOrderVolume_;
      minMarketOrderVolume_ = other.minMarketOrderVolume_;
      maxLimitOrderVolume_ = other.maxLimitOrderVolume_;
      minLimitOrderVolume_ = other.minLimitOrderVolume_;
      positionType_ = other.positionType_;
      includePastPosition_ = other.includePastPosition_;
      closeDealType_ = other.closeDealType_;
      mortgageUseRange_ = other.mortgageUseRange_;
      lotSize_ = other.lotSize_;
      tickSize_ = other.tickSize_;
      tickValue_ = other.tickValue_;
      tickRange_ = other.tickRange_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentTradingRule Clone() {
      return new InstrumentTradingRule(this);
    }

    /// <summary>Field number for the "volumeMultiple" field.</summary>
    public const int VolumeMultipleFieldNumber = 1;
    private uint volumeMultiple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VolumeMultiple {
      get { return volumeMultiple_; }
      set {
        volumeMultiple_ = value;
      }
    }

    /// <summary>Field number for the "maxMarketOrderVolume" field.</summary>
    public const int MaxMarketOrderVolumeFieldNumber = 2;
    private uint maxMarketOrderVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxMarketOrderVolume {
      get { return maxMarketOrderVolume_; }
      set {
        maxMarketOrderVolume_ = value;
      }
    }

    /// <summary>Field number for the "minMarketOrderVolume" field.</summary>
    public const int MinMarketOrderVolumeFieldNumber = 3;
    private uint minMarketOrderVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinMarketOrderVolume {
      get { return minMarketOrderVolume_; }
      set {
        minMarketOrderVolume_ = value;
      }
    }

    /// <summary>Field number for the "maxLimitOrderVolume" field.</summary>
    public const int MaxLimitOrderVolumeFieldNumber = 4;
    private uint maxLimitOrderVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxLimitOrderVolume {
      get { return maxLimitOrderVolume_; }
      set {
        maxLimitOrderVolume_ = value;
      }
    }

    /// <summary>Field number for the "minLimitOrderVolume" field.</summary>
    public const int MinLimitOrderVolumeFieldNumber = 5;
    private uint minLimitOrderVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinLimitOrderVolume {
      get { return minLimitOrderVolume_; }
      set {
        minLimitOrderVolume_ = value;
      }
    }

    /// <summary>Field number for the "positionType" field.</summary>
    public const int PositionTypeFieldNumber = 6;
    private global::Com.Xceder.Messages.InstrumentTradingRule.Types.POSITION_TYPE positionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.InstrumentTradingRule.Types.POSITION_TYPE PositionType {
      get { return positionType_; }
      set {
        positionType_ = value;
      }
    }

    /// <summary>Field number for the "includePastPosition" field.</summary>
    public const int IncludePastPositionFieldNumber = 7;
    private bool includePastPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludePastPosition {
      get { return includePastPosition_; }
      set {
        includePastPosition_ = value;
      }
    }

    /// <summary>Field number for the "closeDealType" field.</summary>
    public const int CloseDealTypeFieldNumber = 8;
    private global::Com.Xceder.Messages.InstrumentTradingRule.Types.CLOSEDEAL_TYPE closeDealType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.InstrumentTradingRule.Types.CLOSEDEAL_TYPE CloseDealType {
      get { return closeDealType_; }
      set {
        closeDealType_ = value;
      }
    }

    /// <summary>Field number for the "mortgageUseRange" field.</summary>
    public const int MortgageUseRangeFieldNumber = 9;
    private global::Com.Xceder.Messages.InstrumentTradingRule.Types.MORTGAGE_USAGE mortgageUseRange_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.InstrumentTradingRule.Types.MORTGAGE_USAGE MortgageUseRange {
      get { return mortgageUseRange_; }
      set {
        mortgageUseRange_ = value;
      }
    }

    /// <summary>Field number for the "lotSize" field.</summary>
    public const int LotSizeFieldNumber = 10;
    private uint lotSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LotSize {
      get { return lotSize_; }
      set {
        lotSize_ = value;
      }
    }

    /// <summary>Field number for the "tickSize" field.</summary>
    public const int TickSizeFieldNumber = 11;
    private double tickSize_;
    /// <summary>
    ///Size of one base tick for this security
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TickSize {
      get { return tickSize_; }
      set {
        tickSize_ = value;
      }
    }

    /// <summary>Field number for the "tickValue" field.</summary>
    public const int TickValueFieldNumber = 12;
    private double tickValue_;
    /// <summary>
    ///Size of one point for this security in product native currency
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TickValue {
      get { return tickValue_; }
      set {
        tickValue_ = value;
      }
    }

    /// <summary>Field number for the "tickRange" field.</summary>
    public const int TickRangeFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Com.Xceder.Messages.TickRange> _repeated_tickRange_codec
        = pb::FieldCodec.ForMessage(106, global::Com.Xceder.Messages.TickRange.Parser);
    private readonly pbc::RepeatedField<global::Com.Xceder.Messages.TickRange> tickRange_ = new pbc::RepeatedField<global::Com.Xceder.Messages.TickRange>();
    /// <summary>
    ///tick table for price tiers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Xceder.Messages.TickRange> TickRange {
      get { return tickRange_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstrumentTradingRule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstrumentTradingRule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VolumeMultiple != other.VolumeMultiple) return false;
      if (MaxMarketOrderVolume != other.MaxMarketOrderVolume) return false;
      if (MinMarketOrderVolume != other.MinMarketOrderVolume) return false;
      if (MaxLimitOrderVolume != other.MaxLimitOrderVolume) return false;
      if (MinLimitOrderVolume != other.MinLimitOrderVolume) return false;
      if (PositionType != other.PositionType) return false;
      if (IncludePastPosition != other.IncludePastPosition) return false;
      if (CloseDealType != other.CloseDealType) return false;
      if (MortgageUseRange != other.MortgageUseRange) return false;
      if (LotSize != other.LotSize) return false;
      if (TickSize != other.TickSize) return false;
      if (TickValue != other.TickValue) return false;
      if(!tickRange_.Equals(other.tickRange_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VolumeMultiple != 0) hash ^= VolumeMultiple.GetHashCode();
      if (MaxMarketOrderVolume != 0) hash ^= MaxMarketOrderVolume.GetHashCode();
      if (MinMarketOrderVolume != 0) hash ^= MinMarketOrderVolume.GetHashCode();
      if (MaxLimitOrderVolume != 0) hash ^= MaxLimitOrderVolume.GetHashCode();
      if (MinLimitOrderVolume != 0) hash ^= MinLimitOrderVolume.GetHashCode();
      if (PositionType != 0) hash ^= PositionType.GetHashCode();
      if (IncludePastPosition != false) hash ^= IncludePastPosition.GetHashCode();
      if (CloseDealType != 0) hash ^= CloseDealType.GetHashCode();
      if (MortgageUseRange != 0) hash ^= MortgageUseRange.GetHashCode();
      if (LotSize != 0) hash ^= LotSize.GetHashCode();
      if (TickSize != 0D) hash ^= TickSize.GetHashCode();
      if (TickValue != 0D) hash ^= TickValue.GetHashCode();
      hash ^= tickRange_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VolumeMultiple != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(VolumeMultiple);
      }
      if (MaxMarketOrderVolume != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MaxMarketOrderVolume);
      }
      if (MinMarketOrderVolume != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MinMarketOrderVolume);
      }
      if (MaxLimitOrderVolume != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MaxLimitOrderVolume);
      }
      if (MinLimitOrderVolume != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MinLimitOrderVolume);
      }
      if (PositionType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) PositionType);
      }
      if (IncludePastPosition != false) {
        output.WriteRawTag(56);
        output.WriteBool(IncludePastPosition);
      }
      if (CloseDealType != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) CloseDealType);
      }
      if (MortgageUseRange != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) MortgageUseRange);
      }
      if (LotSize != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(LotSize);
      }
      if (TickSize != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(TickSize);
      }
      if (TickValue != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(TickValue);
      }
      tickRange_.WriteTo(output, _repeated_tickRange_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VolumeMultiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VolumeMultiple);
      }
      if (MaxMarketOrderVolume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxMarketOrderVolume);
      }
      if (MinMarketOrderVolume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinMarketOrderVolume);
      }
      if (MaxLimitOrderVolume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxLimitOrderVolume);
      }
      if (MinLimitOrderVolume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinLimitOrderVolume);
      }
      if (PositionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PositionType);
      }
      if (IncludePastPosition != false) {
        size += 1 + 1;
      }
      if (CloseDealType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CloseDealType);
      }
      if (MortgageUseRange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MortgageUseRange);
      }
      if (LotSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LotSize);
      }
      if (TickSize != 0D) {
        size += 1 + 8;
      }
      if (TickValue != 0D) {
        size += 1 + 8;
      }
      size += tickRange_.CalculateSize(_repeated_tickRange_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstrumentTradingRule other) {
      if (other == null) {
        return;
      }
      if (other.VolumeMultiple != 0) {
        VolumeMultiple = other.VolumeMultiple;
      }
      if (other.MaxMarketOrderVolume != 0) {
        MaxMarketOrderVolume = other.MaxMarketOrderVolume;
      }
      if (other.MinMarketOrderVolume != 0) {
        MinMarketOrderVolume = other.MinMarketOrderVolume;
      }
      if (other.MaxLimitOrderVolume != 0) {
        MaxLimitOrderVolume = other.MaxLimitOrderVolume;
      }
      if (other.MinLimitOrderVolume != 0) {
        MinLimitOrderVolume = other.MinLimitOrderVolume;
      }
      if (other.PositionType != 0) {
        PositionType = other.PositionType;
      }
      if (other.IncludePastPosition != false) {
        IncludePastPosition = other.IncludePastPosition;
      }
      if (other.CloseDealType != 0) {
        CloseDealType = other.CloseDealType;
      }
      if (other.MortgageUseRange != 0) {
        MortgageUseRange = other.MortgageUseRange;
      }
      if (other.LotSize != 0) {
        LotSize = other.LotSize;
      }
      if (other.TickSize != 0D) {
        TickSize = other.TickSize;
      }
      if (other.TickValue != 0D) {
        TickValue = other.TickValue;
      }
      tickRange_.Add(other.tickRange_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VolumeMultiple = input.ReadUInt32();
            break;
          }
          case 16: {
            MaxMarketOrderVolume = input.ReadUInt32();
            break;
          }
          case 24: {
            MinMarketOrderVolume = input.ReadUInt32();
            break;
          }
          case 32: {
            MaxLimitOrderVolume = input.ReadUInt32();
            break;
          }
          case 40: {
            MinLimitOrderVolume = input.ReadUInt32();
            break;
          }
          case 48: {
            positionType_ = (global::Com.Xceder.Messages.InstrumentTradingRule.Types.POSITION_TYPE) input.ReadEnum();
            break;
          }
          case 56: {
            IncludePastPosition = input.ReadBool();
            break;
          }
          case 64: {
            closeDealType_ = (global::Com.Xceder.Messages.InstrumentTradingRule.Types.CLOSEDEAL_TYPE) input.ReadEnum();
            break;
          }
          case 72: {
            mortgageUseRange_ = (global::Com.Xceder.Messages.InstrumentTradingRule.Types.MORTGAGE_USAGE) input.ReadEnum();
            break;
          }
          case 80: {
            LotSize = input.ReadUInt32();
            break;
          }
          case 89: {
            TickSize = input.ReadDouble();
            break;
          }
          case 97: {
            TickValue = input.ReadDouble();
            break;
          }
          case 106: {
            tickRange_.AddEntriesFrom(input, _repeated_tickRange_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the InstrumentTradingRule message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CLOSEDEAL_TYPE {
        [pbr::OriginalName("NORMAL_DEAL")] NormalDeal = 0,
        [pbr::OriginalName("SPECFIRST")] Specfirst = 1,
      }

      public enum POSITION_TYPE {
        [pbr::OriginalName("NET")] Net = 0,
        [pbr::OriginalName("GROSS")] Gross = 1,
        [pbr::OriginalName("LONG")] Long = 2,
        [pbr::OriginalName("SHORT")] Short = 3,
      }

      public enum MORTGAGE_USAGE {
        /// <summary>
        ////can't use
        /// </summary>
        [pbr::OriginalName("NONE")] None = 0,
        /// <summary>
        ///userd for margin only
        /// </summary>
        [pbr::OriginalName("MARGIN")] Margin = 1,
        /// <summary>
        ///used for margin, charge...
        /// </summary>
        [pbr::OriginalName("ALL")] All = 2,
      }

    }
    #endregion

  }

  public sealed partial class EnergyAttributes : pb::IMessage<EnergyAttributes> {
    private static readonly pb::MessageParser<EnergyAttributes> _parser = new pb::MessageParser<EnergyAttributes>(() => new EnergyAttributes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnergyAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnergyAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnergyAttributes(EnergyAttributes other) : this() {
      deliveryUnit_ = other.deliveryUnit_;
      blocks_ = other.blocks_;
      deliveryDays_ = other.deliveryDays_;
      contractTerm_ = other.contractTerm_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnergyAttributes Clone() {
      return new EnergyAttributes(this);
    }

    /// <summary>Field number for the "deliveryUnit" field.</summary>
    public const int DeliveryUnitFieldNumber = 1;
    private uint deliveryUnit_;
    /// <summary>
    ///Delivery unit for this contract (2500 MMBtus, 50 megawatts,and so on). when it is 0, means delivers all-at-once
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeliveryUnit {
      get { return deliveryUnit_; }
      set {
        deliveryUnit_ = value;
      }
    }

    /// <summary>Field number for the "blocks" field.</summary>
    public const int BlocksFieldNumber = 2;
    private uint blocks_;
    /// <summary>
    ///Total number of deliverable units per contract
    ///You can calculate the number of deliverable units per delivery day by dividing this value by the value in deliveryDays.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Blocks {
      get { return blocks_; }
      set {
        blocks_ = value;
      }
    }

    /// <summary>Field number for the "deliveryDays" field.</summary>
    public const int DeliveryDaysFieldNumber = 3;
    private uint deliveryDays_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeliveryDays {
      get { return deliveryDays_; }
      set {
        deliveryDays_ = value;
      }
    }

    /// <summary>Field number for the "contractTerm" field.</summary>
    public const int ContractTermFieldNumber = 4;
    private global::Com.Xceder.Messages.EnergyAttributes.Types.CONTRACT_TERM contractTerm_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.EnergyAttributes.Types.CONTRACT_TERM ContractTerm {
      get { return contractTerm_; }
      set {
        contractTerm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnergyAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnergyAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeliveryUnit != other.DeliveryUnit) return false;
      if (Blocks != other.Blocks) return false;
      if (DeliveryDays != other.DeliveryDays) return false;
      if (ContractTerm != other.ContractTerm) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeliveryUnit != 0) hash ^= DeliveryUnit.GetHashCode();
      if (Blocks != 0) hash ^= Blocks.GetHashCode();
      if (DeliveryDays != 0) hash ^= DeliveryDays.GetHashCode();
      if (ContractTerm != 0) hash ^= ContractTerm.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeliveryUnit != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DeliveryUnit);
      }
      if (Blocks != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Blocks);
      }
      if (DeliveryDays != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DeliveryDays);
      }
      if (ContractTerm != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ContractTerm);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeliveryUnit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeliveryUnit);
      }
      if (Blocks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Blocks);
      }
      if (DeliveryDays != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeliveryDays);
      }
      if (ContractTerm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ContractTerm);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnergyAttributes other) {
      if (other == null) {
        return;
      }
      if (other.DeliveryUnit != 0) {
        DeliveryUnit = other.DeliveryUnit;
      }
      if (other.Blocks != 0) {
        Blocks = other.Blocks;
      }
      if (other.DeliveryDays != 0) {
        DeliveryDays = other.DeliveryDays;
      }
      if (other.ContractTerm != 0) {
        ContractTerm = other.ContractTerm;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DeliveryUnit = input.ReadUInt32();
            break;
          }
          case 16: {
            Blocks = input.ReadUInt32();
            break;
          }
          case 24: {
            DeliveryDays = input.ReadUInt32();
            break;
          }
          case 32: {
            contractTerm_ = (global::Com.Xceder.Messages.EnergyAttributes.Types.CONTRACT_TERM) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EnergyAttributes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CONTRACT_TERM {
        /// <summary>
        ///default is monthly
        /// </summary>
        [pbr::OriginalName("MONTHLY")] Monthly = 0,
        /// <summary>
        ///Daily term
        /// </summary>
        [pbr::OriginalName("DAILY")] Daily = 1,
        /// <summary>
        ///same day
        /// </summary>
        [pbr::OriginalName("DAY")] Day = 2,
        /// <summary>
        ///next day
        /// </summary>
        [pbr::OriginalName("NEXT_DAY")] NextDay = 3,
        /// <summary>
        ///Balance of week
        /// </summary>
        [pbr::OriginalName("WEEK")] Week = 4,
        /// <summary>
        ///Weekly term
        /// </summary>
        [pbr::OriginalName("WEEKLY")] Weekly = 5,
        /// <summary>
        ///Balance of month
        /// </summary>
        [pbr::OriginalName("MONTH")] Month = 6,
        /// <summary>
        ///Quarterly term
        /// </summary>
        [pbr::OriginalName("QUARTERLY")] Quarterly = 7,
        /// <summary>
        ///Seasonal term
        /// </summary>
        [pbr::OriginalName("SEASONAL")] Seasonal = 8,
        /// <summary>
        ///Yearly calendar term
        /// </summary>
        [pbr::OriginalName("YEARLY")] Yearly = 9,
        /// <summary>
        ///Variable term
        /// </summary>
        [pbr::OriginalName("VARIABLE")] Variable = 10,
        /// <summary>
        ///Custom
        /// </summary>
        [pbr::OriginalName("CUSTOM")] Custom = 11,
      }

    }
    #endregion

  }

  public sealed partial class OptionsAttributes : pb::IMessage<OptionsAttributes> {
    private static readonly pb::MessageParser<OptionsAttributes> _parser = new pb::MessageParser<OptionsAttributes>(() => new OptionsAttributes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OptionsAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionsAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionsAttributes(OptionsAttributes other) : this() {
      type_ = other.type_;
      strikePrice_ = other.strikePrice_;
      version_ = other.version_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionsAttributes Clone() {
      return new OptionsAttributes(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Com.Xceder.Messages.OptionsAttributes.Types.OPTIONS_TYPE type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.OptionsAttributes.Types.OPTIONS_TYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "strikePrice" field.</summary>
    public const int StrikePriceFieldNumber = 2;
    private double strikePrice_;
    /// <summary>
    ///only valid for the options
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StrikePrice {
      get { return strikePrice_; }
      set {
        strikePrice_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private uint version_;
    /// <summary>
    ///FIX OptAttribute char code, It is usually '0' but can have higher integer values indicating a change to the contract.
    /// For example, if an event such as a stock split occurs, the exchange will change the version of the options on the stock
    /// to indicate a change in a property of the underlying contract. So it would be possible to have two option contracts
    /// with the same strike price but different versions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OptionsAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OptionsAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (StrikePrice != other.StrikePrice) return false;
      if (Version != other.Version) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (StrikePrice != 0D) hash ^= StrikePrice.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (StrikePrice != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(StrikePrice);
      }
      if (Version != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (StrikePrice != 0D) {
        size += 1 + 8;
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OptionsAttributes other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.StrikePrice != 0D) {
        StrikePrice = other.StrikePrice;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Com.Xceder.Messages.OptionsAttributes.Types.OPTIONS_TYPE) input.ReadEnum();
            break;
          }
          case 17: {
            StrikePrice = input.ReadDouble();
            break;
          }
          case 24: {
            Version = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the OptionsAttributes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum OPTIONS_TYPE {
        [pbr::OriginalName("PUT")] Put = 0,
        [pbr::OriginalName("CALL")] Call = 1,
      }

    }
    #endregion

  }

  public sealed partial class MarginFormula : pb::IMessage<MarginFormula> {
    private static readonly pb::MessageParser<MarginFormula> _parser = new pb::MessageParser<MarginFormula>(() => new MarginFormula());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarginFormula> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarginFormula() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarginFormula(MarginFormula other) : this() {
      longMarginRatio_ = other.longMarginRatio_;
      shortMarginRatio_ = other.shortMarginRatio_;
      isMaxMarginSideAlgorithm_ = other.isMaxMarginSideAlgorithm_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarginFormula Clone() {
      return new MarginFormula(this);
    }

    /// <summary>Field number for the "longMarginRatio" field.</summary>
    public const int LongMarginRatioFieldNumber = 1;
    private double longMarginRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LongMarginRatio {
      get { return longMarginRatio_; }
      set {
        longMarginRatio_ = value;
      }
    }

    /// <summary>Field number for the "shortMarginRatio" field.</summary>
    public const int ShortMarginRatioFieldNumber = 2;
    private double shortMarginRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ShortMarginRatio {
      get { return shortMarginRatio_; }
      set {
        shortMarginRatio_ = value;
      }
    }

    /// <summary>Field number for the "isMaxMarginSideAlgorithm" field.</summary>
    public const int IsMaxMarginSideAlgorithmFieldNumber = 3;
    private bool isMaxMarginSideAlgorithm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMaxMarginSideAlgorithm {
      get { return isMaxMarginSideAlgorithm_; }
      set {
        isMaxMarginSideAlgorithm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarginFormula);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarginFormula other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LongMarginRatio != other.LongMarginRatio) return false;
      if (ShortMarginRatio != other.ShortMarginRatio) return false;
      if (IsMaxMarginSideAlgorithm != other.IsMaxMarginSideAlgorithm) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LongMarginRatio != 0D) hash ^= LongMarginRatio.GetHashCode();
      if (ShortMarginRatio != 0D) hash ^= ShortMarginRatio.GetHashCode();
      if (IsMaxMarginSideAlgorithm != false) hash ^= IsMaxMarginSideAlgorithm.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LongMarginRatio != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(LongMarginRatio);
      }
      if (ShortMarginRatio != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(ShortMarginRatio);
      }
      if (IsMaxMarginSideAlgorithm != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsMaxMarginSideAlgorithm);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LongMarginRatio != 0D) {
        size += 1 + 8;
      }
      if (ShortMarginRatio != 0D) {
        size += 1 + 8;
      }
      if (IsMaxMarginSideAlgorithm != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarginFormula other) {
      if (other == null) {
        return;
      }
      if (other.LongMarginRatio != 0D) {
        LongMarginRatio = other.LongMarginRatio;
      }
      if (other.ShortMarginRatio != 0D) {
        ShortMarginRatio = other.ShortMarginRatio;
      }
      if (other.IsMaxMarginSideAlgorithm != false) {
        IsMaxMarginSideAlgorithm = other.IsMaxMarginSideAlgorithm;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            LongMarginRatio = input.ReadDouble();
            break;
          }
          case 17: {
            ShortMarginRatio = input.ReadDouble();
            break;
          }
          case 24: {
            IsMaxMarginSideAlgorithm = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Instruments : pb::IMessage<Instruments> {
    private static readonly pb::MessageParser<Instruments> _parser = new pb::MessageParser<Instruments>(() => new Instruments());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Instruments> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Instruments() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Instruments(Instruments other) : this() {
      instrument_ = other.instrument_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Instruments Clone() {
      return new Instruments(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Xceder.Messages.Instrument> _repeated_instrument_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Xceder.Messages.Instrument.Parser);
    private readonly pbc::RepeatedField<global::Com.Xceder.Messages.Instrument> instrument_ = new pbc::RepeatedField<global::Com.Xceder.Messages.Instrument>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Xceder.Messages.Instrument> Instrument {
      get { return instrument_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Instruments);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Instruments other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instrument_.Equals(other.instrument_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instrument_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      instrument_.WriteTo(output, _repeated_instrument_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += instrument_.CalculateSize(_repeated_instrument_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Instruments other) {
      if (other == null) {
        return;
      }
      instrument_.Add(other.instrument_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            instrument_.AddEntriesFrom(input, _repeated_instrument_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InstrumentStatuses : pb::IMessage<InstrumentStatuses> {
    private static readonly pb::MessageParser<InstrumentStatuses> _parser = new pb::MessageParser<InstrumentStatuses>(() => new InstrumentStatuses());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstrumentStatuses> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentStatuses() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentStatuses(InstrumentStatuses other) : this() {
      status_ = other.status_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentStatuses Clone() {
      return new InstrumentStatuses(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Xceder.Messages.InstrumentStatus> _repeated_status_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Xceder.Messages.InstrumentStatus.Parser);
    private readonly pbc::RepeatedField<global::Com.Xceder.Messages.InstrumentStatus> status_ = new pbc::RepeatedField<global::Com.Xceder.Messages.InstrumentStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Xceder.Messages.InstrumentStatus> Status {
      get { return status_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstrumentStatuses);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstrumentStatuses other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!status_.Equals(other.status_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= status_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      status_.WriteTo(output, _repeated_status_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += status_.CalculateSize(_repeated_status_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstrumentStatuses other) {
      if (other == null) {
        return;
      }
      status_.Add(other.status_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InstrumentStatus : pb::IMessage<InstrumentStatus> {
    private static readonly pb::MessageParser<InstrumentStatus> _parser = new pb::MessageParser<InstrumentStatus>(() => new InstrumentStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstrumentStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentStatus(InstrumentStatus other) : this() {
      Instrument = other.instrument_ != null ? other.Instrument.Clone() : null;
      status_ = other.status_;
      remark_ = other.remark_;
      updateTimeUTC_ = other.updateTimeUTC_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentStatus Clone() {
      return new InstrumentStatus(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private global::Com.Xceder.Messages.Instrument.Types.Identity instrument_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Instrument.Types.Identity Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Com.Xceder.Messages.Instrument.Types.STATUS status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Instrument.Types.STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 3;
    private string remark_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateTimeUTC" field.</summary>
    public const int UpdateTimeUTCFieldNumber = 4;
    private ulong updateTimeUTC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UpdateTimeUTC {
      get { return updateTimeUTC_; }
      set {
        updateTimeUTC_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstrumentStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstrumentStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Instrument, other.Instrument)) return false;
      if (Status != other.Status) return false;
      if (Remark != other.Remark) return false;
      if (UpdateTimeUTC != other.UpdateTimeUTC) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (instrument_ != null) hash ^= Instrument.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (UpdateTimeUTC != 0UL) hash ^= UpdateTimeUTC.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Remark);
      }
      if (UpdateTimeUTC != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(UpdateTimeUTC);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (instrument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instrument);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (UpdateTimeUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UpdateTimeUTC);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstrumentStatus other) {
      if (other == null) {
        return;
      }
      if (other.instrument_ != null) {
        if (instrument_ == null) {
          instrument_ = new global::Com.Xceder.Messages.Instrument.Types.Identity();
        }
        Instrument.MergeFrom(other.Instrument);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.UpdateTimeUTC != 0UL) {
        UpdateTimeUTC = other.UpdateTimeUTC;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (instrument_ == null) {
              instrument_ = new global::Com.Xceder.Messages.Instrument.Types.Identity();
            }
            input.ReadMessage(instrument_);
            break;
          }
          case 16: {
            status_ = (global::Com.Xceder.Messages.Instrument.Types.STATUS) input.ReadEnum();
            break;
          }
          case 26: {
            Remark = input.ReadString();
            break;
          }
          case 32: {
            UpdateTimeUTC = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Instrument : pb::IMessage<Instrument> {
    private static readonly pb::MessageParser<Instrument> _parser = new pb::MessageParser<Instrument>(() => new Instrument());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Instrument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Instrument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Instrument(Instrument other) : this() {
      Identity = other.identity_ != null ? other.Identity.Clone() : null;
      product_ = other.product_;
      cFICode_ = other.cFICode_;
      description_ = other.description_;
      currency_ = other.currency_;
      createEpochDay_ = other.createEpochDay_;
      maturityEpochDays_ = other.maturityEpochDays_;
      listEpochDay_ = other.listEpochDay_;
      startDeliveryEpochDays_ = other.startDeliveryEpochDays_;
      endDeliveryEpochDays_ = other.endDeliveryEpochDays_;
      MarginCalculation = other.marginCalculation_ != null ? other.MarginCalculation.Clone() : null;
      contractSymbol_ = other.contractSymbol_;
      TradingRule = other.tradingRule_ != null ? other.TradingRule.Clone() : null;
      underlying_ = other.underlying_.Clone();
      OptionAttributes = other.optionAttributes_ != null ? other.OptionAttributes.Clone() : null;
      EnergyAttributes = other.energyAttributes_ != null ? other.EnergyAttributes.Clone() : null;
      updateTimeUTC_ = other.updateTimeUTC_;
      isNonTradable_ = other.isNonTradable_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Instrument Clone() {
      return new Instrument(this);
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 1;
    private global::Com.Xceder.Messages.Instrument.Types.Identity identity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Instrument.Types.Identity Identity {
      get { return identity_; }
      set {
        identity_ = value;
      }
    }

    /// <summary>Field number for the "product" field.</summary>
    public const int ProductFieldNumber = 2;
    private global::Com.Xceder.Messages.Instrument.Types.PRODUCT product_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.Instrument.Types.PRODUCT Product {
      get { return product_; }
      set {
        product_ = value;
      }
    }

    /// <summary>Field number for the "CFICode" field.</summary>
    public const int CFICodeFieldNumber = 3;
    private string cFICode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CFICode {
      get { return cFICode_; }
      set {
        cFICode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 5;
    private string currency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createEpochDay" field.</summary>
    public const int CreateEpochDayFieldNumber = 6;
    private uint createEpochDay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateEpochDay {
      get { return createEpochDay_; }
      set {
        createEpochDay_ = value;
      }
    }

    /// <summary>Field number for the "maturityEpochDays" field.</summary>
    public const int MaturityEpochDaysFieldNumber = 7;
    private uint maturityEpochDays_;
    /// <summary>
    ///or expiration date
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaturityEpochDays {
      get { return maturityEpochDays_; }
      set {
        maturityEpochDays_ = value;
      }
    }

    /// <summary>Field number for the "listEpochDay" field.</summary>
    public const int ListEpochDayFieldNumber = 8;
    private uint listEpochDay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ListEpochDay {
      get { return listEpochDay_; }
      set {
        listEpochDay_ = value;
      }
    }

    /// <summary>Field number for the "startDeliveryEpochDays" field.</summary>
    public const int StartDeliveryEpochDaysFieldNumber = 9;
    private uint startDeliveryEpochDays_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartDeliveryEpochDays {
      get { return startDeliveryEpochDays_; }
      set {
        startDeliveryEpochDays_ = value;
      }
    }

    /// <summary>Field number for the "endDeliveryEpochDays" field.</summary>
    public const int EndDeliveryEpochDaysFieldNumber = 10;
    private uint endDeliveryEpochDays_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndDeliveryEpochDays {
      get { return endDeliveryEpochDays_; }
      set {
        endDeliveryEpochDays_ = value;
      }
    }

    /// <summary>Field number for the "marginCalculation" field.</summary>
    public const int MarginCalculationFieldNumber = 11;
    private global::Com.Xceder.Messages.MarginFormula marginCalculation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.MarginFormula MarginCalculation {
      get { return marginCalculation_; }
      set {
        marginCalculation_ = value;
      }
    }

    /// <summary>Field number for the "contractSymbol" field.</summary>
    public const int ContractSymbolFieldNumber = 12;
    private string contractSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContractSymbol {
      get { return contractSymbol_; }
      set {
        contractSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tradingRule" field.</summary>
    public const int TradingRuleFieldNumber = 13;
    private global::Com.Xceder.Messages.InstrumentTradingRule tradingRule_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.InstrumentTradingRule TradingRule {
      get { return tradingRule_; }
      set {
        tradingRule_ = value;
      }
    }

    /// <summary>Field number for the "underlying" field.</summary>
    public const int UnderlyingFieldNumber = 14;
    private static readonly pbc::MapField<string, global::Com.Xceder.Messages.Instrument.Types.Leg>.Codec _map_underlying_codec
        = new pbc::MapField<string, global::Com.Xceder.Messages.Instrument.Types.Leg>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Com.Xceder.Messages.Instrument.Types.Leg.Parser), 114);
    private readonly pbc::MapField<string, global::Com.Xceder.Messages.Instrument.Types.Leg> underlying_ = new pbc::MapField<string, global::Com.Xceder.Messages.Instrument.Types.Leg>();
    /// <summary>
    ///key will be the SecurityID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Com.Xceder.Messages.Instrument.Types.Leg> Underlying {
      get { return underlying_; }
    }

    /// <summary>Field number for the "optionAttributes" field.</summary>
    public const int OptionAttributesFieldNumber = 15;
    private global::Com.Xceder.Messages.OptionsAttributes optionAttributes_;
    /// <summary>
    ///only need for option
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.OptionsAttributes OptionAttributes {
      get { return optionAttributes_; }
      set {
        optionAttributes_ = value;
      }
    }

    /// <summary>Field number for the "energyAttributes" field.</summary>
    public const int EnergyAttributesFieldNumber = 16;
    private global::Com.Xceder.Messages.EnergyAttributes energyAttributes_;
    /// <summary>
    ///it is only for NRG instruments
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Xceder.Messages.EnergyAttributes EnergyAttributes {
      get { return energyAttributes_; }
      set {
        energyAttributes_ = value;
      }
    }

    /// <summary>Field number for the "updateTimeUTC" field.</summary>
    public const int UpdateTimeUTCFieldNumber = 17;
    private ulong updateTimeUTC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UpdateTimeUTC {
      get { return updateTimeUTC_; }
      set {
        updateTimeUTC_ = value;
      }
    }

    /// <summary>Field number for the "isNonTradable" field.</summary>
    public const int IsNonTradableFieldNumber = 18;
    private bool isNonTradable_;
    /// <summary>
    ///means this instrument is archived, should not avaible for trading
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNonTradable {
      get { return isNonTradable_; }
      set {
        isNonTradable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Instrument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Instrument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Identity, other.Identity)) return false;
      if (Product != other.Product) return false;
      if (CFICode != other.CFICode) return false;
      if (Description != other.Description) return false;
      if (Currency != other.Currency) return false;
      if (CreateEpochDay != other.CreateEpochDay) return false;
      if (MaturityEpochDays != other.MaturityEpochDays) return false;
      if (ListEpochDay != other.ListEpochDay) return false;
      if (StartDeliveryEpochDays != other.StartDeliveryEpochDays) return false;
      if (EndDeliveryEpochDays != other.EndDeliveryEpochDays) return false;
      if (!object.Equals(MarginCalculation, other.MarginCalculation)) return false;
      if (ContractSymbol != other.ContractSymbol) return false;
      if (!object.Equals(TradingRule, other.TradingRule)) return false;
      if (!Underlying.Equals(other.Underlying)) return false;
      if (!object.Equals(OptionAttributes, other.OptionAttributes)) return false;
      if (!object.Equals(EnergyAttributes, other.EnergyAttributes)) return false;
      if (UpdateTimeUTC != other.UpdateTimeUTC) return false;
      if (IsNonTradable != other.IsNonTradable) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (identity_ != null) hash ^= Identity.GetHashCode();
      if (Product != 0) hash ^= Product.GetHashCode();
      if (CFICode.Length != 0) hash ^= CFICode.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (CreateEpochDay != 0) hash ^= CreateEpochDay.GetHashCode();
      if (MaturityEpochDays != 0) hash ^= MaturityEpochDays.GetHashCode();
      if (ListEpochDay != 0) hash ^= ListEpochDay.GetHashCode();
      if (StartDeliveryEpochDays != 0) hash ^= StartDeliveryEpochDays.GetHashCode();
      if (EndDeliveryEpochDays != 0) hash ^= EndDeliveryEpochDays.GetHashCode();
      if (marginCalculation_ != null) hash ^= MarginCalculation.GetHashCode();
      if (ContractSymbol.Length != 0) hash ^= ContractSymbol.GetHashCode();
      if (tradingRule_ != null) hash ^= TradingRule.GetHashCode();
      hash ^= Underlying.GetHashCode();
      if (optionAttributes_ != null) hash ^= OptionAttributes.GetHashCode();
      if (energyAttributes_ != null) hash ^= EnergyAttributes.GetHashCode();
      if (UpdateTimeUTC != 0UL) hash ^= UpdateTimeUTC.GetHashCode();
      if (IsNonTradable != false) hash ^= IsNonTradable.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (identity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Identity);
      }
      if (Product != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Product);
      }
      if (CFICode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CFICode);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Currency);
      }
      if (CreateEpochDay != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(CreateEpochDay);
      }
      if (MaturityEpochDays != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(MaturityEpochDays);
      }
      if (ListEpochDay != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ListEpochDay);
      }
      if (StartDeliveryEpochDays != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(StartDeliveryEpochDays);
      }
      if (EndDeliveryEpochDays != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(EndDeliveryEpochDays);
      }
      if (marginCalculation_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(MarginCalculation);
      }
      if (ContractSymbol.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ContractSymbol);
      }
      if (tradingRule_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(TradingRule);
      }
      underlying_.WriteTo(output, _map_underlying_codec);
      if (optionAttributes_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(OptionAttributes);
      }
      if (energyAttributes_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(EnergyAttributes);
      }
      if (UpdateTimeUTC != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(UpdateTimeUTC);
      }
      if (IsNonTradable != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsNonTradable);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (identity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identity);
      }
      if (Product != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Product);
      }
      if (CFICode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CFICode);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (CreateEpochDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateEpochDay);
      }
      if (MaturityEpochDays != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaturityEpochDays);
      }
      if (ListEpochDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ListEpochDay);
      }
      if (StartDeliveryEpochDays != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartDeliveryEpochDays);
      }
      if (EndDeliveryEpochDays != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndDeliveryEpochDays);
      }
      if (marginCalculation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MarginCalculation);
      }
      if (ContractSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContractSymbol);
      }
      if (tradingRule_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradingRule);
      }
      size += underlying_.CalculateSize(_map_underlying_codec);
      if (optionAttributes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OptionAttributes);
      }
      if (energyAttributes_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EnergyAttributes);
      }
      if (UpdateTimeUTC != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(UpdateTimeUTC);
      }
      if (IsNonTradable != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Instrument other) {
      if (other == null) {
        return;
      }
      if (other.identity_ != null) {
        if (identity_ == null) {
          identity_ = new global::Com.Xceder.Messages.Instrument.Types.Identity();
        }
        Identity.MergeFrom(other.Identity);
      }
      if (other.Product != 0) {
        Product = other.Product;
      }
      if (other.CFICode.Length != 0) {
        CFICode = other.CFICode;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.CreateEpochDay != 0) {
        CreateEpochDay = other.CreateEpochDay;
      }
      if (other.MaturityEpochDays != 0) {
        MaturityEpochDays = other.MaturityEpochDays;
      }
      if (other.ListEpochDay != 0) {
        ListEpochDay = other.ListEpochDay;
      }
      if (other.StartDeliveryEpochDays != 0) {
        StartDeliveryEpochDays = other.StartDeliveryEpochDays;
      }
      if (other.EndDeliveryEpochDays != 0) {
        EndDeliveryEpochDays = other.EndDeliveryEpochDays;
      }
      if (other.marginCalculation_ != null) {
        if (marginCalculation_ == null) {
          marginCalculation_ = new global::Com.Xceder.Messages.MarginFormula();
        }
        MarginCalculation.MergeFrom(other.MarginCalculation);
      }
      if (other.ContractSymbol.Length != 0) {
        ContractSymbol = other.ContractSymbol;
      }
      if (other.tradingRule_ != null) {
        if (tradingRule_ == null) {
          tradingRule_ = new global::Com.Xceder.Messages.InstrumentTradingRule();
        }
        TradingRule.MergeFrom(other.TradingRule);
      }
      underlying_.Add(other.underlying_);
      if (other.optionAttributes_ != null) {
        if (optionAttributes_ == null) {
          optionAttributes_ = new global::Com.Xceder.Messages.OptionsAttributes();
        }
        OptionAttributes.MergeFrom(other.OptionAttributes);
      }
      if (other.energyAttributes_ != null) {
        if (energyAttributes_ == null) {
          energyAttributes_ = new global::Com.Xceder.Messages.EnergyAttributes();
        }
        EnergyAttributes.MergeFrom(other.EnergyAttributes);
      }
      if (other.UpdateTimeUTC != 0UL) {
        UpdateTimeUTC = other.UpdateTimeUTC;
      }
      if (other.IsNonTradable != false) {
        IsNonTradable = other.IsNonTradable;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (identity_ == null) {
              identity_ = new global::Com.Xceder.Messages.Instrument.Types.Identity();
            }
            input.ReadMessage(identity_);
            break;
          }
          case 16: {
            product_ = (global::Com.Xceder.Messages.Instrument.Types.PRODUCT) input.ReadEnum();
            break;
          }
          case 26: {
            CFICode = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            Currency = input.ReadString();
            break;
          }
          case 48: {
            CreateEpochDay = input.ReadUInt32();
            break;
          }
          case 56: {
            MaturityEpochDays = input.ReadUInt32();
            break;
          }
          case 64: {
            ListEpochDay = input.ReadUInt32();
            break;
          }
          case 72: {
            StartDeliveryEpochDays = input.ReadUInt32();
            break;
          }
          case 80: {
            EndDeliveryEpochDays = input.ReadUInt32();
            break;
          }
          case 90: {
            if (marginCalculation_ == null) {
              marginCalculation_ = new global::Com.Xceder.Messages.MarginFormula();
            }
            input.ReadMessage(marginCalculation_);
            break;
          }
          case 98: {
            ContractSymbol = input.ReadString();
            break;
          }
          case 106: {
            if (tradingRule_ == null) {
              tradingRule_ = new global::Com.Xceder.Messages.InstrumentTradingRule();
            }
            input.ReadMessage(tradingRule_);
            break;
          }
          case 114: {
            underlying_.AddEntriesFrom(input, _map_underlying_codec);
            break;
          }
          case 122: {
            if (optionAttributes_ == null) {
              optionAttributes_ = new global::Com.Xceder.Messages.OptionsAttributes();
            }
            input.ReadMessage(optionAttributes_);
            break;
          }
          case 130: {
            if (energyAttributes_ == null) {
              energyAttributes_ = new global::Com.Xceder.Messages.EnergyAttributes();
            }
            input.ReadMessage(energyAttributes_);
            break;
          }
          case 136: {
            UpdateTimeUTC = input.ReadUInt64();
            break;
          }
          case 144: {
            IsNonTradable = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Instrument message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum STATUS {
        [pbr::OriginalName("UNKNOW_STATUS")] UnknowStatus = 0,
        [pbr::OriginalName("OPENING_DELAY")] OpeningDelay = 1,
        [pbr::OriginalName("TRADING_HALT")] TradingHalt = 2,
        [pbr::OriginalName("RESUME")] Resume = 3,
        [pbr::OriginalName("NO_OPEN_NO_RESUME")] NoOpenNoResume = 4,
        [pbr::OriginalName("PRICE_INDICATION")] PriceIndication = 5,
        [pbr::OriginalName("TRADING_RANGE_INDICATION")] TradingRangeIndication = 6,
        [pbr::OriginalName("MARKET_IMBALANCE_BUY")] MarketImbalanceBuy = 7,
        [pbr::OriginalName("MARKET_IMBALANCE_SELL")] MarketImbalanceSell = 8,
        [pbr::OriginalName("MARKET_ON_CLOSE_IMBALANCE_BUY")] MarketOnCloseImbalanceBuy = 9,
        [pbr::OriginalName("MARKET_ON_CLOSE_IMBALANCE_SELL")] MarketOnCloseImbalanceSell = 10,
        [pbr::OriginalName("NO_MARKET_IMBALANCE")] NoMarketImbalance = 11,
        [pbr::OriginalName("NO_MARKET_ON_CLOSE_IMBALANCE")] NoMarketOnCloseImbalance = 12,
        [pbr::OriginalName("ITS_PRE_OPENING")] ItsPreOpening = 13,
        [pbr::OriginalName("NEW_PRICE_INDICATION")] NewPriceIndication = 14,
        [pbr::OriginalName("TRADE_DISSEMINATION_TIME")] TradeDisseminationTime = 15,
        [pbr::OriginalName("READY_TO_TRADE_START_OF_SESSION")] ReadyToTradeStartOfSession = 16,
        [pbr::OriginalName("NOT_AVAILABLE_FOR_TRADING_END_OF_SESSION")] NotAvailableForTradingEndOfSession = 17,
        [pbr::OriginalName("PRE_OPEN")] PreOpen = 18,
        [pbr::OriginalName("OPENING_ROTATION")] OpeningRotation = 19,
        [pbr::OriginalName("FAST_MARKET")] FastMarket = 20,
        [pbr::OriginalName("AUCTION")] Auction = 21,
        [pbr::OriginalName("POST_TRADE")] PostTrade = 22,
        [pbr::OriginalName("PRE_TRADE")] PreTrade = 23,
        [pbr::OriginalName("NO_PERMISSION")] NoPermission = 24,
        [pbr::OriginalName("NOT_TRADED_ON_THIS_MARKET")] NotTradedOnThisMarket = 50,
        [pbr::OriginalName("UNKNOWN_OR_INVALID")] UnknownOrInvalid = 51,
      }

      public enum PRODUCT {
        [pbr::OriginalName("UNKNOWN_TYPE")] UnknownType = 0,
        /// <summary>
        ///Euro Supranational Coupons
        /// </summary>
        [pbr::OriginalName("EUSUPRA")] Eusupra = 1,
        /// <summary>
        ///Federal Agency Coupon
        /// </summary>
        [pbr::OriginalName("FAC")] Fac = 2,
        /// <summary>
        ///Federal Agency Discount Note
        /// </summary>
        [pbr::OriginalName("FADN")] Fadn = 3,
        /// <summary>
        ///Private Export Funding
        /// </summary>
        [pbr::OriginalName("PEF")] Pef = 4,
        /// <summary>
        ///USD Supranational Coupons
        /// </summary>
        [pbr::OriginalName("SUPRA")] Supra = 5,
        /// <summary>
        ///FUTURE
        /// </summary>
        [pbr::OriginalName("FUT")] Fut = 6,
        /// <summary>
        ///OPTION
        /// </summary>
        [pbr::OriginalName("OPT")] Opt = 7,
        /// <summary>
        ///ENERGY
        /// </summary>
        [pbr::OriginalName("NRG")] Nrg = 8,
        /// <summary>
        ///Corporate Bond
        /// </summary>
        [pbr::OriginalName("CORP")] Corp = 10,
        /// <summary>
        ///Corporate Private Placement
        /// </summary>
        [pbr::OriginalName("CPP")] Cpp = 11,
        /// <summary>
        ///Convertible Bond
        /// </summary>
        [pbr::OriginalName("CB")] Cb = 12,
        /// <summary>
        ///Dual Currency
        /// </summary>
        [pbr::OriginalName("DUAL")] Dual = 13,
        /// <summary>
        ///Euro Corporate Bond
        /// </summary>
        [pbr::OriginalName("EUCORP")] Eucorp = 14,
        /// <summary>
        ///Indexed Linked
        /// </summary>
        [pbr::OriginalName("XLINKD")] Xlinkd = 15,
        /// <summary>
        ///Structured Notes
        /// </summary>
        [pbr::OriginalName("STRUCT")] Struct = 16,
        /// <summary>
        ///Yankee Corporate Bond
        /// </summary>
        [pbr::OriginalName("YANK")] Yank = 17,
        /// <summary>
        ///FOREIGN EXCHANGE CONTRACT
        /// </summary>
        [pbr::OriginalName("FOR")] For = 18,
        /// <summary>
        ///COMMON STOCK
        /// </summary>
        [pbr::OriginalName("CS")] Cs = 19,
        /// <summary>
        ///Preferred Stock
        /// </summary>
        [pbr::OriginalName("PS")] Ps = 20,
        /// <summary>
        ///Warrant now is listed under Municipals for consistency with Bloomberg fixed income product types
        /// </summary>
        [pbr::OriginalName("WAR")] War = 21,
        /// <summary>
        ///Brady Bond
        /// </summary>
        [pbr::OriginalName("BRADY")] Brady = 30,
        /// <summary>
        ///Euro Sovereigns
        /// </summary>
        [pbr::OriginalName("EUSOV")] Eusov = 31,
        /// <summary>
        ///US Treasury Bond
        /// </summary>
        [pbr::OriginalName("TBOND")] Tbond = 32,
        /// <summary>
        ///Interest strip from any bond or note
        /// </summary>
        [pbr::OriginalName("TINT")] Tint = 33,
        /// <summary>
        ///Treasury Inflation Protected Securities
        /// </summary>
        [pbr::OriginalName("TIPS")] Tips = 34,
        /// <summary>
        ///Principal strip of a callable bond or note
        /// </summary>
        [pbr::OriginalName("TCAL")] Tcal = 35,
        /// <summary>
        ///Principal strip from a non-callable bond or note
        /// </summary>
        [pbr::OriginalName("TPRN")] Tprn = 36,
        /// <summary>
        ///deprecated,US Treasury Note
        /// </summary>
        [pbr::OriginalName("UST")] Ust = 37,
        /// <summary>
        ///deprecated,US Treasury Bill
        /// </summary>
        [pbr::OriginalName("USTB")] Ustb = 38,
        /// <summary>
        ///US Treasury Note
        /// </summary>
        [pbr::OriginalName("TNOTE")] Tnote = 39,
        /// <summary>
        ///US Treasury Bill
        /// </summary>
        [pbr::OriginalName("TBILL")] Tbill = 40,
        /// <summary>
        ///TREASURIES PLUS AGENCY DEBENTURE, TT
        /// </summary>
        [pbr::OriginalName("GOVT")] Govt = 41,
        /// <summary>
        ///IDEX
        /// </summary>
        [pbr::OriginalName("IDX")] Idx = 42,
        /// <summary>
        ///Repurchase
        /// </summary>
        [pbr::OriginalName("REPO")] Repo = 50,
        /// <summary>
        ///Forward
        /// </summary>
        [pbr::OriginalName("FORWARD")] Forward = 51,
        /// <summary>
        ///Buy Sellback
        /// </summary>
        [pbr::OriginalName("BUYSELL")] Buysell = 52,
        /// <summary>
        ///Securities Loan
        /// </summary>
        [pbr::OriginalName("SECLOAN")] Secloan = 53,
        /// <summary>
        ///Securities Pledge
        /// </summary>
        [pbr::OriginalName("SECPLEDGE")] Secpledge = 54,
        /// <summary>
        ///OTHER
        /// </summary>
        [pbr::OriginalName("MF")] Mf = 55,
        /// <summary>
        ///MULTI LEG, for example, spread
        /// </summary>
        [pbr::OriginalName("MLEG")] Mleg = 56,
        /// <summary>
        ///NDF
        /// </summary>
        [pbr::OriginalName("FXNDF")] Fxndf = 57,
      }

      /// <summary>
      ///FIX IDSource name
      /// </summary>
      public enum IDSOURCE {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("SOURCE")] Source = 1,
        [pbr::OriginalName("CUSIP")] Cusip = 2,
        [pbr::OriginalName("SEDOL")] Sedol = 3,
        [pbr::OriginalName("QUIK")] Quik = 4,
        [pbr::OriginalName("ISIN_NUMBER")] IsinNumber = 5,
        [pbr::OriginalName("RIC_CODE")] RicCode = 6,
        [pbr::OriginalName("ISO_CURRENCY_CODE")] IsoCurrencyCode = 7,
        [pbr::OriginalName("ISO_COUNTRY_CODE")] IsoCountryCode = 8,
        [pbr::OriginalName("EXCHANGE_SYMBOL")] ExchangeSymbol = 9,
        [pbr::OriginalName("CONSOLIDATED_TAPE_ASSOCIATION")] ConsolidatedTapeAssociation = 10,
        [pbr::OriginalName("BLOOMBERG_SYMBOL")] BloombergSymbol = 11,
        [pbr::OriginalName("WERTPAPIER")] Wertpapier = 12,
        [pbr::OriginalName("DUTCH")] Dutch = 13,
        [pbr::OriginalName("VALOREN")] Valoren = 14,
        [pbr::OriginalName("SICOVAM")] Sicovam = 15,
        [pbr::OriginalName("BELGIAN")] Belgian = 16,
        [pbr::OriginalName("COMMON")] Common = 17,
        [pbr::OriginalName("CLEARING_HOUSE_CLEARING_ORGANIZATION")] ClearingHouseClearingOrganization = 18,
        [pbr::OriginalName("ISDA_FPML_PRODUCT_SPECIFICATION")] IsdaFpmlProductSpecification = 19,
        [pbr::OriginalName("OPTIONS_PRICE_REPORTING_AUTHORITY")] OptionsPriceReportingAuthority = 20,
        [pbr::OriginalName("ISDA_FPML_PRODUCT_URL")] IsdaFpmlProductUrl = 21,
        [pbr::OriginalName("LETTER_OF_CREDIT")] LetterOfCredit = 22,
      }

      /// <summary>
      ///there are 2 ways to locate a product. the symbol won't be abled to ensure the uniqueness. For example, futures product
      ///will have different maturity date
      ///1. id
      ///2. exchange+broker+securityID
      /// </summary>
      public sealed partial class Identity : pb::IMessage<Identity> {
        private static readonly pb::MessageParser<Identity> _parser = new pb::MessageParser<Identity>(() => new Identity());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Identity> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Xceder.Messages.Instrument.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Identity() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Identity(Identity other) : this() {
          id_ = other.id_;
          exchange_ = other.exchange_;
          broker_ = other.broker_;
          symbol_ = other.symbol_;
          securityID_ = other.securityID_;
          idSource_ = other.idSource_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Identity Clone() {
          return new Identity(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private ulong id_;
        /// <summary>
        ///this is xceder system counter ID. it is global unique and never change after create. it is a value which combines
        ///exchange, broker, product and xceder system internal instrument number
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "exchange" field.</summary>
        public const int ExchangeFieldNumber = 2;
        private global::Com.Xceder.Messages.Exchange.Types.EXCHANGE exchange_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.Xceder.Messages.Exchange.Types.EXCHANGE Exchange {
          get { return exchange_; }
          set {
            exchange_ = value;
          }
        }

        /// <summary>Field number for the "broker" field.</summary>
        public const int BrokerFieldNumber = 3;
        private global::Com.Xceder.Messages.BROKER broker_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.Xceder.Messages.BROKER Broker {
          get { return broker_; }
          set {
            broker_ = value;
          }
        }

        /// <summary>Field number for the "symbol" field.</summary>
        public const int SymbolFieldNumber = 4;
        private string symbol_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Symbol {
          get { return symbol_; }
          set {
            symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "securityID" field.</summary>
        public const int SecurityIDFieldNumber = 5;
        private string securityID_ = "";
        /// <summary>
        ///refer to FIX tag 48 SecurityID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SecurityID {
          get { return securityID_; }
          set {
            securityID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "idSource" field.</summary>
        public const int IdSourceFieldNumber = 6;
        private global::Com.Xceder.Messages.Instrument.Types.IDSOURCE idSource_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.Xceder.Messages.Instrument.Types.IDSOURCE IdSource {
          get { return idSource_; }
          set {
            idSource_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Identity);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Identity other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Exchange != other.Exchange) return false;
          if (Broker != other.Broker) return false;
          if (Symbol != other.Symbol) return false;
          if (SecurityID != other.SecurityID) return false;
          if (IdSource != other.IdSource) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0UL) hash ^= Id.GetHashCode();
          if (Exchange != 0) hash ^= Exchange.GetHashCode();
          if (Broker != 0) hash ^= Broker.GetHashCode();
          if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
          if (SecurityID.Length != 0) hash ^= SecurityID.GetHashCode();
          if (IdSource != 0) hash ^= IdSource.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Id);
          }
          if (Exchange != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Exchange);
          }
          if (Broker != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Broker);
          }
          if (Symbol.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Symbol);
          }
          if (SecurityID.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(SecurityID);
          }
          if (IdSource != 0) {
            output.WriteRawTag(48);
            output.WriteEnum((int) IdSource);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
          }
          if (Exchange != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Exchange);
          }
          if (Broker != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Broker);
          }
          if (Symbol.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
          }
          if (SecurityID.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SecurityID);
          }
          if (IdSource != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IdSource);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Identity other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0UL) {
            Id = other.Id;
          }
          if (other.Exchange != 0) {
            Exchange = other.Exchange;
          }
          if (other.Broker != 0) {
            Broker = other.Broker;
          }
          if (other.Symbol.Length != 0) {
            Symbol = other.Symbol;
          }
          if (other.SecurityID.Length != 0) {
            SecurityID = other.SecurityID;
          }
          if (other.IdSource != 0) {
            IdSource = other.IdSource;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt64();
                break;
              }
              case 16: {
                exchange_ = (global::Com.Xceder.Messages.Exchange.Types.EXCHANGE) input.ReadEnum();
                break;
              }
              case 24: {
                broker_ = (global::Com.Xceder.Messages.BROKER) input.ReadEnum();
                break;
              }
              case 34: {
                Symbol = input.ReadString();
                break;
              }
              case 42: {
                SecurityID = input.ReadString();
                break;
              }
              case 48: {
                idSource_ = (global::Com.Xceder.Messages.Instrument.Types.IDSOURCE) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Leg : pb::IMessage<Leg> {
        private static readonly pb::MessageParser<Leg> _parser = new pb::MessageParser<Leg>(() => new Leg());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Leg> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Xceder.Messages.Instrument.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Leg() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Leg(Leg other) : this() {
          Instrument = other.instrument_ != null ? other.Instrument.Clone() : null;
          side_ = other.side_;
          price_ = other.price_;
          qty_ = other.qty_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Leg Clone() {
          return new Leg(this);
        }

        /// <summary>Field number for the "instrument" field.</summary>
        public const int InstrumentFieldNumber = 1;
        private global::Com.Xceder.Messages.Instrument.Types.Identity instrument_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.Xceder.Messages.Instrument.Types.Identity Instrument {
          get { return instrument_; }
          set {
            instrument_ = value;
          }
        }

        /// <summary>Field number for the "side" field.</summary>
        public const int SideFieldNumber = 2;
        private global::Com.Xceder.Messages.SIDE side_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.Xceder.Messages.SIDE Side {
          get { return side_; }
          set {
            side_ = value;
          }
        }

        /// <summary>Field number for the "price" field.</summary>
        public const int PriceFieldNumber = 3;
        private double price_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Price {
          get { return price_; }
          set {
            price_ = value;
          }
        }

        /// <summary>Field number for the "qty" field.</summary>
        public const int QtyFieldNumber = 4;
        private uint qty_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Qty {
          get { return qty_; }
          set {
            qty_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Leg);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Leg other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Instrument, other.Instrument)) return false;
          if (Side != other.Side) return false;
          if (Price != other.Price) return false;
          if (Qty != other.Qty) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (instrument_ != null) hash ^= Instrument.GetHashCode();
          if (Side != 0) hash ^= Side.GetHashCode();
          if (Price != 0D) hash ^= Price.GetHashCode();
          if (Qty != 0) hash ^= Qty.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (instrument_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Instrument);
          }
          if (Side != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Side);
          }
          if (Price != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(Price);
          }
          if (Qty != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Qty);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (instrument_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instrument);
          }
          if (Side != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
          }
          if (Price != 0D) {
            size += 1 + 8;
          }
          if (Qty != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Qty);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Leg other) {
          if (other == null) {
            return;
          }
          if (other.instrument_ != null) {
            if (instrument_ == null) {
              instrument_ = new global::Com.Xceder.Messages.Instrument.Types.Identity();
            }
            Instrument.MergeFrom(other.Instrument);
          }
          if (other.Side != 0) {
            Side = other.Side;
          }
          if (other.Price != 0D) {
            Price = other.Price;
          }
          if (other.Qty != 0) {
            Qty = other.Qty;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (instrument_ == null) {
                  instrument_ = new global::Com.Xceder.Messages.Instrument.Types.Identity();
                }
                input.ReadMessage(instrument_);
                break;
              }
              case 16: {
                side_ = (global::Com.Xceder.Messages.SIDE) input.ReadEnum();
                break;
              }
              case 25: {
                Price = input.ReadDouble();
                break;
              }
              case 32: {
                Qty = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class AccountTradingRules : pb::IMessage<AccountTradingRules> {
    private static readonly pb::MessageParser<AccountTradingRules> _parser = new pb::MessageParser<AccountTradingRules>(() => new AccountTradingRules());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountTradingRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Xceder.Messages.GatewayReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountTradingRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountTradingRules(AccountTradingRules other) : this() {
      account_ = other.account_;
      allowedProducts_ = other.allowedProducts_.Clone();
      allowedInstruments_ = other.allowedInstruments_.Clone();
      bannedProducts_ = other.bannedProducts_.Clone();
      bannedInstruments_ = other.bannedInstruments_.Clone();
      updateTimeUTC_ = other.updateTimeUTC_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountTradingRules Clone() {
      return new AccountTradingRules(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private uint account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "allowedProducts" field.</summary>
    public const int AllowedProductsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Xceder.Messages.Instrument.Types.PRODUCT> _repeated_allowedProducts_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::Com.Xceder.Messages.Instrument.Types.PRODUCT) x);
    private readonly pbc::RepeatedField<global::Com.Xceder.Messages.Instrument.Types.PRODUCT> allowedProducts_ = new pbc::RepeatedField<global::Com.Xceder.Messages.Instrument.Types.PRODUCT>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Xceder.Messages.Instrument.Types.PRODUCT> AllowedProducts {
      get { return allowedProducts_; }
    }

    /// <summary>Field number for the "allowedInstruments" field.</summary>
    public const int AllowedInstrumentsFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_allowedInstruments_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> allowedInstruments_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> AllowedInstruments {
      get { return allowedInstruments_; }
    }

    /// <summary>Field number for the "bannedProducts" field.</summary>
    public const int BannedProductsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Com.Xceder.Messages.Instrument.Types.PRODUCT> _repeated_bannedProducts_codec
        = pb::FieldCodec.ForEnum(34, x => (int) x, x => (global::Com.Xceder.Messages.Instrument.Types.PRODUCT) x);
    private readonly pbc::RepeatedField<global::Com.Xceder.Messages.Instrument.Types.PRODUCT> bannedProducts_ = new pbc::RepeatedField<global::Com.Xceder.Messages.Instrument.Types.PRODUCT>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Xceder.Messages.Instrument.Types.PRODUCT> BannedProducts {
      get { return bannedProducts_; }
    }

    /// <summary>Field number for the "bannedInstruments" field.</summary>
    public const int BannedInstrumentsFieldNumber = 5;
    private static readonly pb::FieldCodec<ulong> _repeated_bannedInstruments_codec
        = pb::FieldCodec.ForUInt64(42);
    private readonly pbc::RepeatedField<ulong> bannedInstruments_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> BannedInstruments {
      get { return bannedInstruments_; }
    }

    /// <summary>Field number for the "updateTimeUTC" field.</summary>
    public const int UpdateTimeUTCFieldNumber = 6;
    private ulong updateTimeUTC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UpdateTimeUTC {
      get { return updateTimeUTC_; }
      set {
        updateTimeUTC_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountTradingRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountTradingRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if(!allowedProducts_.Equals(other.allowedProducts_)) return false;
      if(!allowedInstruments_.Equals(other.allowedInstruments_)) return false;
      if(!bannedProducts_.Equals(other.bannedProducts_)) return false;
      if(!bannedInstruments_.Equals(other.bannedInstruments_)) return false;
      if (UpdateTimeUTC != other.UpdateTimeUTC) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account != 0) hash ^= Account.GetHashCode();
      hash ^= allowedProducts_.GetHashCode();
      hash ^= allowedInstruments_.GetHashCode();
      hash ^= bannedProducts_.GetHashCode();
      hash ^= bannedInstruments_.GetHashCode();
      if (UpdateTimeUTC != 0UL) hash ^= UpdateTimeUTC.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Account);
      }
      allowedProducts_.WriteTo(output, _repeated_allowedProducts_codec);
      allowedInstruments_.WriteTo(output, _repeated_allowedInstruments_codec);
      bannedProducts_.WriteTo(output, _repeated_bannedProducts_codec);
      bannedInstruments_.WriteTo(output, _repeated_bannedInstruments_codec);
      if (UpdateTimeUTC != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(UpdateTimeUTC);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Account);
      }
      size += allowedProducts_.CalculateSize(_repeated_allowedProducts_codec);
      size += allowedInstruments_.CalculateSize(_repeated_allowedInstruments_codec);
      size += bannedProducts_.CalculateSize(_repeated_bannedProducts_codec);
      size += bannedInstruments_.CalculateSize(_repeated_bannedInstruments_codec);
      if (UpdateTimeUTC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UpdateTimeUTC);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountTradingRules other) {
      if (other == null) {
        return;
      }
      if (other.Account != 0) {
        Account = other.Account;
      }
      allowedProducts_.Add(other.allowedProducts_);
      allowedInstruments_.Add(other.allowedInstruments_);
      bannedProducts_.Add(other.bannedProducts_);
      bannedInstruments_.Add(other.bannedInstruments_);
      if (other.UpdateTimeUTC != 0UL) {
        UpdateTimeUTC = other.UpdateTimeUTC;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            allowedProducts_.AddEntriesFrom(input, _repeated_allowedProducts_codec);
            break;
          }
          case 26:
          case 24: {
            allowedInstruments_.AddEntriesFrom(input, _repeated_allowedInstruments_codec);
            break;
          }
          case 34:
          case 32: {
            bannedProducts_.AddEntriesFrom(input, _repeated_bannedProducts_codec);
            break;
          }
          case 42:
          case 40: {
            bannedInstruments_.AddEntriesFrom(input, _repeated_bannedInstruments_codec);
            break;
          }
          case 48: {
            UpdateTimeUTC = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
